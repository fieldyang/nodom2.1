{"code":"import { ModuleFactory } from \"./modulefactory\";\r\nimport { Util } from \"./util\";\r\n/**\r\n * 事件类\r\n * @remarks\r\n * 事件分为自有事件和代理事件\r\n * 自有事件绑定在view上\r\n * 代理事件绑定在父view上，存储于事件对象的events数组中\r\n * 如果所绑定对象已存在该事件名对应的事件，如果是代理事件，则添加到子事件队列，否则替换view自有事件\r\n * 事件执行顺序，先执行代理事件，再执行自有事件\r\n *\r\n * @author      yanglei\r\n * @since       1.0\r\n */\r\nexport class NEvent {\r\n    /**\r\n     * @param eventName     事件名\r\n     * @param eventStr      事件串或事件处理函数,以“:”分割,中间不能有空格,结构为: 方法名[:delg(代理到父对象):nopopo(禁止冒泡):once(只执行一次):capture(useCapture)]\r\n     *                      如果为函数，则替代第三个参数\r\n     * @param handler       事件执行函数，如果方法不在module methods中定义，则可以直接申明，eventStr第一个参数失效，即eventStr可以是\":delg:nopopo...\"\r\n     */\r\n    constructor(eventName, eventStr, handler) {\r\n        this.id = Util.genId();\r\n        this.name = eventName;\r\n        //如果事件串不为空，则不需要处理\r\n        if (eventStr) {\r\n            let tp = typeof eventStr;\r\n            if (tp === 'string') {\r\n                let eStr = eventStr.trim();\r\n                eStr.split(':').forEach((item, i) => {\r\n                    item = item.trim();\r\n                    if (i === 0) { //事件方法\r\n                        this.handler = item;\r\n                    }\r\n                    else { //事件附加参数\r\n                        switch (item) {\r\n                            case 'delg':\r\n                                this.delg = true;\r\n                                break;\r\n                            case 'nopopo':\r\n                                this.nopopo = true;\r\n                                break;\r\n                            case 'once':\r\n                                this.once = true;\r\n                                break;\r\n                            case 'capture':\r\n                                this.capture = true;\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else if (tp === 'function') {\r\n                handler = eventStr;\r\n            }\r\n        }\r\n        //新增事件方法（不在methods中定义）\r\n        if (handler) {\r\n            this.handler = handler;\r\n        }\r\n        //设备类型  1:触屏，2:非触屏\t\r\n        let dtype = 'ontouchend' in document ? 1 : 2;\r\n        //触屏事件根据设备类型进行处理\r\n        if (dtype === 1) { //触屏设备\r\n            switch (this.name) {\r\n                case 'click':\r\n                    this.name = 'tap';\r\n                    break;\r\n                case 'mousedown':\r\n                    this.name = 'touchstart';\r\n                    break;\r\n                case 'mouseup':\r\n                    this.name = 'touchend';\r\n                    break;\r\n                case 'mousemove':\r\n                    this.name = 'touchmove';\r\n                    break;\r\n            }\r\n        }\r\n        else { //转非触屏\r\n            switch (this.name) {\r\n                case 'tap':\r\n                    this.name = 'click';\r\n                    break;\r\n                case 'touchstart':\r\n                    this.name = 'mousedown';\r\n                    break;\r\n                case 'touchend':\r\n                    this.name = 'mouseup';\r\n                    break;\r\n                case 'touchmove':\r\n                    this.name = 'mousemove';\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 事件触发\r\n     * @param e     事件\r\n     * @param el    html element\r\n     */\r\n    fire(e, el) {\r\n        const module = ModuleFactory.get(this.moduleId);\r\n        if (!module.getContainer()) {\r\n            return;\r\n        }\r\n        let dom = module.getElement(this.domKey);\r\n        const model = dom.model;\r\n        //如果capture为true，则先执行自有事件，再执行代理事件，否则反之\r\n        if (this.capture) {\r\n            handleSelf(this, e, model, module, dom, el);\r\n            handleDelg(this, e, dom);\r\n        }\r\n        else {\r\n            if (handleDelg(this, e, dom)) {\r\n                handleSelf(this, e, model, module, dom, el);\r\n            }\r\n        }\r\n        //判断是否清除事件\r\n        if (this.events !== undefined &&\r\n            this.events.has(this.name) &&\r\n            this.events.get(this.name).length === 0 &&\r\n            this.handler === undefined) {\r\n            if (!el) {\r\n                el = module.getNode(this.domKey);\r\n            }\r\n            if (ExternalNEvent.touches[this.name]) {\r\n                ExternalNEvent.unregist(this, el);\r\n            }\r\n            else {\r\n                if (el !== null) {\r\n                    el.removeEventListener(this.name, this.handleListener);\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * 处理自有事件\r\n         * @param eObj      nodom event对象\r\n         * @param e         事件\r\n         * @param dom       虚拟dom\r\n         * @returns         true 允许冒泡 false 禁止冒泡\r\n         */\r\n        function handleDelg(eObj, e, dom) {\r\n            //代理事件执行\r\n            if (eObj.events === undefined) {\r\n                return true;\r\n            }\r\n            //事件target对应的key\r\n            let eKey = e.target.getAttribute('key');\r\n            let arr = eObj.events.get(eObj.name);\r\n            if (Util.isArray(arr)) {\r\n                if (arr.length > 0) {\r\n                    for (let i = 0; i < arr.length; i++) {\r\n                        let sdom = dom.query(arr[i].domKey);\r\n                        if (!sdom) {\r\n                            continue;\r\n                        }\r\n                        // 找到对应的子事件执行\r\n                        if (eKey === sdom.key || sdom.query(eKey)) {\r\n                            //执行\r\n                            arr[i].fire(e);\r\n                            //执行一次，需要移除\r\n                            if (arr[i].once) {\r\n                                eObj.removeChild(arr[i]);\r\n                            }\r\n                            //禁止冒泡\r\n                            if (arr[i].nopopo) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else { //删除该事件\r\n                    eObj.events.delete(eObj.name);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        /**\r\n         * 处理自有事件\r\n         * @param eObj      NEvent对象\r\n         * @param e         事件\r\n         * @param model     模型\r\n         * @param module    模块\r\n         * @param dom       虚拟dom\r\n         */\r\n        function handleSelf(eObj, e, model, module, dom, el) {\r\n            if (typeof eObj.handler === 'string') {\r\n                eObj.handler = module.getMethod(eObj.handler);\r\n            }\r\n            if (!eObj.handler) {\r\n                return;\r\n            }\r\n            //自有事件\r\n            //禁止冒泡\r\n            if (eObj.nopopo) {\r\n                e.stopPropagation();\r\n            }\r\n            Util.apply(eObj.handler, eObj, [dom, model, module, e, el]);\r\n            //事件只执行一次，则删除handler\r\n            if (eObj.once) {\r\n                delete eObj.handler;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 绑定事件\r\n     * @param module    模块\r\n     * @param dom       虚拟dom\r\n     * @param el        html element\r\n     * @param parent    父dom\r\n     * @param parentEl  对应htmlelement的父html element\r\n     */\r\n    bind(module, dom, el, parent, parentEl) {\r\n        this.moduleId = module.id;\r\n        this.domKey = dom.key;\r\n        if (this.delg && parent) { //代理到父对象\r\n            this.delegateTo(module, dom, el, parent, parentEl);\r\n        }\r\n        else {\r\n            this.bindTo(el);\r\n        }\r\n    }\r\n    /**\r\n     * 绑定到el\r\n     * @param el    目标html element\r\n     */\r\n    bindTo(el) {\r\n        //触屏事件\r\n        if (ExternalNEvent.touches[this.name]) {\r\n            ExternalNEvent.regist(this, el);\r\n        }\r\n        else {\r\n            this.handleListener = (e) => {\r\n                this.fire(e, el);\r\n            };\r\n            el.addEventListener(this.name, this.handleListener, this.capture);\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * 事件代理到父对象\r\n     * @param module    模块\r\n     * @param vdom      虚拟dom\r\n     * @param el        事件作用的html element\r\n     * @param parent    父虚拟dom\r\n     * @param parentEl  父element\r\n     */\r\n    delegateTo(module, vdom, el, parent, parentEl) {\r\n        this.domKey = vdom.key;\r\n        this.moduleId = module.id;\r\n        //如果不存在父对象，则用body\r\n        if (!parentEl) {\r\n            parentEl = document.body;\r\n        }\r\n        //父节点如果没有这个事件，则新建，否则直接指向父节点相应事件\r\n        if (!parent.events.has(this.name)) {\r\n            let ev = new NEvent(this.name);\r\n            ev.bindTo(parentEl);\r\n            parent.events.set(this.name, ev);\r\n        }\r\n        //为父对象事件添加子事件\r\n        let evt = parent.events.get(this.name);\r\n        let ev;\r\n        if (Util.isArray(evt) && evt.length > 0) {\r\n            ev = evt[0];\r\n        }\r\n        else {\r\n            ev = evt;\r\n        }\r\n        if (ev) {\r\n            ev.addChild(this);\r\n        }\r\n    }\r\n    /**\r\n     * 添加子事件\r\n     * @param ev    事件\r\n     */\r\n    addChild(ev) {\r\n        if (!this.events) {\r\n            this.events = new Map();\r\n        }\r\n        //事件类型对应的数组\r\n        if (!this.events.has(this.name)) {\r\n            this.events.set(this.name, new Array());\r\n        }\r\n        this.events.get(this.name).push(ev);\r\n    }\r\n    /**\r\n     * 移除子事件\r\n     * @param ev    子事件\r\n     */\r\n    removeChild(ev) {\r\n        if (this.events === undefined || this.events[ev.name] === undefined) {\r\n            return;\r\n        }\r\n        let ind = this.events[ev.name].indexOf(ev);\r\n        if (ind !== -1) {\r\n            this.events[ev.name].splice(ind, 1);\r\n            if (this.events[ev.name].length === 0) {\r\n                this.events.delete(ev.name);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 克隆\r\n     */\r\n    clone() {\r\n        let evt = new NEvent(this.name);\r\n        let arr = ['delg', 'once', 'nopopo', 'capture', 'handler'];\r\n        arr.forEach((item) => {\r\n            evt[item] = this[item];\r\n        });\r\n        return evt;\r\n    }\r\n    /**\r\n     * 获取event 的domkey\r\n     */\r\n    getDomKey() {\r\n        return this.domKey;\r\n    }\r\n    /**\r\n     * 设置附加参数值\r\n     * @param key       参数名\r\n     * @param value     参数值\r\n     */\r\n    setExtraParam(key, value) {\r\n        if (!this.extraParamMap) {\r\n            this.extraParamMap = new Map();\r\n        }\r\n        this.extraParamMap.set(key, value);\r\n    }\r\n    /**\r\n     * 获取附加参数值\r\n     * @param key   参数名\r\n     * @returns     参数值\r\n     */\r\n    getExtraParam(key) {\r\n        return this.extraParamMap.get(key);\r\n    }\r\n}\r\n/**\r\n * 扩展事件\r\n */\r\nexport class ExternalNEvent {\r\n    /**\r\n     * 注册事件\r\n     * @param evtObj    event对象\r\n     */\r\n    static regist(evtObj, el) {\r\n        //触屏事件组\r\n        let touchEvts = ExternalNEvent.touches[evtObj.name];\r\n        //如果绑定了，需要解绑\r\n        if (!Util.isEmpty(evtObj.touchListeners)) {\r\n            this.unregist(evtObj);\r\n        }\r\n        // el不存在\r\n        if (!el) {\r\n            const module = ModuleFactory.get(evtObj.moduleId);\r\n            el = module.getNode(evtObj.getDomKey());\r\n        }\r\n        evtObj.touchListeners = new Map();\r\n        if (touchEvts && el !== null) {\r\n            // 绑定事件组\r\n            Util.getOwnProps(touchEvts).forEach(function (ev) {\r\n                //先记录下事件，为之后释放\r\n                evtObj.touchListeners[ev] = function (e) {\r\n                    touchEvts[ev](e, evtObj);\r\n                };\r\n                el.addEventListener(ev, evtObj.touchListeners[ev], evtObj.capture);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * 取消已注册事件\r\n     * @param evtObj    event对象\r\n     * @param el        事件绑定的html element\r\n     */\r\n    static unregist(evtObj, el) {\r\n        const evt = ExternalNEvent.touches[evtObj.name];\r\n        if (!el) {\r\n            const module = ModuleFactory.get(evtObj.moduleId);\r\n            el = module.getNode(evtObj.getDomKey());\r\n        }\r\n        if (evt) {\r\n            // 解绑事件\r\n            if (el !== null) {\r\n                Util.getOwnProps(evtObj.touchListeners).forEach(function (ev) {\r\n                    el.removeEventListener(ev, evtObj.touchListeners[ev]);\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * 触屏事件\r\n */\r\nExternalNEvent.touches = {};\r\n/**\r\n * 触屏事件\r\n */\r\nExternalNEvent.touches = {\r\n    tap: {\r\n        touchstart: function (e, evtObj) {\r\n            let tch = e.touches[0];\r\n            evtObj.setExtraParam('pos', { sx: tch.pageX, sy: tch.pageY, t: Date.now() });\r\n        },\r\n        touchmove: function (e, evtObj) {\r\n            let pos = evtObj.getExtraParam('pos');\r\n            let tch = e.touches[0];\r\n            let dx = tch.pageX - pos.sx;\r\n            let dy = tch.pageY - pos.sy;\r\n            //判断是否移动\r\n            if (Math.abs(dx) > 5 || Math.abs(dy) > 5) {\r\n                pos.move = true;\r\n            }\r\n        },\r\n        touchend: function (e, evtObj) {\r\n            let pos = evtObj.getExtraParam('pos');\r\n            let dt = Date.now() - pos.t;\r\n            //点下时间不超过200ms\r\n            if (pos.move === true || dt > 200) {\r\n                return;\r\n            }\r\n            evtObj.fire(e);\r\n        }\r\n    },\r\n    swipe: {\r\n        touchstart: function (e, evtObj) {\r\n            let tch = e.touches[0];\r\n            let t = Date.now();\r\n            evtObj.setExtraParam('swipe', {\r\n                oldTime: [t, t],\r\n                speedLoc: [{ x: tch.pageX, y: tch.pageY }, { x: tch.pageX, y: tch.pageY }],\r\n                oldLoc: { x: tch.pageX, y: tch.pageY }\r\n            });\r\n        },\r\n        touchmove: function (e, evtObj) {\r\n            let nt = Date.now();\r\n            let tch = e.touches[0];\r\n            let mv = evtObj.getExtraParam('swipe');\r\n            //50ms记录一次\r\n            if (nt - mv.oldTime > 50) {\r\n                mv.speedLoc[0] = { x: mv.speedLoc[1].x, y: mv.speedLoc[1].y };\r\n                mv.speedLoc[1] = { x: tch.pageX, y: tch.pageY };\r\n                mv.oldTime[0] = mv.oldTime[1];\r\n                mv.oldTime[1] = nt;\r\n            }\r\n            mv.oldLoc = { x: tch.pageX, y: tch.pageY };\r\n        },\r\n        touchend: function (e, evtObj) {\r\n            let mv = evtObj.getExtraParam('swipe');\r\n            let nt = Date.now();\r\n            //取值序号 0 或 1，默认1，如果释放时间与上次事件太短，则取0\r\n            let ind = (nt - mv.oldTime[1] < 30) ? 0 : 1;\r\n            let dx = mv.oldLoc.x - mv.speedLoc[ind].x;\r\n            let dy = mv.oldLoc.y - mv.speedLoc[ind].y;\r\n            let s = Math.sqrt(dx * dx + dy * dy);\r\n            let dt = nt - mv.oldTime[ind];\r\n            //超过300ms 不执行事件\r\n            if (dt > 300 || s < 10) {\r\n                return;\r\n            }\r\n            let v0 = s / dt;\r\n            //速度>0.1,触发swipe事件\r\n            if (v0 > 0.05) {\r\n                let sname = '';\r\n                if (dx < 0 && Math.abs(dy / dx) < 1) {\r\n                    e.v0 = v0; //添加附加参数到e\r\n                    sname = 'swipeleft';\r\n                }\r\n                if (dx > 0 && Math.abs(dy / dx) < 1) {\r\n                    e.v0 = v0;\r\n                    sname = 'swiperight';\r\n                }\r\n                if (dy > 0 && Math.abs(dx / dy) < 1) {\r\n                    e.v0 = v0;\r\n                    sname = 'swipedown';\r\n                }\r\n                if (dy < 0 && Math.abs(dx / dy) < 1) {\r\n                    e.v0 = v0;\r\n                    sname = 'swipeup';\r\n                }\r\n                if (evtObj.name === sname) {\r\n                    evtObj.fire(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n//swipe事件\r\nExternalNEvent.touches['swipeleft'] = ExternalNEvent.touches['swipe'];\r\nExternalNEvent.touches['swiperight'] = ExternalNEvent.touches['swipe'];\r\nExternalNEvent.touches['swipeup'] = ExternalNEvent.touches['swipe'];\r\nExternalNEvent.touches['swipedown'] = ExternalNEvent.touches['swipe'];\r\n//# sourceMappingURL=event.js.map","references":["D:/Git/git_repos/nodom2.1/core/element.ts","D:/Git/git_repos/nodom2.1/core/model.ts","D:/Git/git_repos/nodom2.1/core/module.ts","D:/Git/git_repos/nodom2.1/core/modulefactory.ts","D:/Git/git_repos/nodom2.1/core/util.ts"],"map":"{\"version\":3,\"file\":\"event.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/event.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/Git/git_repos/nodom2.1/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/event.d.ts","writeByteOrderMark":false,"text":"import { Element } from \"./element\";\r\nimport { Module } from \"./module\";\r\n/**\r\n * 事件类\r\n * @remarks\r\n * 事件分为自有事件和代理事件\r\n * 自有事件绑定在view上\r\n * 代理事件绑定在父view上，存储于事件对象的events数组中\r\n * 如果所绑定对象已存在该事件名对应的事件，如果是代理事件，则添加到子事件队列，否则替换view自有事件\r\n * 事件执行顺序，先执行代理事件，再执行自有事件\r\n *\r\n * @author      yanglei\r\n * @since       1.0\r\n */\r\nexport declare class NEvent {\r\n    id: number;\r\n    /**\r\n     * 事件名\r\n     */\r\n    name: string;\r\n    /**\r\n     * 子事件数组\r\n     */\r\n    private events;\r\n    /**\r\n     * 事件处理函数名(需要在模块methods中定义)\r\n     */\r\n    private handler;\r\n    /**\r\n     * 代理到父对象\r\n     */\r\n    private delg;\r\n    /**\r\n     * 禁止冒泡\r\n     */\r\n    private nopopo;\r\n    /**\r\n     * 只执行一次\r\n     */\r\n    private once;\r\n    /**\r\n     * 使用 capture\r\n     */\r\n    capture: boolean;\r\n    /**\r\n     * 模块id\r\n     */\r\n    moduleId: number;\r\n    /**\r\n     * 事件所属虚拟dom的key\r\n     */\r\n    private domKey;\r\n    /**\r\n     * 事件监听器\r\n     */\r\n    private handleListener;\r\n    /**\r\n     * 触屏监听器\r\n     */\r\n    touchListeners: Map<string, NEvent>;\r\n    /**\r\n     * 附加参数map\r\n     */\r\n    private extraParamMap;\r\n    /**\r\n     * @param eventName     事件名\r\n     * @param eventStr      事件串或事件处理函数,以“:”分割,中间不能有空格,结构为: 方法名[:delg(代理到父对象):nopopo(禁止冒泡):once(只执行一次):capture(useCapture)]\r\n     *                      如果为函数，则替代第三个参数\r\n     * @param handler       事件执行函数，如果方法不在module methods中定义，则可以直接申明，eventStr第一个参数失效，即eventStr可以是\":delg:nopopo...\"\r\n     */\r\n    constructor(eventName: string, eventStr?: string | Function, handler?: Function);\r\n    /**\r\n     * 事件触发\r\n     * @param e     事件\r\n     * @param el    html element\r\n     */\r\n    fire(e: Event, el?: HTMLElement): void;\r\n    /**\r\n     * 绑定事件\r\n     * @param module    模块\r\n     * @param dom       虚拟dom\r\n     * @param el        html element\r\n     * @param parent    父dom\r\n     * @param parentEl  对应htmlelement的父html element\r\n     */\r\n    bind(module: Module, dom: Element, el: HTMLElement, parent: Element, parentEl?: Node): void;\r\n    /**\r\n     * 绑定到el\r\n     * @param el    目标html element\r\n     */\r\n    private bindTo;\r\n    /**\r\n     *\r\n     * 事件代理到父对象\r\n     * @param module    模块\r\n     * @param vdom      虚拟dom\r\n     * @param el        事件作用的html element\r\n     * @param parent    父虚拟dom\r\n     * @param parentEl  父element\r\n     */\r\n    private delegateTo;\r\n    /**\r\n     * 添加子事件\r\n     * @param ev    事件\r\n     */\r\n    private addChild;\r\n    /**\r\n     * 移除子事件\r\n     * @param ev    子事件\r\n     */\r\n    private removeChild;\r\n    /**\r\n     * 克隆\r\n     */\r\n    clone(): NEvent;\r\n    /**\r\n     * 获取event 的domkey\r\n     */\r\n    getDomKey(): string;\r\n    /**\r\n     * 设置附加参数值\r\n     * @param key       参数名\r\n     * @param value     参数值\r\n     */\r\n    setExtraParam(key: string, value: any): void;\r\n    /**\r\n     * 获取附加参数值\r\n     * @param key   参数名\r\n     * @returns     参数值\r\n     */\r\n    getExtraParam(key: string): any;\r\n}\r\n/**\r\n * 扩展事件\r\n */\r\nexport declare class ExternalNEvent {\r\n    /**\r\n     * 触屏事件\r\n     */\r\n    static touches: any;\r\n    /**\r\n     * 注册事件\r\n     * @param evtObj    event对象\r\n     */\r\n    static regist(evtObj: NEvent, el: HTMLElement): void;\r\n    /**\r\n     * 取消已注册事件\r\n     * @param evtObj    event对象\r\n     * @param el        事件绑定的html element\r\n     */\r\n    static unregist(evtObj: NEvent, el?: HTMLElement): void;\r\n}\r\n"}}
