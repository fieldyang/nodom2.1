{"code":"import { FilterManager } from \"./filtermanager\";\r\nimport { ModuleFactory } from \"./modulefactory\";\r\nimport { Util } from \"./util\";\r\n/**\r\n * 表达式类\r\n */\r\nexport class Expression {\r\n    /**\r\n     * @param exprStr\t表达式串\r\n     */\r\n    constructor(exprStr) {\r\n        /**\r\n         * 字符串替换map\r\n         */\r\n        this.replaceMap = new Map();\r\n        this.fields = []; // 字段数组\r\n        this.id = Util.genId();\r\n        let execStr;\r\n        if (exprStr) {\r\n            execStr = this.compile(exprStr);\r\n        }\r\n        if (execStr) {\r\n            let v = this.fields.length > 0 ? ',' + this.fields.join(',') : '';\r\n            execStr = 'function($module' + v + '){return ' + execStr + '}';\r\n            this.execFunc = eval('(' + execStr + ')');\r\n        }\r\n    }\r\n    /**\r\n     * 克隆\r\n     */\r\n    clone() {\r\n        return this;\r\n    }\r\n    /**\r\n     * 初始化，把表达式串转换成堆栈\r\n     * @param exprStr \t表达式串\r\n     */\r\n    compile(exprStr) {\r\n        //字符串正则表达式\r\n        let stringReg = [/\\\".*?\\\"/, /'.*?'/, /`.*?`/];\r\n        let quotReg = [/\\\\\"/g, /\\\\'/g, /\\\\`/g];\r\n        let quotStr = ['$$$$NODOM_QUOT1', '$$$$NODOM_QUOT2', '$$$$NODOM_QUOT3'];\r\n        //字符串替换map {$$NODOM_TMPSTRn:str,...}\r\n        let srcStr = exprStr;\r\n        let replaceIndex = 0;\r\n        //去掉内部 \\\" \\' \\`\r\n        for (let i = 0; i < 3; i++) {\r\n            srcStr = srcStr.replace(quotReg[i], quotStr[i]);\r\n        }\r\n        //替换字符串\r\n        for (;;) {\r\n            let r;\r\n            for (let reg of stringReg) {\r\n                let r1 = reg.exec(srcStr);\r\n                if (!r1) {\r\n                    continue;\r\n                }\r\n                if (!r || r.index > r1.index) {\r\n                    r = r1;\r\n                }\r\n            }\r\n            if (!r) {\r\n                break;\r\n            }\r\n            let sTmp = Expression.REP_STR + replaceIndex++;\r\n            //存入map\r\n            this.replaceMap.set(sTmp, r[0]);\r\n            //用替代串替换源串内容srcStr\r\n            srcStr = srcStr.substr(0, r.index) + sTmp + srcStr.substr(r.index + r[0].length);\r\n        }\r\n        //去掉空格\r\n        srcStr = srcStr.replace(/\\s+/g, '');\r\n        //按操作符分组\r\n        //操作数数组\r\n        let arrOperator = srcStr.split(/[\\(\\)\\!\\|\\*\\/\\+\\-><=&%]/);\r\n        //操作符数组\r\n        let arrOperand = [];\r\n        let index = 0;\r\n        for (let sp of arrOperator) {\r\n            index += sp.length;\r\n            let ch = srcStr.charAt(index++);\r\n            if (ch !== '') {\r\n                arrOperand.push(ch);\r\n            }\r\n        }\r\n        return this.genExecStr(arrOperator, arrOperand);\r\n    }\r\n    /**\r\n     * 生成执行串\r\n     * @param arrOperator   操作数数组\r\n     * @param arrOperand    操作符数组\r\n     * @returns             指令执行字符串\r\n     */\r\n    genExecStr(arrOperator, arrOperand) {\r\n        let retStr = '';\r\n        for (; arrOperator.length > 1;) {\r\n            //操作数\r\n            let opr = arrOperator.pop();\r\n            //操作符\r\n            let opd = arrOperand.pop();\r\n            let r;\r\n            let handled = false;\r\n            if (opd === '(') {\r\n                r = this.judgeAndHandleFunc(arrOperator);\r\n                if (r !== undefined) {\r\n                    //模块方法,挨着方法名的那个括号不需要\r\n                    if (r.startsWith('$module')) {\r\n                        opd = '';\r\n                    }\r\n                    if (opr !== '' && !this.addField(opr)) {\r\n                        opr = this.recoveryString(opr);\r\n                    }\r\n                    retStr = r + opd + opr + retStr;\r\n                    //函数作为一个整体操作数，把前一个操作符补上\r\n                    if (arrOperand.length > 0) {\r\n                        retStr = arrOperand.pop() + retStr;\r\n                    }\r\n                    handled = true;\r\n                }\r\n            }\r\n            else if (opd === '|') {\r\n                r = this.judgeAndHandleFilter(arrOperator, arrOperand, opr);\r\n                if (r !== undefined) {\r\n                    retStr = (arrOperand.length > 0 ? arrOperand.pop() : '') + r + retStr;\r\n                    handled = true;\r\n                }\r\n            }\r\n            if (!handled) {\r\n                if (!this.addField(opr)) {\r\n                    //还原字符串\r\n                    opr = this.recoveryString(opr);\r\n                }\r\n                retStr = opd + opr + retStr;\r\n            }\r\n        }\r\n        //第一个\r\n        if (arrOperator.length > 0) {\r\n            let opr = arrOperator.pop();\r\n            if (opr !== '') {\r\n                if (!this.addField(opr)) {\r\n                    //还原字符串\r\n                    opr = this.recoveryString(opr);\r\n                }\r\n                retStr = opr + retStr;\r\n            }\r\n        }\r\n        return retStr;\r\n    }\r\n    /**\r\n * 还原字符串\r\n * 从$$NODOM_TMPSTR还原为源串\r\n * @param str   待还原字符串\r\n * @returns     还原后的字符串\r\n */\r\n    recoveryString(str) {\r\n        if (str.startsWith(Expression.REP_STR)) {\r\n            if (this.replaceMap.has(str)) {\r\n                str = this.replaceMap.get(str);\r\n                str = str.replace(/\\$\\$NODOM_QUOT1/g, '\\\\\"');\r\n                str = str.replace(/\\$\\$NODOM_QUOT2/g, \"\\\\'\");\r\n                str = str.replace(/\\$\\$NODOM_QUOT3/g, '\\\\`');\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    /**\r\n     * 判断并处理函数\r\n     * @param arrOperator   操作数数组\r\n     * @returns             转换后的串\r\n     */\r\n    judgeAndHandleFunc(arrOperator) {\r\n        let sp = arrOperator[arrOperator.length - 1];\r\n        if (sp && sp !== '') {\r\n            //字符串阶段\r\n            arrOperator.pop();\r\n            //module 函数\r\n            if (sp.startsWith('$')) {\r\n                return '$module.methodNFactory.get(\"' + sp.substr(1) + '\").call($module,';\r\n            }\r\n            else {\r\n                return sp;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 判断并处理过滤器\r\n     * @param arrOperator   操作数数组\r\n     * @param arrOperand    操作符数组\r\n     * @param srcOp         前操作数\r\n     * @returns             过滤器串\r\n     */\r\n    judgeAndHandleFilter(arrOperator, arrOperand, srcOp) {\r\n        //判断过滤器并处理\r\n        if (srcOp.startsWith(Expression.REP_STR) || Util.isNumberString(srcOp)) {\r\n            return;\r\n        }\r\n        let sa = FilterManager.explain(srcOp);\r\n        //过滤器\r\n        if (sa.length > 1 || FilterManager.hasType(sa[0])) {\r\n            let ftype = sa[0];\r\n            sa.shift();\r\n            //参数如果不是数字，需要加上引号\r\n            sa.forEach((v, i) => {\r\n                v = this.recoveryString(v);\r\n                if (!Util.isNumberString(v)) {\r\n                    sa[i] = '\"' + v.replace(/\"/g, '\\\\\"') + '\"';\r\n                }\r\n            });\r\n            //过滤器参数串\r\n            let paramStr = sa.length > 0 ? ',' + sa.join(',') : '';\r\n            //过滤器待处理区域\r\n            let filterValue = '';\r\n            let opr = arrOperator[arrOperator.length - 1];\r\n            if (opr !== '') { //过滤字段或常量\r\n                if (!this.addField(opr)) {\r\n                    opr = this.recoveryString(opr);\r\n                }\r\n                filterValue = opr;\r\n                arrOperator.pop();\r\n            }\r\n            else if (arrOperand.length > 2 && arrOperand[arrOperand.length - 1] === ')') { //过滤器待处理部分带括号\r\n                let quotNum = 1;\r\n                let a1 = [arrOperator.pop()];\r\n                let a2 = [arrOperand.pop()];\r\n                for (let i = arrOperand.length - 1; i >= 0; i--) {\r\n                    if (arrOperand[i] === '(') {\r\n                        quotNum--;\r\n                    }\r\n                    else if (arrOperand[i] === ')') {\r\n                        quotNum++;\r\n                    }\r\n                    a1.unshift(arrOperator.pop());\r\n                    a2.unshift(arrOperand.pop());\r\n                    if (quotNum === 0) {\r\n                        //函数名\r\n                        a1.unshift(arrOperator.pop());\r\n                        break;\r\n                    }\r\n                }\r\n                filterValue = this.genExecStr(a1, a2);\r\n            }\r\n            return 'nodom.FilterManager.exec($module,\"' + ftype + '\",' + filterValue + paramStr + ')';\r\n        }\r\n    }\r\n    /**\r\n     * 表达式计算\r\n     * @param model \t模型 或 fieldObj对象\r\n     * @returns \t\t计算结果\r\n     */\r\n    val(model) {\r\n        let module = ModuleFactory.get(model.$moduleId);\r\n        if (!model) {\r\n            model = module.model;\r\n        }\r\n        let valueArr = [];\r\n        this.fields.forEach((field) => {\r\n            valueArr.push(getFieldValue(module, model, field));\r\n        });\r\n        //module作为第一个参数\r\n        valueArr.unshift(module);\r\n        let v;\r\n        try {\r\n            v = this.execFunc.apply(null, valueArr);\r\n        }\r\n        catch (e) {\r\n        }\r\n        return v === undefined || v === null ? '' : v;\r\n        /**\r\n         * 获取字段值\r\n         * @param module    模块\r\n         * @param dataObj   数据对象\r\n         * @param field     字段名\r\n         * @return          字段值\r\n         */\r\n        function getFieldValue(module, dataObj, field) {\r\n            if (dataObj.hasOwnProperty(field)) {\r\n                return dataObj[field];\r\n            }\r\n            //从根查找\r\n            return module.model.$query(field);\r\n        }\r\n    }\r\n    /**\r\n     * 添加字段到fields\r\n     * @param field \t字段\r\n     * @returns         true/false\r\n     */\r\n    addField(field) {\r\n        //js 保留字\r\n        const jsKeyWords = ['true', 'false', 'undefined', 'null', 'typeof',\r\n            'Object', 'Function', 'Array', 'Number', 'Date',\r\n            'instanceof', 'NaN'];\r\n        if (field === '' || jsKeyWords.includes(field) || field.startsWith(Expression.REP_STR) || Util.isNumberString(field)) {\r\n            return false;\r\n        }\r\n        //多级字段只保留第一级，如 x.y只保留x\r\n        let ind;\r\n        if ((ind = field.indexOf('.')) !== -1) {\r\n            field = field.substr(0, ind);\r\n        }\r\n        if (!this.fields.includes(field)) {\r\n            this.fields.push(field);\r\n        }\r\n        return true;\r\n    }\r\n}\r\n//替代串\r\nExpression.REP_STR = '$$NODOM_TMPSTR';\r\n//# sourceMappingURL=expression.js.map","references":["D:/Git/git_repos/nodom2.1/core/filtermanager.ts","D:/Git/git_repos/nodom2.1/core/model.ts","D:/Git/git_repos/nodom2.1/core/module.ts","D:/Git/git_repos/nodom2.1/core/modulefactory.ts","D:/Git/git_repos/nodom2.1/core/util.ts"],"map":"{\"version\":3,\"file\":\"expression.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/expression.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/Git/git_repos/nodom2.1/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/expression.d.ts","writeByteOrderMark":false,"text":"import { Model } from \"./model\";\r\n/**\r\n * 表达式类\r\n */\r\nexport declare class Expression {\r\n    /**\r\n     * 表达式id\r\n     */\r\n    id: number;\r\n    /**\r\n     * 字段数组\r\n     */\r\n    fields: any[];\r\n    /**\r\n     * 执行函数\r\n     */\r\n    execFunc: Function;\r\n    static REP_STR: string;\r\n    /**\r\n     * 字符串替换map\r\n     */\r\n    replaceMap: Map<string, string>;\r\n    /**\r\n     * @param exprStr\t表达式串\r\n     */\r\n    constructor(exprStr?: string);\r\n    /**\r\n     * 克隆\r\n     */\r\n    clone(): this;\r\n    /**\r\n     * 初始化，把表达式串转换成堆栈\r\n     * @param exprStr \t表达式串\r\n     */\r\n    compile(exprStr: string): string;\r\n    /**\r\n     * 生成执行串\r\n     * @param arrOperator   操作数数组\r\n     * @param arrOperand    操作符数组\r\n     * @returns             指令执行字符串\r\n     */\r\n    private genExecStr;\r\n    /**\r\n * 还原字符串\r\n * 从$$NODOM_TMPSTR还原为源串\r\n * @param str   待还原字符串\r\n * @returns     还原后的字符串\r\n */\r\n    private recoveryString;\r\n    /**\r\n     * 判断并处理函数\r\n     * @param arrOperator   操作数数组\r\n     * @returns             转换后的串\r\n     */\r\n    private judgeAndHandleFunc;\r\n    /**\r\n     * 判断并处理过滤器\r\n     * @param arrOperator   操作数数组\r\n     * @param arrOperand    操作符数组\r\n     * @param srcOp         前操作数\r\n     * @returns             过滤器串\r\n     */\r\n    private judgeAndHandleFilter;\r\n    /**\r\n     * 表达式计算\r\n     * @param model \t模型 或 fieldObj对象\r\n     * @returns \t\t计算结果\r\n     */\r\n    val(model: Model): any;\r\n    /**\r\n     * 添加字段到fields\r\n     * @param field \t字段\r\n     * @returns         true/false\r\n     */\r\n    private addField;\r\n}\r\n"}}
