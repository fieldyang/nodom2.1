{"code":"import { ModuleFactory } from \"./modulefactory\";\r\nimport { Util } from \"./util\";\r\n/**\r\n * 插件，插件为自定义元素方式实现\r\n */\r\nexport class Plugin {\r\n    constructor(params) {\r\n    }\r\n    /**\r\n     * 前置渲染方法(dom render方法中获取modelId和parentKey后执行)\r\n     * @param module    模块\r\n     * @param uidom     虚拟dom\r\n     */\r\n    beforeRender(module, uidom) {\r\n        this.element = uidom;\r\n        this.moduleId = module.id;\r\n        if (!this.model || uidom.key !== this.key) {\r\n            this.key = uidom.key;\r\n            this.model = uidom.model;\r\n            //添加到模块\r\n            if (uidom.hasProp('name')) {\r\n                module.addNPlugin(uidom.getProp('name'), this);\r\n            }\r\n            this.needPreRender = true;\r\n        }\r\n        else {\r\n            this.needPreRender = false;\r\n        }\r\n    }\r\n    /**\r\n     * 后置渲染方法(dom render结束后，选到html之前)\r\n     * @param module    模块\r\n     * @param uidom     虚拟dom\r\n     */\r\n    afterRender(module, uidom) { }\r\n    /**\r\n     * 克隆\r\n     */\r\n    clone(dst) {\r\n        let plugin = Reflect.construct(this.constructor, []);\r\n        //不拷贝属性\r\n        let excludeProps = ['key', 'element', 'modelId', 'moduleId'];\r\n        Util.getOwnProps(this).forEach((prop) => {\r\n            if (excludeProps.includes(prop)) {\r\n                return;\r\n            }\r\n            plugin[prop] = Util.clone(this[prop]);\r\n        });\r\n        if (dst) {\r\n            plugin.element = dst;\r\n        }\r\n        return plugin;\r\n    }\r\n    /**\r\n     * 获取model\r\n     */\r\n    getModel() {\r\n        let module = ModuleFactory.get(this.moduleId);\r\n        if (!module) {\r\n            return null;\r\n        }\r\n        return this.model || null;\r\n    }\r\n}\r\n//# sourceMappingURL=plugin.js.map","references":["D:/Git/git_repos/nodom2.1/core/element.ts","D:/Git/git_repos/nodom2.1/core/model.ts","D:/Git/git_repos/nodom2.1/core/module.ts","D:/Git/git_repos/nodom2.1/core/modulefactory.ts","D:/Git/git_repos/nodom2.1/core/util.ts"],"map":"{\"version\":3,\"file\":\"plugin.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/plugin.ts\"],\"names\":[],\"mappings\":\"AAGA,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B;;GAEG;AACH,MAAM,OAAO,MAAM;IAyCf,YAAY,MAAyB;IAErC,CAAC;IAED;;;;OAIG;IACI,YAAY,CAAC,MAAa,EAAC,KAAa;QAC3C,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,EAAE,CAAC;QAC1B,IAAG,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,EAAC;YACrC,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;YACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;YACzB,OAAO;YACP,IAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAC;gBACrB,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAC,IAAI,CAAC,CAAC;aACjD;YACD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;SAC7B;aAAI;YACD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;SAC9B;IACL,CAAC;IACD;;;;OAIG;IACI,WAAW,CAAC,MAAa,EAAC,KAAa,IAAE,CAAC;IAEjD;;OAEG;IACI,KAAK,CAAC,GAAY;QACrB,IAAI,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,EAAC,EAAE,CAAC,CAAC;QACpD,OAAO;QACP,IAAI,YAAY,GAAY,CAAC,KAAK,EAAC,SAAS,EAAC,SAAS,EAAC,UAAU,CAAC,CAAC;QACnE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAC,EAAE;YACnC,IAAG,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAC;gBAC3B,OAAO;aACV;YACD,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QACH,IAAG,GAAG,EAAC;YACH,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;SACxB;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;OAEG;IACI,QAAQ;QACX,IAAI,MAAM,GAAU,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrD,IAAG,CAAC,MAAM,EAAC;YACP,OAAO,IAAI,CAAC;SACf;QACD,OAAO,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC;IAC9B,CAAC;CACJ\"}","dts":{"name":"D:/Git/git_repos/nodom2.1/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/plugin.d.ts","writeByteOrderMark":false,"text":"import { Element } from \"./element\";\r\nimport { Model } from \"./model\";\r\nimport { Module } from \"./module\";\r\n/**\r\n * 插件，插件为自定义元素方式实现\r\n */\r\nexport declare class Plugin {\r\n    /**\r\n     * tag name\r\n     */\r\n    tagName: string;\r\n    /**\r\n     * 绑定的element\r\n     */\r\n    element: Element;\r\n    /**\r\n     * module id\r\n     */\r\n    moduleId: number;\r\n    /**\r\n     * model\r\n     */\r\n    model: Model;\r\n    /**\r\n     * 绑定的dom key\r\n     */\r\n    key: string;\r\n    /**\r\n     * 插件名，在module中唯一\r\n     */\r\n    name: string;\r\n    /**\r\n     * 是否需要前置渲染\r\n     */\r\n    needPreRender: boolean;\r\n    /**\r\n     * 附加数据项名\r\n     */\r\n    extraDataName: string;\r\n    constructor(params: HTMLElement | Object);\r\n    /**\r\n     * 前置渲染方法(dom render方法中获取modelId和parentKey后执行)\r\n     * @param module    模块\r\n     * @param uidom     虚拟dom\r\n     */\r\n    beforeRender(module: Module, uidom: Element): void;\r\n    /**\r\n     * 后置渲染方法(dom render结束后，选到html之前)\r\n     * @param module    模块\r\n     * @param uidom     虚拟dom\r\n     */\r\n    afterRender(module: Module, uidom: Element): void;\r\n    /**\r\n     * 克隆\r\n     */\r\n    clone(dst?: Element): any;\r\n    /**\r\n     * 获取model\r\n     */\r\n    getModel(): Model;\r\n}\r\n"}}
