{"code":"import { __awaiter } from \"tslib\";\r\nimport { Application } from \"./application\";\r\nimport { Compiler } from \"./compiler\";\r\nimport { MessageQueue } from \"./messagequeue\";\r\nimport { MethodFactory } from \"./methodfactory\";\r\nimport { Model } from \"./model\";\r\nimport { ModelManager } from \"./modelmanager\";\r\nimport { ModuleFactory } from \"./modulefactory\";\r\nimport { request } from \"./nodom\";\r\nimport { Renderer } from \"./renderer\";\r\nimport { ResourceManager } from \"./resourcemanager\";\r\nimport { Util } from \"./util\";\r\n/**\r\n * 模块类\r\n */\r\nexport class Module {\r\n    /**\r\n     * 构造器\r\n     * @param config    模块配置\r\n     */\r\n    constructor(config) {\r\n        /**\r\n         * 是否是首次渲染\r\n         */\r\n        this.firstRender = true;\r\n        /**\r\n         * 子模块id数组\r\n         */\r\n        this.children = [];\r\n        /**\r\n         * 模块创建时执行操作\r\n         */\r\n        this.createOps = [];\r\n        /**\r\n         * 状态 0 create(创建)、1 init(初始化，已编译)、2 unactive(渲染后被置为非激活) 3 active(激活，可渲染显示)\r\n         */\r\n        this.state = 0;\r\n        /**\r\n         * 需要加载新数据\r\n         */\r\n        this.loadNewData = false;\r\n        /**\r\n         * 待渲染的虚拟dom数组\r\n         */\r\n        this.renderDoms = [];\r\n        /**\r\n         * 放置模块的容器\r\n         */\r\n        this.container = null;\r\n        /**\r\n         * 子模块名id映射，如 {modulea:1}\r\n         */\r\n        this.moduleMap = new Map();\r\n        /**\r\n         * 插件集合\r\n         */\r\n        this.plugins = new Map();\r\n        this.id = Util.genId();\r\n        // 模块名字\r\n        if (config && config.name) {\r\n            this.name = config.name;\r\n        }\r\n        else {\r\n            this.name = 'Module' + this.id;\r\n        }\r\n        ModuleFactory.add(this);\r\n        this.methodFactory = new MethodFactory(this);\r\n        this.modelManager = new ModelManager(this);\r\n        //执行创建后操作\r\n        for (let foo of this.createOps) {\r\n            foo.call(this);\r\n        }\r\n        //执行创建事件\r\n        this.doModuleEvent('onCreate');\r\n        //无配置对象，不需要处理\r\n        if (!config) {\r\n            return;\r\n        }\r\n        //保存config，存在延迟初始化情况\r\n        this.initConfig = config;\r\n        //设置选择器\r\n        this.selector = config.el;\r\n        //方法加入工厂\r\n        if (Util.isObject(config.methods)) {\r\n            Util.getOwnProps(config.methods).forEach((item) => {\r\n                this.methodFactory.add(item, config.methods[item]);\r\n            });\r\n        }\r\n        //清除container的内部内容\r\n        if (this.getContainer()) {\r\n            // 处理特殊字符\r\n            this.template = this.container.innerHTML.trim();\r\n            let transferWords = { 'lt': '<', 'gt': '>', 'nbsp': ' ', 'amp': '&', 'quot': '\"' };\r\n            this.template = this.template.replace(/&(lt|gt|nbsp|amp|quot);/ig, function (all, t) { return transferWords[t]; });\r\n            this.container.innerHTML = '';\r\n        }\r\n    }\r\n    /**\r\n     * 初始化模块（加载和编译）\r\n     */\r\n    init() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let config = this.initConfig;\r\n            let urlArr = []; //请求url数组\r\n            let cssPath = Application.getPath('css');\r\n            let templatePath = Application.getPath('template');\r\n            let jsPath = Application.getPath('js');\r\n            //加载文件\r\n            if (config && Util.isArray(config.requires) && config.requires.length > 0) {\r\n                config.requires.forEach((item) => {\r\n                    let type;\r\n                    let url = '';\r\n                    if (Util.isObject(item)) { //为对象，可能是css或js\r\n                        type = item['type'] || 'js';\r\n                        url = item['url'];\r\n                    }\r\n                    else { //js文件\r\n                        type = 'js';\r\n                        url = item;\r\n                    }\r\n                    //转换路径\r\n                    let path = type === 'js' ? jsPath : cssPath;\r\n                    urlArr.push({ url: Util.mergePath([path, url]), type: type });\r\n                });\r\n            }\r\n            //模版串\r\n            let templateStr = this.template;\r\n            //模版信息\r\n            if (config.template) {\r\n                config.template = config.template.trim();\r\n                if (config.template.startsWith('<')) { //html模版串\r\n                    templateStr = config.template;\r\n                }\r\n                else { //文件\r\n                    urlArr.push({\r\n                        url: Util.mergePath([templatePath, config.template]),\r\n                        type: config.template.endsWith('.nd') ? 'nd' : 'template'\r\n                    });\r\n                }\r\n            }\r\n            //删除template\r\n            delete this.template;\r\n            //如果已存在templateStr，则直接编译\r\n            if (!Util.isEmpty(templateStr)) {\r\n                this.virtualDom = Compiler.compile(templateStr);\r\n            }\r\n            //数据\r\n            if (config.data) { //数据\r\n                if (Util.isObject(config.data)) { //数据\r\n                    this.model = new Model(config.data, this);\r\n                }\r\n                else { //数据url\r\n                    urlArr.push({\r\n                        url: config.data,\r\n                        type: 'data'\r\n                    });\r\n                    this.dataUrl = config.data;\r\n                }\r\n            }\r\n            else { //空数据\r\n                this.model = new Model({}, this);\r\n            }\r\n            //批量请求文件\r\n            if (urlArr.length > 0) {\r\n                let rets = yield ResourceManager.getResources(urlArr);\r\n                for (let r of rets) {\r\n                    if (r.type === 'template' || r.type === 'nd') {\r\n                        this.virtualDom = r.content;\r\n                    }\r\n                    else if (r.type === 'data') {\r\n                        this.model = new Model(r.content, this);\r\n                    }\r\n                }\r\n            }\r\n            //处理子模块\r\n            if (this.initConfig.modules) {\r\n                for (let cfg of this.initConfig.modules) {\r\n                    let mdl = new Module(cfg);\r\n                    mdl.parentId = this.id;\r\n                    this.addChild(mdl.id);\r\n                }\r\n            }\r\n            changeState(this);\r\n            delete this.initConfig;\r\n            /**\r\n             * 修改状态\r\n             * @param mod \t模块\r\n             */\r\n            function changeState(mod) {\r\n                if (mod.isMain) {\r\n                    mod.state = 3;\r\n                    //可能不能存在数据，需要手动添加到渲染器\r\n                    Renderer.add(mod);\r\n                }\r\n                else if (mod.parentId) {\r\n                    mod.state = ModuleFactory.get(mod.parentId).state;\r\n                }\r\n                else {\r\n                    mod.state = 1;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * 模型渲染\r\n     * @return false 渲染失败 true 渲染成功\r\n     */\r\n    render() {\r\n        //状态为2，不渲染\r\n        if (this.state === 2) {\r\n            return true;\r\n        }\r\n        //容器没就位或state不为active则不渲染，返回渲染失败\r\n        if (this.state !== 3 || !this.virtualDom || !this.getContainer()) {\r\n            return false;\r\n        }\r\n        //克隆新的树\r\n        let root = this.virtualDom.clone();\r\n        if (this.firstRender) {\r\n            //model无数据，如果存在dataUrl，则需要加载数据\r\n            if (this.loadNewData && this.dataUrl) {\r\n                request({\r\n                    url: this.dataUrl,\r\n                    type: 'json'\r\n                }).then((r) => {\r\n                    this.model = new Model(r, this);\r\n                    this.doFirstRender(root);\r\n                    this.loadNewData = false;\r\n                });\r\n            }\r\n            else {\r\n                this.doFirstRender(root);\r\n            }\r\n        }\r\n        else { //增量渲染\r\n            //执行每次渲染前事件\r\n            this.doModuleEvent('onBeforeRender');\r\n            if (this.model) {\r\n                root.model = this.model;\r\n                let oldTree = this.renderTree;\r\n                this.renderTree = root;\r\n                //渲染\r\n                root.render(this, null);\r\n                this.clearDontRender(root);\r\n                this.doModuleEvent('onBeforeRenderToHtml');\r\n                // 比较节点\r\n                root.compare(oldTree, this.renderDoms);\r\n                // 删除\r\n                for (let i = this.renderDoms.length - 1; i >= 0; i--) {\r\n                    let item = this.renderDoms[i];\r\n                    if (item.type === 'del') {\r\n                        item.node.removeFromHtml(this);\r\n                        this.renderDoms.splice(i, 1);\r\n                    }\r\n                }\r\n                // 渲染\r\n                this.renderDoms.forEach((item) => {\r\n                    item.node.renderToHtml(this, item);\r\n                });\r\n            }\r\n            //执行每次渲染后事件\r\n            this.doModuleEvent('onRender');\r\n        }\r\n        //数组还原\r\n        this.renderDoms = [];\r\n        return true;\r\n    }\r\n    /**\r\n     * 执行首次渲染\r\n     * @param root \t根虚拟dom\r\n     */\r\n    doFirstRender(root) {\r\n        this.doModuleEvent('onBeforeFirstRender');\r\n        //渲染树\r\n        this.renderTree = root;\r\n        if (this.model) {\r\n            root.model = this.model;\r\n        }\r\n        root.render(this, null);\r\n        this.clearDontRender(root);\r\n        this.doModuleEvent('onBeforeFirstRenderToHTML');\r\n        //清空子元素\r\n        Util.empty(this.container);\r\n        //渲染到html\r\n        root.renderToHtml(this, { type: 'fresh' });\r\n        //删除首次渲染标志\r\n        delete this.firstRender;\r\n        //执行首次渲染后事件\r\n        this.doModuleEvent('onFirstRender');\r\n    }\r\n    /**\r\n     * 克隆模块\r\n     * 共享virtual Dom，但是名字为新名字\r\n     * @param moduleName    新模块名\r\n     */\r\n    clone(moduleName) {\r\n        let me = this;\r\n        let m = new Module({ name: moduleName });\r\n        let excludes = ['id', 'name', 'model', 'virtualDom', 'container', 'containerKey', 'modelFactory', 'plugins'];\r\n        Object.getOwnPropertyNames(this).forEach((item) => {\r\n            if (excludes.includes(item)) {\r\n                return;\r\n            }\r\n            m[item] = me[item];\r\n        });\r\n        //克隆虚拟dom树\r\n        m.virtualDom = this.virtualDom.clone(true);\r\n        return m;\r\n    }\r\n    /**\r\n     * 检查容器是否存在，如果不存在，则尝试找到\r\n     */\r\n    getContainer() {\r\n        //根模块，直接使用el\r\n        if (this.selector) {\r\n            this.container = document.querySelector(this.selector);\r\n        }\r\n        else { //非根模块，根据容器key获得\r\n            this.container = document.querySelector(\"[key='\" + this.containerKey + \"']\");\r\n        }\r\n        return this.container;\r\n    }\r\n    /**\r\n     * 设置模块容器 key\r\n     * @param key   模块容器key\r\n     */\r\n    setContainerKey(key) {\r\n        this.containerKey = key;\r\n    }\r\n    /**\r\n     * 获取模块容器 key\r\n     * @param key   模块容器key\r\n     */\r\n    getContainerKey() {\r\n        return (this.containerKey);\r\n    }\r\n    /**\r\n     * 数据改变\r\n     * @param model \t改变的model\r\n     */\r\n    dataChange() {\r\n        Renderer.add(this);\r\n    }\r\n    /**\r\n     * 添加子模块\r\n     * @param moduleId      模块id\r\n     * @param className     类名\r\n     */\r\n    addChild(moduleId) {\r\n        if (!this.children.includes(moduleId)) {\r\n            this.children.push(moduleId);\r\n            let m = ModuleFactory.get(moduleId);\r\n            if (m) {\r\n                m.parentId = this.id;\r\n            }\r\n            //保存name和id映射\r\n            this.moduleMap.set(m.name, moduleId);\r\n            //执行无主消息检测\r\n            MessageQueue.move(m.name, moduleId, this.id);\r\n        }\r\n    }\r\n    /**\r\n     * 发送\r\n     * @param toName \t\t接收模块名或模块id，如果为模块id，则直接发送，不需要转换\r\n     * @param data \t\t\t消息内容\r\n     * @param type          0兄弟  1孩子 2父亲\r\n     */\r\n    send(toName, data, type) {\r\n        if (typeof toName === 'number') {\r\n            MessageQueue.add(this.id, toName, data);\r\n            return;\r\n        }\r\n        //目标模块id\r\n        let toId;\r\n        //父模块id\r\n        let parentId;\r\n        let m;\r\n        switch (type) {\r\n            case 1: //发送孩子\r\n                m = this.getChild(toName);\r\n                if (m) {\r\n                    toId = m.id;\r\n                }\r\n                parentId = this.id;\r\n                break;\r\n            case 2: //发送给父亲\r\n                toId = this.parentId || 0;\r\n            default: //发送给兄弟\r\n                parentId = this.parentId || 0;\r\n                //得到父模块\r\n                m = ModuleFactory.get(parentId);\r\n                if (m) {\r\n                    m = m.getChild(toName);\r\n                    if (m) {\r\n                        toId = m.id;\r\n                    }\r\n                }\r\n        }\r\n        if (toId) {\r\n            MessageQueue.add(this.id, toId, data);\r\n        }\r\n        else {\r\n            MessageQueue.add(this.id, toName, data, parentId);\r\n        }\r\n    }\r\n    /**\r\n     * 广播给父、兄弟和孩子（第一级）节点\r\n     */\r\n    broadcast(data) {\r\n        //兄弟节点\r\n        if (this.parentId) {\r\n            let pmod = ModuleFactory.get(this.parentId);\r\n            if (pmod) {\r\n                //父模块\r\n                this.send(this.parentId, data);\r\n                if (pmod.children) {\r\n                    pmod.children.forEach((item) => {\r\n                        //自己不发\r\n                        if (item === this.id) {\r\n                            return;\r\n                        }\r\n                        let m = ModuleFactory.get(item);\r\n                        //兄弟模块\r\n                        this.send(m.id, data);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        if (this.children !== undefined) {\r\n            this.children.forEach((item) => {\r\n                let m = ModuleFactory.get(item);\r\n                this.send(m.id, data);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * 接受消息\r\n     * @param fromName \t\t来源模块名\r\n     * @param data \t\t\t消息内容\r\n     */\r\n    receive(fromName, data) {\r\n        this.doModuleEvent('onReceive', [fromName, data]);\r\n    }\r\n    /**\r\n     * 激活模块(添加到渲染器)\r\n     */\r\n    active() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            //激活状态不用激活，创建状态不能激活\r\n            if (this.state === 3) {\r\n                return;\r\n            }\r\n            //未初始化，需要先初始化\r\n            if (this.state === 0) {\r\n                yield this.init();\r\n            }\r\n            this.state = 3;\r\n            //添加到渲染器\r\n            Renderer.add(this);\r\n            //孩子节点激活\r\n            if (Util.isArray(this.children)) {\r\n                this.children.forEach((item) => __awaiter(this, void 0, void 0, function* () {\r\n                    let m = ModuleFactory.get(item);\r\n                    if (m) {\r\n                        yield m.active();\r\n                    }\r\n                }));\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * 取消激活\r\n     */\r\n    unactive() {\r\n        //主模块不允许取消\r\n        if (this.isMain || this.state === 2) {\r\n            return;\r\n        }\r\n        this.state = 2;\r\n        //设置首次渲染标志\r\n        this.firstRender = true;\r\n        if (Util.isArray(this.children)) {\r\n            this.children.forEach((item) => {\r\n                let m = ModuleFactory.get(item);\r\n                if (m) {\r\n                    m.unactive();\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * 模块终结\r\n     */\r\n    destroy() {\r\n        if (Util.isArray(this.children)) {\r\n            this.children.forEach((item) => {\r\n                let m = ModuleFactory.get(item);\r\n                if (m) {\r\n                    m.destroy();\r\n                }\r\n            });\r\n        }\r\n        //从工厂释放\r\n        ModuleFactory.remove(this.id);\r\n    }\r\n    /*************事件**************/\r\n    /**\r\n     * 执行模块事件\r\n     * @param eventName \t事件名\r\n     * @param param \t\t参数，为数组\r\n     */\r\n    doModuleEvent(eventName, param) {\r\n        const foo = this.methodFactory.get(eventName);\r\n        if (!foo) {\r\n            return;\r\n        }\r\n        //调用方法\r\n        Util.apply(foo, this.model, param);\r\n    }\r\n    /**\r\n     * 添加实例化后操作\r\n     * @param foo  \t操作方法\r\n     */\r\n    addCreateOperation(foo) {\r\n        if (!Util.isFunction(foo)) {\r\n            return;\r\n        }\r\n        if (!this.createOps.includes(foo)) {\r\n            this.createOps.push(foo);\r\n        }\r\n    }\r\n    /**\r\n     * 清理不渲染节点\r\n     * @param dom   节点\r\n     */\r\n    clearDontRender(dom) {\r\n        for (let i = 0; i < dom.children.length; i++) {\r\n            let item = dom.children[i];\r\n            if (item.dontRender) {\r\n                dom.children.splice(i, 1);\r\n                return;\r\n            }\r\n            //不渲染自己，子节点前进一级\r\n            if (item.dontRenderSelf) {\r\n                let arr = [];\r\n                for (let d of item.children) {\r\n                    d.parent = dom.parent;\r\n                    d.parentKey = dom.parentKey;\r\n                    arr.push(d);\r\n                }\r\n                dom.children.splice.apply(dom.children, [i, 1].concat(arr));\r\n                continue;\r\n            }\r\n            this.clearDontRender(item);\r\n        }\r\n    }\r\n    /**\r\n     * 获取子孙模块\r\n     * @param name          模块名\r\n     * @param descendant    如果为false,只在子节点内查找，否则在后代节点查找（深度查询），直到找到第一个名字相同的模块\r\n     */\r\n    getChild(name, descendant) {\r\n        if (this.moduleMap.has(name)) {\r\n            let mid = this.moduleMap.get(name);\r\n            return ModuleFactory.get(mid);\r\n        }\r\n        else if (descendant) {\r\n            for (let id of this.children) {\r\n                let m = ModuleFactory.get(id);\r\n                if (m) {\r\n                    let m1 = m.getChild(name, descendant);\r\n                    if (m1) {\r\n                        return m1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * 获取模块方法\r\n     * @param name  方法名\r\n     * @returns     方法\r\n     */\r\n    getMethod(name) {\r\n        return this.methodFactory.get(name);\r\n    }\r\n    /**\r\n     * 添加方法\r\n     * @param name  方法名\r\n     * @param foo   方法函数\r\n     */\r\n    addMethod(name, foo) {\r\n        this.methodFactory.add(name, foo);\r\n    }\r\n    /**\r\n     * 移除方法\r\n     * @param name  方法名\r\n     */\r\n    removeMethod(name) {\r\n        this.methodFactory.remove(name);\r\n    }\r\n    /**\r\n     * 添加插件\r\n     * @param name      插件名\r\n     * @param plugin    插件\r\n     */\r\n    addNPlugin(name, plugin) {\r\n        if (name) {\r\n            this.plugins.set(name, plugin);\r\n        }\r\n    }\r\n    /**\r\n     * 获取插件\r\n     * @param name  插件名\r\n     * @returns     插件实例\r\n     */\r\n    getNPlugin(name) {\r\n        return this.plugins.get(name);\r\n    }\r\n    /**\r\n     * 设置数据url\r\n     * @param url   数据url\r\n     */\r\n    setDataUrl(url) {\r\n        this.dataUrl = url;\r\n        //设置新加载数据标志\r\n        this.loadNewData = true;\r\n    }\r\n    /**\r\n     * 获取模块下的html节点\r\n     * @param key       el key值或对象{attrName:attrValue}\r\n     * @param notNull   如果不存在，则返回container\r\n     * @returns         html element\r\n     */\r\n    getNode(key, notNull) {\r\n        let keyName;\r\n        let value;\r\n        if (typeof key === 'string') { //默认为key值查找\r\n            keyName = 'key';\r\n            value = key;\r\n        }\r\n        else { //对象\r\n            keyName = Object.getOwnPropertyNames(key)[0];\r\n            value = key[keyName];\r\n        }\r\n        let qs = \"[\" + keyName + \"='\" + value + \"']\";\r\n        let el = this.container ? this.container.querySelector(qs) : null;\r\n        if (!el && notNull) {\r\n            return this.container;\r\n        }\r\n        return el;\r\n    }\r\n    /**\r\n     * 获取虚拟dom节点\r\n     * @param key               dom key\r\n     * @param fromVirtualDom    是否从源虚拟dom数获取，否则从渲染树获取\r\n     */\r\n    getElement(key, fromVirtualDom) {\r\n        let tree = fromVirtualDom ? this.virtualDom : this.renderTree;\r\n        return tree.query(key);\r\n    }\r\n    /**\r\n     * 判断是否为容器key\r\n     * @param key   element key\r\n     */\r\n    isContainerKey(key) {\r\n        return this.containerKey === key;\r\n    }\r\n    /**\r\n     * 设置首次渲染标志\r\n     * @param flag  首次渲染标志true/false\r\n     */\r\n    setFirstRender(flag) {\r\n        this.firstRender = flag;\r\n    }\r\n    /**\r\n     * 设置为主模块\r\n     */\r\n    setMain() {\r\n        this.isMain = true;\r\n    }\r\n    /**\r\n     * 设置模块容器选择器\r\n     * @param selector\r\n     */\r\n    setSelector(selector) {\r\n        this.selector = selector;\r\n    }\r\n}\r\n//# sourceMappingURL=module.js.map","references":["D:/graduate/project/nodom2.1/nodom2.1/core/application.ts","D:/graduate/project/nodom2.1/nodom2.1/core/compiler.ts","D:/graduate/project/nodom2.1/nodom2.1/core/element.ts","D:/graduate/project/nodom2.1/nodom2.1/core/messagequeue.ts","D:/graduate/project/nodom2.1/nodom2.1/core/methodfactory.ts","D:/graduate/project/nodom2.1/nodom2.1/core/model.ts","D:/graduate/project/nodom2.1/nodom2.1/core/modelmanager.ts","D:/graduate/project/nodom2.1/nodom2.1/core/modulefactory.ts","D:/graduate/project/nodom2.1/nodom2.1/core/nodom.ts","D:/graduate/project/nodom2.1/nodom2.1/core/plugin.ts","D:/graduate/project/nodom2.1/nodom2.1/core/renderer.ts","D:/graduate/project/nodom2.1/nodom2.1/core/resourcemanager.ts","D:/graduate/project/nodom2.1/nodom2.1/core/types.ts","D:/graduate/project/nodom2.1/nodom2.1/core/util.ts"],"map":"{\"version\":3,\"file\":\"module.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/module.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/graduate/project/nodom2.1/nodom2.1/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/module.d.ts","writeByteOrderMark":false,"text":"import { Element } from \"./element\";\r\nimport { Model } from \"./model\";\r\nimport { ModelManager } from \"./modelmanager\";\r\nimport { Plugin } from \"./plugin\";\r\nimport { IModuleCfg } from \"./types\";\r\n/**\r\n * 模块类\r\n */\r\nexport declare class Module {\r\n    /**\r\n     * 模块id(全局唯一)\r\n     */\r\n    id: number;\r\n    /**\r\n     * 模块名(模块内(父模块的子模块之间)唯一)，如果不设置，则系统会自动生成Module+id\r\n     */\r\n    private name;\r\n    /**\r\n     * 模型\r\n     */\r\n    model: Model;\r\n    /**\r\n     * 是否主模块，一个app只有一个根模块\r\n     */\r\n    private isMain;\r\n    /**\r\n     * 是否是首次渲染\r\n     */\r\n    private firstRender;\r\n    /**\r\n     * 根虚拟dom\r\n     */\r\n    virtualDom: Element;\r\n    /**\r\n     * 渲染树\r\n     */\r\n    private renderTree;\r\n    /**\r\n     * 父模块名\r\n     */\r\n    private parentId;\r\n    /**\r\n     * 子模块id数组\r\n     */\r\n    children: Array<number>;\r\n    /**\r\n     * 模块对应容器选择器\r\n     */\r\n    private selector;\r\n    /**\r\n     * 模块创建时执行操作\r\n     */\r\n    private createOps;\r\n    /**\r\n     * 状态 0 create(创建)、1 init(初始化，已编译)、2 unactive(渲染后被置为非激活) 3 active(激活，可渲染显示)\r\n     */\r\n    state: number;\r\n    /**\r\n     * 数据url\r\n     */\r\n    private dataUrl;\r\n    /**\r\n     * 需要加载新数据\r\n     */\r\n    private loadNewData;\r\n    /**\r\n     * 方法工厂\r\n     */\r\n    private methodFactory;\r\n    /**\r\n     * 数据模型工厂\r\n     */\r\n    modelManager: ModelManager;\r\n    /**\r\n     * 待渲染的虚拟dom数组\r\n     */\r\n    private renderDoms;\r\n    /**\r\n     * 初始配置\r\n     */\r\n    private initConfig;\r\n    /**\r\n     * 放置模块的容器\r\n     */\r\n    private container;\r\n    /**\r\n     * 模版串\r\n     */\r\n    private template;\r\n    /**\r\n     * 容器key\r\n     */\r\n    private containerKey;\r\n    /**\r\n     * 子模块名id映射，如 {modulea:1}\r\n     */\r\n    private moduleMap;\r\n    /**\r\n     * 插件集合\r\n     */\r\n    private plugins;\r\n    /**\r\n     * 构造器\r\n     * @param config    模块配置\r\n     */\r\n    constructor(config?: IModuleCfg);\r\n    /**\r\n     * 初始化模块（加载和编译）\r\n     */\r\n    private init;\r\n    /**\r\n     * 模型渲染\r\n     * @return false 渲染失败 true 渲染成功\r\n     */\r\n    render(): boolean;\r\n    /**\r\n     * 执行首次渲染\r\n     * @param root \t根虚拟dom\r\n     */\r\n    private doFirstRender;\r\n    /**\r\n     * 克隆模块\r\n     * 共享virtual Dom，但是名字为新名字\r\n     * @param moduleName    新模块名\r\n     */\r\n    clone(moduleName: string): any;\r\n    /**\r\n     * 检查容器是否存在，如果不存在，则尝试找到\r\n     */\r\n    getContainer(): HTMLElement;\r\n    /**\r\n     * 设置模块容器 key\r\n     * @param key   模块容器key\r\n     */\r\n    setContainerKey(key: string): void;\r\n    /**\r\n     * 获取模块容器 key\r\n     * @param key   模块容器key\r\n     */\r\n    getContainerKey(): string;\r\n    /**\r\n     * 数据改变\r\n     * @param model \t改变的model\r\n     */\r\n    dataChange(): void;\r\n    /**\r\n     * 添加子模块\r\n     * @param moduleId      模块id\r\n     * @param className     类名\r\n     */\r\n    addChild(moduleId: number): void;\r\n    /**\r\n     * 发送\r\n     * @param toName \t\t接收模块名或模块id，如果为模块id，则直接发送，不需要转换\r\n     * @param data \t\t\t消息内容\r\n     * @param type          0兄弟  1孩子 2父亲\r\n     */\r\n    send(toName: string | number, data: any, type?: number): void;\r\n    /**\r\n     * 广播给父、兄弟和孩子（第一级）节点\r\n     */\r\n    broadcast(data: any): void;\r\n    /**\r\n     * 接受消息\r\n     * @param fromName \t\t来源模块名\r\n     * @param data \t\t\t消息内容\r\n     */\r\n    receive(fromName: any, data: any): void;\r\n    /**\r\n     * 激活模块(添加到渲染器)\r\n     */\r\n    active(): Promise<void>;\r\n    /**\r\n     * 取消激活\r\n     */\r\n    unactive(): void;\r\n    /**\r\n     * 模块终结\r\n     */\r\n    destroy(): void;\r\n    /*************事件**************/\r\n    /**\r\n     * 执行模块事件\r\n     * @param eventName \t事件名\r\n     * @param param \t\t参数，为数组\r\n     */\r\n    private doModuleEvent;\r\n    /**\r\n     * 添加实例化后操作\r\n     * @param foo  \t操作方法\r\n     */\r\n    addCreateOperation(foo: Function): void;\r\n    /**\r\n     * 清理不渲染节点\r\n     * @param dom   节点\r\n     */\r\n    clearDontRender(dom: Element): void;\r\n    /**\r\n     * 获取子孙模块\r\n     * @param name          模块名\r\n     * @param descendant    如果为false,只在子节点内查找，否则在后代节点查找（深度查询），直到找到第一个名字相同的模块\r\n     */\r\n    getChild(name: string, descendant?: boolean): Module;\r\n    /**\r\n     * 获取模块方法\r\n     * @param name  方法名\r\n     * @returns     方法\r\n     */\r\n    getMethod(name: string): Function;\r\n    /**\r\n     * 添加方法\r\n     * @param name  方法名\r\n     * @param foo   方法函数\r\n     */\r\n    addMethod(name: string, foo: Function): void;\r\n    /**\r\n     * 移除方法\r\n     * @param name  方法名\r\n     */\r\n    removeMethod(name: string): void;\r\n    /**\r\n     * 添加插件\r\n     * @param name      插件名\r\n     * @param plugin    插件\r\n     */\r\n    addNPlugin(name: string, plugin: Plugin): void;\r\n    /**\r\n     * 获取插件\r\n     * @param name  插件名\r\n     * @returns     插件实例\r\n     */\r\n    getNPlugin(name: string): Plugin;\r\n    /**\r\n     * 设置数据url\r\n     * @param url   数据url\r\n     */\r\n    setDataUrl(url: string): void;\r\n    /**\r\n     * 获取模块下的html节点\r\n     * @param key       el key值或对象{attrName:attrValue}\r\n     * @param notNull   如果不存在，则返回container\r\n     * @returns         html element\r\n     */\r\n    getNode(key: string | Object, notNull?: boolean): HTMLElement;\r\n    /**\r\n     * 获取虚拟dom节点\r\n     * @param key               dom key\r\n     * @param fromVirtualDom    是否从源虚拟dom数获取，否则从渲染树获取\r\n     */\r\n    getElement(key: string, fromVirtualDom?: boolean): any;\r\n    /**\r\n     * 判断是否为容器key\r\n     * @param key   element key\r\n     */\r\n    isContainerKey(key: string): boolean;\r\n    /**\r\n     * 设置首次渲染标志\r\n     * @param flag  首次渲染标志true/false\r\n     */\r\n    setFirstRender(flag: boolean): void;\r\n    /**\r\n     * 设置为主模块\r\n     */\r\n    setMain(): void;\r\n    /**\r\n     * 设置模块容器选择器\r\n     * @param selector\r\n     */\r\n    setSelector(selector: string): void;\r\n}\r\n"}}
