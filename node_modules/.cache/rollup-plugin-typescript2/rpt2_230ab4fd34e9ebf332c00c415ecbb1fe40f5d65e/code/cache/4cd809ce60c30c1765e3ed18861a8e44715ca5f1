{"code":"import { Util } from \"./util\";\r\n/**\r\n *  编译器\r\n *  描述：用于进行预编译和预编译后的json串反序列化，处理两个部分：虚拟dom树和表达式工厂\r\n *  版本2.1预留\r\n */\r\nexport class Serializer {\r\n    /**\r\n     * 序列化，只序列化virtualDom\r\n     * @param module \t模块\r\n     * @return   \t\tjsonstring\r\n     */\r\n    static serialize(module) {\r\n        let dom = module.virtualDom;\r\n        addClsName(dom);\r\n        return JSON.stringify(dom);\r\n        /**\r\n         * 为对象添加class name（递归执行）\r\n         * @param obj \t对象\r\n         */\r\n        function addClsName(obj) {\r\n            if (typeof obj !== 'object') {\r\n                return;\r\n            }\r\n            obj.className = obj.constructor.name;\r\n            Util.getOwnProps(obj).forEach((item) => {\r\n                if (Util.isArray(obj[item])) {\r\n                    //删除空数组\r\n                    if (obj[item].length === 0) {\r\n                        delete obj[item];\r\n                    }\r\n                    else {\r\n                        obj[item].forEach((item1) => {\r\n                            addClsName(item1);\r\n                        });\r\n                    }\r\n                }\r\n                else if (typeof obj[item] === 'object') {\r\n                    //删除空对象\r\n                    if (Util.isEmpty(obj[item])) {\r\n                        delete obj[item];\r\n                    }\r\n                    else {\r\n                        addClsName(obj[item]);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * 反序列化\r\n     * @param jsonStr \tjson串\r\n     * @param module \t模块\r\n     * @returns \t\t virtualDom\r\n     */\r\n    static deserialize(jsonStr) {\r\n        let jObj = JSON.parse(jsonStr);\r\n        return handleCls(jObj);\r\n        function handleCls(jsonObj) {\r\n            if (!Util.isObject(jsonObj)) {\r\n                return jsonObj;\r\n            }\r\n            let retObj;\r\n            if (jsonObj.hasOwnProperty('className')) {\r\n                const cls = jsonObj['className'];\r\n                let param = [];\r\n                //指令需要传入参数\r\n                switch (cls) {\r\n                    case 'Directive':\r\n                        param = [jsonObj['type']];\r\n                        break;\r\n                    case 'Expression':\r\n                        param = [jsonObj['execString']];\r\n                        break;\r\n                    case 'Element':\r\n                        param = [];\r\n                        break;\r\n                    case 'NodomNEvent':\r\n                        param = [jsonObj['name']];\r\n                        break;\r\n                }\r\n                let clazz = eval(cls);\r\n                retObj = Reflect.construct(clazz, param);\r\n            }\r\n            else {\r\n                retObj = {};\r\n            }\r\n            //子对象可能用到父对象属性，所以子对象要在属性赋值后处理\r\n            let objArr = []; //子对象\r\n            let arrArr = []; //子数组\r\n            Util.getOwnProps(jsonObj).forEach((item) => {\r\n                //子对象\r\n                if (Util.isObject(jsonObj[item])) {\r\n                    objArr.push(item);\r\n                }\r\n                else if (Util.isArray(jsonObj[item])) { //子数组\r\n                    arrArr.push(item);\r\n                }\r\n                else { //普通属性\r\n                    //className 不需要复制\r\n                    if (item !== 'className') {\r\n                        retObj[item] = jsonObj[item];\r\n                    }\r\n                }\r\n            });\r\n            //子对象处理\r\n            objArr.forEach((item) => {\r\n                retObj[item] = handleCls(jsonObj[item]);\r\n            });\r\n            //子数组处理\r\n            arrArr.forEach(item => {\r\n                retObj[item] = [];\r\n                jsonObj[item].forEach((item1) => {\r\n                    retObj[item].push(handleCls(item1));\r\n                });\r\n            });\r\n            return retObj;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=serializer.js.map","references":["D:/Git/git_repos/nodom2.1/core/element.ts","D:/Git/git_repos/nodom2.1/core/module.ts","D:/Git/git_repos/nodom2.1/core/util.ts"],"map":"{\"version\":3,\"file\":\"serializer.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/serializer.ts\"],\"names\":[],\"mappings\":\"AAEA,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B;;;;GAIG;AACH,MAAM,OAAO,UAAU;IACtB;;;;OAIG;IACI,MAAM,CAAC,SAAS,CAAC,MAAa;QACpC,IAAI,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC;QAC5B,UAAU,CAAC,GAAG,CAAC,CAAC;QAChB,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAE3B;;;WAGG;QACH,SAAS,UAAU,CAAC,GAAO;YAC1B,IAAG,OAAO,GAAG,KAAK,QAAQ,EAAC;gBAC1B,OAAO;aACP;YAED,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC;YAErC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAC,EAAE;gBACrC,IAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAC;oBAC1B,OAAO;oBACP,IAAG,GAAG,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,EAAC;wBACzB,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC;qBACjB;yBAAI;wBACJ,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAC,EAAE;4BAC1B,UAAU,CAAC,KAAK,CAAC,CAAC;wBACnB,CAAC,CAAC,CAAC;qBACH;iBACD;qBAAK,IAAG,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,QAAQ,EAAC;oBACtC,OAAO;oBACP,IAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAC;wBAC1B,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC;qBACjB;yBAAI;wBACJ,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;qBACtB;iBACD;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;IACF,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,WAAW,CAAC,OAAc;QACvC,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC/B,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC;QAEvB,SAAS,SAAS,CAAC,OAAO;YACzB,IAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAC;gBAC1B,OAAO,OAAO,CAAC;aACf;YAED,IAAI,MAAM,CAAC;YACX,IAAG,OAAO,CAAC,cAAc,CAAC,WAAW,CAAC,EAAC;gBACtC,MAAM,GAAG,GAAU,OAAO,CAAC,WAAW,CAAC,CAAC;gBACxC,IAAI,KAAK,GAAG,EAAE,CAAC;gBACf,UAAU;gBACV,QAAO,GAAG,EAAC;oBACV,KAAK,WAAW;wBACf,KAAK,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;wBAC1B,MAAM;oBACP,KAAK,YAAY;wBAChB,KAAK,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;wBAChC,MAAM;oBACP,KAAK,SAAS;wBACb,KAAK,GAAG,EAAE,CAAC;wBACX,MAAM;oBACP,KAAK,aAAa;wBACjB,KAAK,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;wBAC1B,MAAM;iBACP;gBACD,IAAI,KAAK,GAAO,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC1B,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,KAAK,EAAC,KAAK,CAAC,CAAC;aACxC;iBAAI;gBACJ,MAAM,GAAG,EAAE,CAAC;aACZ;YAED,6BAA6B;YAC7B,IAAI,MAAM,GAAG,EAAE,CAAC,CAAE,KAAK;YACvB,IAAI,MAAM,GAAG,EAAE,CAAC,CAAE,KAAK;YACvB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAC,EAAE;gBACzC,KAAK;gBACL,IAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAC;oBAC/B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAClB;qBAAK,IAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAC,EAAE,KAAK;oBAC3C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAClB;qBAAI,EAAG,MAAM;oBACb,iBAAiB;oBACjB,IAAG,IAAI,KAAK,WAAW,EAAC;wBACvB,MAAM,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;qBAC7B;iBACD;YACF,CAAC,CAAC,CAAC;YAEH,OAAO;YACP,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,EAAC,EAAE;gBACtB,MAAM,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;YAEH,OAAO;YACP,MAAM,CAAC,OAAO,CAAC,IAAI,CAAA,EAAE;gBACpB,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;gBAClB,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAC,EAAE;oBAC9B,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;gBACrC,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YACH,OAAO,MAAM,CAAC;QACf,CAAC;IACF,CAAC;CACD\"}","dts":{"name":"D:/Git/git_repos/nodom2.1/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/serializer.d.ts","writeByteOrderMark":false,"text":"import { Element } from \"./element\";\r\nimport { Module } from \"./module\";\r\n/**\r\n *  编译器\r\n *  描述：用于进行预编译和预编译后的json串反序列化，处理两个部分：虚拟dom树和表达式工厂\r\n *  版本2.1预留\r\n */\r\nexport declare class Serializer {\r\n    /**\r\n     * 序列化，只序列化virtualDom\r\n     * @param module \t模块\r\n     * @return   \t\tjsonstring\r\n     */\r\n    static serialize(module: Module): string;\r\n    /**\r\n     * 反序列化\r\n     * @param jsonStr \tjson串\r\n     * @param module \t模块\r\n     * @returns \t\t virtualDom\r\n     */\r\n    static deserialize(jsonStr: string): Element;\r\n}\r\n"}}
