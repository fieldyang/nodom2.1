{"code":"import { DirectiveType } from \"./directivetype\";\r\nimport { Util } from \"./util\";\r\n/**\r\n * 指令管理器\r\n */\r\nexport class DirectiveManager {\r\n    /**\r\n     * 创建指令类型\r\n     * @param name \t\t    指令类型名\r\n     * @param config \t    配置对象{order:优先级,init:初始化函数,handler:渲染处理函数}\r\n     */\r\n    static addType(name, prio, init, handle) {\r\n        this.directiveTypes.set(name, new DirectiveType(name, prio, init, handle));\r\n    }\r\n    /**\r\n     * 移除过滤器类型\r\n     * @param name  过滤器类型名\r\n     */\r\n    static removeType(name) {\r\n        this.directiveTypes.delete(name);\r\n    }\r\n    /**\r\n     * 获取类型\r\n     * @param name  指令类型名\r\n     * @returns     指令或undefined\r\n     */\r\n    static getType(name) {\r\n        return this.directiveTypes.get(name);\r\n    }\r\n    /**\r\n     * 是否有某个过滤器类型\r\n     * @param type \t\t过滤器类型名\r\n     * @returns \t\ttrue/false\r\n     */\r\n    static hasType(name) {\r\n        return this.directiveTypes.has(name);\r\n    }\r\n    /**\r\n     * 指令初始化\r\n     * @param directive     指令\r\n     * @param dom           虚拟dom\r\n     */\r\n    static init(directive, dom) {\r\n        let dt = directive.type;\r\n        if (dt) {\r\n            return dt.init(directive, dom);\r\n        }\r\n    }\r\n    /**\r\n     * 执行指令\r\n     * @param directive     指令\r\n     * @param dom           虚拟dom\r\n     * @param module        模块\r\n     * @param parent        父dom\r\n     * @returns             指令执行结果\r\n     */\r\n    static exec(directive, dom, module, parent) {\r\n        //调用\r\n        return Util.apply(directive.type.handle, null, [directive, dom, module, parent]);\r\n    }\r\n}\r\n/**\r\n * 指令类型集合\r\n */\r\nDirectiveManager.directiveTypes = new Map();\r\n//# sourceMappingURL=directivemanager.js.map","references":["D:/Git/git_repos/nodom2.1/core/module.ts","D:/Git/git_repos/nodom2.1/core/element.ts","D:/Git/git_repos/nodom2.1/core/directive.ts","D:/Git/git_repos/nodom2.1/core/directivetype.ts","D:/Git/git_repos/nodom2.1/core/util.ts"],"map":"{\"version\":3,\"file\":\"directivemanager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/directivemanager.ts\"],\"names\":[],\"mappings\":\"AAGA,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B;;GAEG;AACH,MAAM,OAAQ,gBAAgB;IAM1B;;;;OAIG;IACI,MAAM,CAAC,OAAO,CAAC,IAAW,EAAE,IAAY,EAAC,IAAc,EAAC,MAAgB;QAC3E,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,aAAa,CAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,MAAM,CAAC,CAAC,CAAC;IAC5E,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,UAAU,CAAC,IAAW;QAChC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,OAAO,CAAC,IAAW;QAC7B,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,OAAO,CAAC,IAAW;QAC7B,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED;;;;OAIG;IAEI,MAAM,CAAC,IAAI,CAAC,SAAmB,EAAC,GAAW;QAC9C,IAAI,EAAE,GAAG,SAAS,CAAC,IAAI,CAAC;QACxB,IAAI,EAAE,EAAE;YACJ,OAAO,EAAE,CAAC,IAAI,CAAC,SAAS,EAAC,GAAG,CAAC,CAAC;SACjC;IACL,CAAC;IAED;;;;;;;OAOG;IACI,MAAM,CAAC,IAAI,CAAC,SAAmB,EAAE,GAAW,EAAE,MAAa,EAAE,MAAc;QAC9E,IAAI;QACJ,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,SAAS,EAAC,GAAG,EAAC,MAAM,EAAC,MAAM,CAAC,CAAC,CAAC;IAClF,CAAC;;AAhED;;GAEG;AACY,+BAAc,GAA6B,IAAI,GAAG,EAAE,CAAC\"}","dts":{"name":"D:/Git/git_repos/nodom2.1/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/directivemanager.d.ts","writeByteOrderMark":false,"text":"import { Module } from \"./module\";\r\nimport { Element } from \"./element\";\r\nimport { Directive } from \"./directive\";\r\nimport { DirectiveType } from \"./directivetype\";\r\n/**\r\n * 指令管理器\r\n */\r\nexport declare class DirectiveManager {\r\n    /**\r\n     * 指令类型集合\r\n     */\r\n    private static directiveTypes;\r\n    /**\r\n     * 创建指令类型\r\n     * @param name \t\t    指令类型名\r\n     * @param config \t    配置对象{order:优先级,init:初始化函数,handler:渲染处理函数}\r\n     */\r\n    static addType(name: string, prio?: number, init?: Function, handle?: Function): void;\r\n    /**\r\n     * 移除过滤器类型\r\n     * @param name  过滤器类型名\r\n     */\r\n    static removeType(name: string): void;\r\n    /**\r\n     * 获取类型\r\n     * @param name  指令类型名\r\n     * @returns     指令或undefined\r\n     */\r\n    static getType(name: string): DirectiveType;\r\n    /**\r\n     * 是否有某个过滤器类型\r\n     * @param type \t\t过滤器类型名\r\n     * @returns \t\ttrue/false\r\n     */\r\n    static hasType(name: string): boolean;\r\n    /**\r\n     * 指令初始化\r\n     * @param directive     指令\r\n     * @param dom           虚拟dom\r\n     */\r\n    static init(directive: Directive, dom: Element): any;\r\n    /**\r\n     * 执行指令\r\n     * @param directive     指令\r\n     * @param dom           虚拟dom\r\n     * @param module        模块\r\n     * @param parent        父dom\r\n     * @returns             指令执行结果\r\n     */\r\n    static exec(directive: Directive, dom: Element, module: Module, parent: Element): any;\r\n}\r\n"}}
