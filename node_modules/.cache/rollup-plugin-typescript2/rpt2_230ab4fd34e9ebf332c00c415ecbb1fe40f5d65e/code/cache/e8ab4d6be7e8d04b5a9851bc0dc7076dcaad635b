{"code":"import { Application } from \"./application\";\r\nimport { NError } from \"./error\";\r\nimport { Nodom } from \"./nodom\";\r\nimport { Model } from \"./model\";\r\nimport { ResourceManager } from \"./resourcemanager\";\r\nimport { Util } from \"./util\";\r\n/**\r\n * 过滤器工厂，存储模块过滤器\r\n */\r\nexport class ModuleFactory {\r\n    /**\r\n     * 添加模块到工厂\r\n     * @param id    模块id\r\n     * @param item  模块存储对象\r\n     */\r\n    static add(item) {\r\n        this.modules.set(item.id, item);\r\n    }\r\n    /**\r\n     * 获得模块\r\n     * @param id    模块id\r\n     */\r\n    static get(id) {\r\n        return this.modules.get(id);\r\n    }\r\n    /**\r\n     * 获取模块实例（通过类名）\r\n     * @param className     模块类名\r\n     * @param moduleName    模块名\r\n     * @param data          数据或数据url\r\n     */\r\n    static async getInstance(className, moduleName, data) {\r\n        if (!this.classes.has(className)) {\r\n            throw new NError('notexist1', Nodom.tipMessage.TipWords['moduleClass'], className);\r\n        }\r\n        let cfg = this.classes.get(className);\r\n        if (moduleName) {\r\n            cfg.name = moduleName;\r\n        }\r\n        if (!cfg.instance) {\r\n            let id = Util.genId();\r\n            if (!cfg.initing) {\r\n                cfg.initing = true;\r\n                this.initModule(cfg);\r\n            }\r\n            return new Promise((res, rej) => {\r\n                check();\r\n                function check() {\r\n                    if (!cfg.initing) {\r\n                        res(get(cfg));\r\n                    }\r\n                    else {\r\n                        setTimeout(check, 0);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            return get(cfg);\r\n        }\r\n        function get(cfg) {\r\n            if (cfg.singleton) {\r\n                return cfg.instance;\r\n            }\r\n            else {\r\n                let mdl = cfg.instance.clone(moduleName);\r\n                //处理数据\r\n                if (data) {\r\n                    //如果为url，则设置dataurl和loadnewdata标志\r\n                    if (typeof data === 'string') {\r\n                        mdl.setDataUrl(data);\r\n                    }\r\n                    else { //数据模型化\r\n                        mdl.model = new Model(data, mdl);\r\n                    }\r\n                }\r\n                return mdl;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 从工厂移除模块\r\n     * @param id    模块id\r\n     */\r\n    static remove(id) {\r\n        this.modules.delete(id);\r\n    }\r\n    /**\r\n     * 设置主模块\r\n     * @param m \t模块\r\n     */\r\n    static setMain(m) {\r\n        this.mainModule = m;\r\n        m.setMain();\r\n    }\r\n    /**\r\n     * 获取主模块\r\n     * @returns \t应用的主模块\r\n     */\r\n    static getMain() {\r\n        return this.mainModule;\r\n    }\r\n    /**\r\n     * 添加模块类\r\n     * @param modules\r\n     */\r\n    static async addModules(modules) {\r\n        for (let cfg of modules) {\r\n            if (!cfg.path) {\r\n                throw new NError(\"paramException\", 'modules', 'path');\r\n            }\r\n            if (!cfg.class) {\r\n                throw new NError(\"paramException\", 'modules', 'class');\r\n            }\r\n            //lazy默认true\r\n            if (cfg.lazy === undefined) {\r\n                cfg.lazy = true;\r\n            }\r\n            //singleton默认true\r\n            if (cfg.singleton === undefined) {\r\n                cfg.singleton = true;\r\n            }\r\n            if (!cfg.lazy) {\r\n                await this.initModule(cfg);\r\n            }\r\n            //存入class工厂\r\n            this.classes.set(cfg.class, cfg);\r\n        }\r\n    }\r\n    /**\r\n     * 出事化模块\r\n     * @param cfg 模块类对象\r\n     */\r\n    static async initModule(cfg) {\r\n        //增加 .js后缀\r\n        let path = cfg.path;\r\n        if (!path.endsWith('.js')) {\r\n            path += '.js';\r\n        }\r\n        //加载模块类js文件\r\n        let url = Util.mergePath([Application.getPath('module'), path]);\r\n        await ResourceManager.getResources([{ url: url, type: 'js' }]);\r\n        let cls = eval(cfg.class);\r\n        if (cls) {\r\n            let instance = Reflect.construct(cls, [{\r\n                    name: cfg.name,\r\n                    data: cfg.data,\r\n                    lazy: cfg.lazy\r\n                }]);\r\n            //模块初始化\r\n            await instance.init();\r\n            cfg.instance = instance;\r\n            //单例，则需要保存到modules\r\n            if (cfg.singleton) {\r\n                this.modules.set(instance.id, instance);\r\n            }\r\n            //初始化完成\r\n            cfg.initing = false;\r\n        }\r\n        else {\r\n            throw new NError('notexist1', Nodom.tipMessage.TipWords['moduleClass'], cfg.class);\r\n        }\r\n    }\r\n}\r\n/**\r\n * 模块对象工厂 {moduleId:{key:容器key,className:模块类名,instance:模块实例}}\r\n */\r\nModuleFactory.modules = new Map();\r\n/**\r\n * 模块类集合\r\n */\r\nModuleFactory.classes = new Map();\r\n//# sourceMappingURL=modulefactory.js.map","references":["D:/Git/git_repos/nodom2.1/core/application.ts","D:/Git/git_repos/nodom2.1/core/error.ts","D:/Git/git_repos/nodom2.1/core/nodom.ts","D:/Git/git_repos/nodom2.1/core/model.ts","D:/Git/git_repos/nodom2.1/core/module.ts","D:/Git/git_repos/nodom2.1/core/resourcemanager.ts","D:/Git/git_repos/nodom2.1/core/types.ts","D:/Git/git_repos/nodom2.1/core/util.ts"],"map":"{\"version\":3,\"file\":\"modulefactory.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/modulefactory.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/Git/git_repos/nodom2.1/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/modulefactory.d.ts","writeByteOrderMark":false,"text":"import { Module } from \"./module\";\r\nimport { IMdlClassObj } from \"./types\";\r\n/**\r\n * 过滤器工厂，存储模块过滤器\r\n */\r\nexport declare class ModuleFactory {\r\n    /**\r\n     * 模块对象工厂 {moduleId:{key:容器key,className:模块类名,instance:模块实例}}\r\n     */\r\n    private static modules;\r\n    /**\r\n     * 模块类集合\r\n     */\r\n    private static classes;\r\n    /**\r\n     * 主模块\r\n     */\r\n    private static mainModule;\r\n    /**\r\n     * 添加模块到工厂\r\n     * @param id    模块id\r\n     * @param item  模块存储对象\r\n     */\r\n    static add(item: Module): void;\r\n    /**\r\n     * 获得模块\r\n     * @param id    模块id\r\n     */\r\n    static get(id: number): Module;\r\n    /**\r\n     * 获取模块实例（通过类名）\r\n     * @param className     模块类名\r\n     * @param moduleName    模块名\r\n     * @param data          数据或数据url\r\n     */\r\n    static getInstance(className: string, moduleName?: string, data?: any): Promise<Module>;\r\n    /**\r\n     * 从工厂移除模块\r\n     * @param id    模块id\r\n     */\r\n    static remove(id: number): void;\r\n    /**\r\n     * 设置主模块\r\n     * @param m \t模块\r\n     */\r\n    static setMain(m: Module): void;\r\n    /**\r\n     * 获取主模块\r\n     * @returns \t应用的主模块\r\n     */\r\n    static getMain(): Module;\r\n    /**\r\n     * 添加模块类\r\n     * @param modules\r\n     */\r\n    static addModules(modules: Array<IMdlClassObj>): Promise<void>;\r\n    /**\r\n     * 出事化模块\r\n     * @param cfg 模块类对象\r\n     */\r\n    private static initModule;\r\n}\r\n"}}
