{"code":"import { Expression } from \"./expression\";\r\nimport { ModuleFactory } from \"./modulefactory\";\r\nimport { NError } from \"./error\";\r\nimport { Util } from \"./util\";\r\nimport { ChangedDom } from \"./types\";\r\n/**\r\n * 虚拟dom\r\n */\r\nexport class Element {\r\n    /**\r\n     * @param tag 标签名\r\n     */\r\n    constructor(tag) {\r\n        /**\r\n         * 指令集\r\n         */\r\n        this.directives = [];\r\n        /**\r\n         * 直接属性 不是来自于attribute，而是直接作用于html element，如el.checked,el.value等\r\n         */\r\n        this.assets = new Map();\r\n        /**\r\n         * 静态属性(attribute)集合\r\n         * {prop1:value1,...}\r\n         */\r\n        this.props = {};\r\n        /**\r\n         * 含表达式的属性集合\r\n         * {prop1:value1,...}\r\n         */\r\n        this.exprProps = {};\r\n        /**\r\n         * 事件集合,{eventName1:nodomNEvent1,...}\r\n         * 一个事件名，可以绑定多个事件方法对象\r\n         */\r\n        this.events = new Map();\r\n        /**\r\n         * 表达式+字符串数组，用于textnode\r\n         */\r\n        this.expressions = [];\r\n        /**\r\n         * 子element\r\n         */\r\n        this.children = [];\r\n        /**\r\n         * 不渲染标志，单次渲染有效\r\n         */\r\n        this.dontRender = false;\r\n        /**\r\n         * 不渲染自己\r\n         */\r\n        this.dontRenderSelf = false;\r\n        this.tagName = tag; //标签\r\n        //检查是否为svg\r\n        if (tag && tag.toLowerCase() === 'svg') {\r\n            this.isSvgNode = true;\r\n        }\r\n        //key\r\n        this.key = Util.genId() + '';\r\n    }\r\n    /**\r\n     * 渲染到virtualdom树\r\n     * @param module \t模块\r\n     * @param parent \t父节点\r\n     */\r\n    render(module, parent) {\r\n        if (this.dontRender) {\r\n            this.doDontRender();\r\n            this.recover();\r\n            return;\r\n        }\r\n        // 设置父对象\r\n        if (parent) {\r\n            // 设置modelId\r\n            if (!this.model) {\r\n                this.model = parent.model;\r\n            }\r\n            this.parent = parent;\r\n            this.parentKey = parent.key;\r\n        }\r\n        //自定义元素的前置渲染\r\n        if (this.plugin) {\r\n            this.plugin.beforeRender(module, this);\r\n        }\r\n        if (this.tagName !== undefined) { //element\r\n            this.handleDirectives(module);\r\n            this.handleProps(module);\r\n        }\r\n        else { //textContent\r\n            this.handleTextContent(module);\r\n        }\r\n        if (this.dontRender) {\r\n            this.doDontRender();\r\n            this.recover();\r\n            return;\r\n        }\r\n        //子节点渲染\r\n        if (!this.hasDirective('module')) {\r\n            for (let i = 0; i < this.children.length; i++) {\r\n                let item = this.children[i];\r\n                item.render(module, this);\r\n                if (item.dontRender) {\r\n                    item.doDontRender();\r\n                    this.children.splice(i--, 1);\r\n                }\r\n            }\r\n        }\r\n        //自定义元素的后置渲染\r\n        if (this.plugin) {\r\n            this.plugin.afterRender(module, this);\r\n        }\r\n    }\r\n    /**\r\n     * 恢复到渲染前\r\n     */\r\n    recover() {\r\n        //删除parent\r\n        delete this.parent;\r\n        //删除model\r\n        delete this.model;\r\n        //删除dontRender\r\n        delete this.dontRender;\r\n    }\r\n    /**\r\n     * 渲染到html element\r\n     * @param module \t模块\r\n     * @param params \t配置对象{}\r\n     *          type \t\t类型\r\n     *          parent \t父虚拟dom\r\n     */\r\n    renderToHtml(module, params) {\r\n        let el;\r\n        let el1;\r\n        let type = params.type;\r\n        let parent = params.parent;\r\n        //重置dontRender\r\n        this.dontRender = false;\r\n        //构建el\r\n        if (type === 'fresh' || type === 'add' || type === 'text') {\r\n            if (parent) {\r\n                el = module.getNode(parent.key);\r\n            }\r\n            else {\r\n                el = module.getContainer();\r\n            }\r\n        }\r\n        else if (this.tagName !== undefined) { //element节点才可以查找\r\n            el = module.getNode(this.key);\r\n            this.handleAssets(el);\r\n        }\r\n        if (!el) {\r\n            return;\r\n        }\r\n        switch (type) {\r\n            case 'fresh': //首次渲染\r\n                if (this.tagName) {\r\n                    el1 = newEl(this, null, el);\r\n                    //首次渲染需要生成子孙节点\r\n                    genSub(el1, this);\r\n                }\r\n                else {\r\n                    el1 = newText(this.textContent, this);\r\n                }\r\n                el.appendChild(el1);\r\n                break;\r\n            case 'text': //文本更改\r\n                if (!parent || !parent.children) {\r\n                    break;\r\n                }\r\n                let ind = parent.children.indexOf(this);\r\n                if (ind !== -1) {\r\n                    //element或fragment\r\n                    if (this.type === 'html') {\r\n                        let div = document.querySelector(\"[key='\" + this.key + \"']\");\r\n                        if (div !== null) {\r\n                            div.innerHTML = '';\r\n                            div.appendChild(this.textContent);\r\n                        }\r\n                        else {\r\n                            let div = newText(this.textContent);\r\n                            Util.replaceNode(el.childNodes[ind], div);\r\n                        }\r\n                    }\r\n                    else {\r\n                        el.childNodes[ind].textContent = this.textContent;\r\n                    }\r\n                }\r\n                break;\r\n            case 'upd': //修改属性\r\n                //删除属性\r\n                if (params.removeProps) {\r\n                    params.removeProps.forEach((p) => {\r\n                        el.removeAttribute(p);\r\n                    });\r\n                }\r\n                //修改属性\r\n                if (params.changeProps) {\r\n                    params.changeProps.forEach((p) => {\r\n                        el.setAttribute(p['k'], p['v']);\r\n                    });\r\n                }\r\n                //修改直接绑定el上的属性（不是attribute）\r\n                if (params.changeAssets) {\r\n                    params.changeAssets.forEach((p) => {\r\n                        el[p['k']] = p['v'];\r\n                    });\r\n                }\r\n                break;\r\n            case 'rep': //替换节点\r\n                el1 = newEl(this, parent);\r\n                Util.replaceNode(el, el1);\r\n                break;\r\n            case 'add': //添加\r\n                if (this.tagName) {\r\n                    el1 = newEl(this, parent, el);\r\n                    genSub(el1, this);\r\n                }\r\n                else {\r\n                    el1 = newText(this.textContent);\r\n                }\r\n                if (params.index === el.childNodes.length) {\r\n                    el.appendChild(el1);\r\n                }\r\n                else {\r\n                    el.insertBefore(el1, el.childNodes[params.index]);\r\n                }\r\n        }\r\n        /**\r\n         * 新建element节点\r\n         * @param vdom \t\t虚拟dom\r\n         * @param parent \t父虚拟dom\r\n         * @param parentEl \t父element\r\n         * @returns \t\t新的html element\r\n         */\r\n        function newEl(vdom, parent, parentEl) {\r\n            //创建element\r\n            let el;\r\n            if (vdom.isSvgNode) { //如果为svg node，则创建svg element\r\n                el = Util.newSvgEl(vdom.tagName);\r\n            }\r\n            else {\r\n                el = Util.newEl(vdom.tagName);\r\n            }\r\n            //设置属性\r\n            Util.getOwnProps(vdom.props).forEach((k) => {\r\n                el.setAttribute(k, vdom.props[k]);\r\n            });\r\n            el.setAttribute('key', vdom.key);\r\n            vdom.handleNEvents(module, el, parent, parentEl);\r\n            vdom.handleAssets(el);\r\n            return el;\r\n        }\r\n        /**\r\n         * 新建文本节点\r\n         */\r\n        function newText(text, dom) {\r\n            if (!text) {\r\n                text = '';\r\n                dom = null;\r\n            }\r\n            if (dom && 'html' === dom.type) { //html fragment 或 element\r\n                let div = Util.newEl('div');\r\n                div.setAttribute('key', dom.key);\r\n                div.appendChild(text);\r\n                return div;\r\n            }\r\n            else {\r\n                return document.createTextNode(text);\r\n            }\r\n        }\r\n        /**\r\n         * 生成子节点\r\n         * @param pEl \t父节点\r\n         * @param vNode 虚拟dom父节点\r\n         */\r\n        function genSub(pEl, vNode) {\r\n            if (vNode.children && vNode.children.length > 0) {\r\n                vNode.children.forEach((item) => {\r\n                    let el1;\r\n                    if (item.tagName) {\r\n                        el1 = newEl(item, vNode, pEl);\r\n                        genSub(el1, item);\r\n                    }\r\n                    else {\r\n                        el1 = newText(item.textContent, item);\r\n                    }\r\n                    pEl.appendChild(el1);\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 克隆\r\n     * changeKey    是否更改key，主要用于创建时克隆，渲染时克隆不允许修改key\r\n     */\r\n    clone(changeKey) {\r\n        let dst = new Element();\r\n        //不直接拷贝的属性\r\n        // let notCopyProps:string[] = ['parent','directives','props','exprProps','events','children'];\r\n        let notCopyProps = ['parent', 'directives', 'children'];\r\n        //简单属性\r\n        Util.getOwnProps(this).forEach((p) => {\r\n            if (notCopyProps.includes(p)) {\r\n                return;\r\n            }\r\n            if (typeof this[p] === 'object') {\r\n                dst[p] = Util.clone(this[p]);\r\n            }\r\n            else {\r\n                dst[p] = this[p];\r\n            }\r\n        });\r\n        //表示clone后进行新建节点\r\n        if (changeKey) {\r\n            dst.key = Util.genId() + '';\r\n        }\r\n        //define element复制\r\n        if (this.plugin) {\r\n            if (changeKey) {\r\n                dst.plugin = this.plugin.clone(dst);\r\n            }\r\n            else {\r\n                dst.plugin = this.plugin;\r\n            }\r\n        }\r\n        //指令复制\r\n        for (let d of this.directives) {\r\n            if (changeKey) {\r\n                d = d.clone(dst);\r\n            }\r\n            dst.directives.push(d);\r\n        }\r\n        //普通属性\r\n        // Util.getOwnProps(this.props).forEach((k)=>{\r\n        //     dst.props[k] = this.props[k];\r\n        // });\r\n        //表达式属性\r\n        // Util.getOwnProps(this.exprProps).forEach((k)=>{\r\n        //     if(changeKey){\r\n        //         let item = this.exprProps[k];\r\n        //         if(Array.isArray(item)){   //数组\r\n        //             let arr = [];\r\n        //             for(let o of item){\r\n        //                 arr.push(o instanceof Expression?o.clone():o);\r\n        //             }\r\n        //             dst.exprProps[k] = arr;\r\n        //         }else if(item instanceof Expression){ //表达式\r\n        //             dst.exprProps[k] = item.clone();\r\n        //         }else{  //普通属性\r\n        //             dst.exprProps[k] = item;\r\n        //         }\r\n        //     }else{\r\n        //         dst.exprProps[k] = this.exprProps[k];\r\n        //     }\r\n        // });\r\n        //事件\r\n        // for(let key of this.events.keys()){\r\n        //     let evt = this.events.get(key);\r\n        //     //数组需要单独clone\r\n        //     if(Util.isArray(evt)){\r\n        //         let a:NEvent[] = [];\r\n        //         for(let e of <NEvent[]>evt){\r\n        //             a.push(e.clone());\r\n        //         }\r\n        //         dst.events.set(key,a);\r\n        //     }else{\r\n        //         dst.events.set(key,(<NEvent>evt).clone());\r\n        //     }\r\n        // }\r\n        //孩子节点\r\n        for (let c of this.children) {\r\n            dst.add(c.clone(changeKey));\r\n        }\r\n        return dst;\r\n    }\r\n    /**\r\n     * 处理指令\r\n     * @param module    模块\r\n     */\r\n    handleDirectives(module) {\r\n        if (this.dontRender) {\r\n            return;\r\n        }\r\n        for (let d of this.directives.values()) {\r\n            //指令可能改变render标志\r\n            if (this.dontRender) {\r\n                return;\r\n            }\r\n            d.exec(module, this, this.parent);\r\n        }\r\n    }\r\n    /**\r\n     * 表达式处理，添加到expression计算队列\r\n     * @param exprArr   表达式或字符串数组\r\n     * @param module    模块\r\n     */\r\n    handleExpression(exprArr, module) {\r\n        if (this.dontRender) {\r\n            return;\r\n        }\r\n        let model = this.model;\r\n        let value = '';\r\n        exprArr.forEach((v) => {\r\n            if (v instanceof Expression) { //处理表达式\r\n                let v1 = v.val(model);\r\n                value += v1 !== undefined ? v1 : '';\r\n            }\r\n            else {\r\n                value += v;\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n    /**\r\n     * 处理属性（带表达式）\r\n     * @param module    模块\r\n     */\r\n    handleProps(module) {\r\n        if (this.dontRender) {\r\n            return;\r\n        }\r\n        for (let k of Util.getOwnProps(this.exprProps)) {\r\n            if (this.dontRender) {\r\n                return;\r\n            }\r\n            //属性值为数组，则为表达式\r\n            if (Util.isArray(this.exprProps[k])) {\r\n                let pv = this.handleExpression(this.exprProps[k], module);\r\n                //class可叠加\r\n                if (k === 'class') {\r\n                    this.addClass(pv);\r\n                }\r\n                else {\r\n                    this.props[k] = pv;\r\n                }\r\n            }\r\n            else if (this.exprProps[k] instanceof Expression) { //单个表达式\r\n                this.props[k] = this.exprProps[k].val(this.model);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 处理asset，在渲染到html时执行\r\n     * @param el    dom对应的html element\r\n     */\r\n    handleAssets(el) {\r\n        if (!this.tagName || !el) {\r\n            return;\r\n        }\r\n        for (let key of this.assets) {\r\n            el[key[0]] = key[1];\r\n        }\r\n    }\r\n    /**\r\n     * 处理文本（表达式）\r\n     * @param module    模块\r\n     */\r\n    handleTextContent(module) {\r\n        if (this.dontRender) {\r\n            return;\r\n        }\r\n        if (this.expressions !== undefined && this.expressions.length > 0) {\r\n            let v = this.handleExpression(this.expressions, module) || '';\r\n            this.textContent = this.handleExpression(this.expressions, module);\r\n        }\r\n    }\r\n    /**\r\n     * 处理事件\r\n     * @param module    模块\r\n     * @param el        html element\r\n     * @param parent    父virtual dom\r\n     * @param parentEl  父html element\r\n     */\r\n    handleNEvents(module, el, parent, parentEl) {\r\n        if (this.events.size === 0) {\r\n            return;\r\n        }\r\n        for (let evt of this.events.values()) {\r\n            if (Util.isArray(evt)) {\r\n                for (let evo of evt) {\r\n                    evo.bind(module, this, el, parent, parentEl);\r\n                }\r\n            }\r\n            else {\r\n                evt.bind(module, this, el, parent, parentEl);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 移除指令\r\n     * @param directives \t待删除的指令类型数组\r\n     */\r\n    removeDirectives(directives) {\r\n        for (let i = 0; i < this.directives.length; i++) {\r\n            if (directives.length === 0) {\r\n                break;\r\n            }\r\n            for (let j = 0; j < directives.length; j++) {\r\n                if (directives[j].includes(this.directives[i].type.name)) {\r\n                    this.directives.splice(i--, 1);\r\n                    directives.splice(j--, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 添加指令\r\n     * @param directive     指令对象\r\n     * @param sort          是否排序\r\n     */\r\n    addDirective(directive, sort) {\r\n        let finded = false;\r\n        for (let i = 0; i < this.directives.length; i++) {\r\n            //如果存在相同类型，则直接替换\r\n            if (this.directives[i].type === directive.type) {\r\n                this.directives[i] = directive;\r\n                finded = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!finded) {\r\n            this.directives.push(directive);\r\n        }\r\n        //指令按优先级排序\r\n        if (sort) {\r\n            if (this.directives.length > 1) {\r\n                this.directives.sort((a, b) => {\r\n                    return a.type.prio - b.type.prio;\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 是否有某个类型的指令\r\n     * @param directiveType \t指令类型名\r\n     * @return true/false\r\n     */\r\n    hasDirective(directiveType) {\r\n        return this.directives.findIndex(item => item.type.name === directiveType) !== -1;\r\n    }\r\n    /**\r\n     * 获取某个类型的指令\r\n     * @param directiveType \t指令类型名\r\n     * @return directive\r\n     */\r\n    getDirective(directiveType) {\r\n        return this.directives.find(item => item.type.name === directiveType);\r\n    }\r\n    /**\r\n     * 添加子节点\r\n     * @param dom \t子节点\r\n     */\r\n    add(dom) {\r\n        dom.parentKey = this.key;\r\n        this.children.push(dom);\r\n    }\r\n    /**\r\n     * 从虚拟dom树和html dom树删除自己\r\n     * @param module \t模块\r\n     * @param delHtml \t是否删除html element\r\n     */\r\n    remove(module, delHtml) {\r\n        // 从父树中移除\r\n        let parent = this.getParent(module);\r\n        if (parent) {\r\n            parent.removeChild(this);\r\n        }\r\n        // 删除html dom节点\r\n        if (delHtml && module) {\r\n            let el = module.getNode(this.key);\r\n            if (el !== null) {\r\n                Util.remove(el);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 从html删除\r\n     */\r\n    removeFromHtml(module) {\r\n        let el = module.getNode(this.key);\r\n        if (el !== null) {\r\n            Util.remove(el);\r\n        }\r\n    }\r\n    /**\r\n     * 移除子节点\r\n     * @param dom   子dom\r\n     */\r\n    removeChild(dom) {\r\n        let ind;\r\n        // 移除\r\n        if (Util.isArray(this.children) && (ind = this.children.indexOf(dom)) !== -1) {\r\n            this.children.splice(ind, 1);\r\n        }\r\n    }\r\n    /**\r\n     * 获取parent\r\n     * @param module 模块\r\n     * @returns      父element\r\n     */\r\n    getParent(module) {\r\n        if (!module) {\r\n            throw new NError('invoke', 'Element.getParent', '0', 'Module');\r\n        }\r\n        if (this.parent) {\r\n            return this.parent;\r\n        }\r\n        if (this.parentKey) {\r\n            return module.getElement(this.parentKey);\r\n        }\r\n    }\r\n    /**\r\n     * 替换目标节点\r\n     * @param dst \t目标节点\r\n     */\r\n    replace(dst) {\r\n        if (!dst.parent) {\r\n            return false;\r\n        }\r\n        let ind = dst.parent.children.indexOf(dst);\r\n        if (ind === -1) {\r\n            return false;\r\n        }\r\n        //替换\r\n        dst.parent.children.splice(ind, 1, this);\r\n        return true;\r\n    }\r\n    /**\r\n     * 是否包含节点\r\n     * @param dom \t包含的节点\r\n     */\r\n    contains(dom) {\r\n        for (; dom !== undefined && dom !== this; dom = dom.parent)\r\n            ;\r\n        return dom !== undefined;\r\n    }\r\n    /**\r\n     * 是否存在某个class\r\n     * @param cls   classname\r\n     * @return      true/false\r\n     */\r\n    hasClass(cls) {\r\n        let clazz = this.props['class'];\r\n        if (!clazz) {\r\n            return false;\r\n        }\r\n        else {\r\n            return clazz.trim().split(/\\s+/).includes(cls);\r\n        }\r\n    }\r\n    /**\r\n     * 添加css class\r\n     * @param cls class名\r\n     */\r\n    addClass(cls) {\r\n        let clazz = this.props['class'];\r\n        if (!clazz) {\r\n            this.props['class'] = cls;\r\n        }\r\n        else {\r\n            let sa = clazz.trim().split(/\\s+/);\r\n            if (!sa.includes(cls)) {\r\n                sa.push(cls);\r\n                clazz = sa.join(' ');\r\n                this.props['class'] = clazz;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 删除css class\r\n     * @param cls class名\r\n     */\r\n    removeClass(cls) {\r\n        let clazz = this.props['class'];\r\n        if (!clazz) {\r\n            return;\r\n        }\r\n        else {\r\n            let sa = clazz.trim().split(/\\s+/);\r\n            let index;\r\n            if ((index = sa.indexOf(cls)) !== -1) {\r\n                sa.splice(index, 1);\r\n                clazz = sa.join(' ');\r\n            }\r\n        }\r\n        this.props['class'] = clazz;\r\n    }\r\n    /**\r\n     * 是否拥有属性\r\n     * @param propName  属性名\r\n     */\r\n    hasProp(propName) {\r\n        return this.props.hasOwnProperty(propName) || this.exprProps.hasOwnProperty(propName);\r\n    }\r\n    /**\r\n     * 获取属性值\r\n     * @param propName  属性名\r\n     */\r\n    getProp(propName, isExpr) {\r\n        if (isExpr) {\r\n            return this.exprProps[propName];\r\n        }\r\n        else {\r\n            return this.props[propName];\r\n        }\r\n    }\r\n    /**\r\n     * 设置属性值\r\n     * @param propName  属性名\r\n     * @param v         属性值\r\n     * @param isExpr    是否是表达式属性 默认false\r\n     */\r\n    setProp(propName, v, isExpr) {\r\n        if (isExpr) {\r\n            this.exprProps[propName] = v;\r\n        }\r\n        else {\r\n            this.props[propName] = v;\r\n        }\r\n    }\r\n    /**\r\n     * 删除属性\r\n     * @param props     属性名或属性名数组\r\n     */\r\n    delProp(props) {\r\n        if (Util.isArray(props)) {\r\n            for (let p of props) {\r\n                delete this.exprProps[p];\r\n            }\r\n            for (let p of props) {\r\n                delete this.props[p];\r\n            }\r\n        }\r\n        else {\r\n            delete this.exprProps[props];\r\n            delete this.props[props];\r\n        }\r\n    }\r\n    /**\r\n     * 设置asset\r\n     * @param assetName     asset name\r\n     * @param value         asset value\r\n     */\r\n    setAsset(assetName, value) {\r\n        this.assets.set(assetName, value);\r\n    }\r\n    /**\r\n     * 删除asset\r\n     * @param assetName     asset name\r\n     */\r\n    delAsset(assetName) {\r\n        this.assets.delete(assetName);\r\n    }\r\n    /**\r\n     * 查找子孙节点\r\n     * @param key \telement key\r\n     * @returns\t\t虚拟dom/undefined\r\n     */\r\n    query(key) {\r\n        if (this.key === key) {\r\n            return this;\r\n        }\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            let dom = this.children[i].query(key);\r\n            if (dom) {\r\n                return dom;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 比较节点\r\n     * @param dst \t待比较节点\r\n     * @returns\t{type:类型 text/rep/add/upd,node:节点,parent:父节点,\r\n     * \t\t\tchangeProps:改变属性,[{k:prop1,v:value1},...],removeProps:删除属性,[prop1,prop2,...],changeAssets:改变的asset}\r\n     */\r\n    compare(dst, retArr, parentNode) {\r\n        if (!dst) {\r\n            return;\r\n        }\r\n        let re = new ChangedDom();\r\n        let change = false;\r\n        //找到过的dom map {domKey:true/false}，比较后，则添加到map\r\n        let findedMap = new Map();\r\n        if (this.tagName === undefined) { //文本节点\r\n            if (dst.tagName === undefined) {\r\n                if (this.textContent !== dst.textContent) {\r\n                    re.type = 'text';\r\n                    change = true;\r\n                }\r\n            }\r\n            else { //节点类型不同\r\n                re.type = 'rep';\r\n                change = true;\r\n            }\r\n        }\r\n        else { //element节点\r\n            if (this.tagName !== dst.tagName) { //节点类型不同\r\n                re.type = 'rep';\r\n                change = true;\r\n            }\r\n            else { //节点类型相同，可能属性不同\r\n                //检查属性，如果不同则放到changeProps\r\n                re.changeProps = [];\r\n                re.changeAssets = [];\r\n                //待删除属性\r\n                re.removeProps = [];\r\n                //删除或增加的属性\r\n                Util.getOwnProps(dst.props).forEach((k) => {\r\n                    if (!this.hasProp(k)) {\r\n                        re.removeProps.push(k);\r\n                    }\r\n                });\r\n                //修改后的属性\r\n                Util.getOwnProps(this.props).forEach((k) => {\r\n                    let v1 = dst.props[k];\r\n                    if (this.props[k] !== v1) {\r\n                        re.changeProps.push({ k: k, v: this.props[k] });\r\n                    }\r\n                });\r\n                //修改后的asset\r\n                for (let kv of this.assets) {\r\n                    let v1 = dst.assets.get(kv[0]);\r\n                    if (kv[0] !== v1) {\r\n                        re.changeAssets.push({ k: kv[0], v: kv[1] });\r\n                    }\r\n                }\r\n                // props assets 改变或删除，加入渲染\r\n                if (re.changeProps.length > 0 || re.changeAssets.length > 0 || re.removeProps.length > 0) {\r\n                    change = true;\r\n                    re.type = 'upd';\r\n                }\r\n            }\r\n        }\r\n        //改变则加入数据\r\n        if (change) {\r\n            re.node = this;\r\n            if (parentNode) {\r\n                re.parent = parentNode;\r\n            }\r\n            retArr.push(re);\r\n        }\r\n        //子节点处理\r\n        if (!this.children || this.children.length === 0) {\r\n            // 旧节点的子节点全部删除\r\n            if (dst.children && dst.children.length > 0) {\r\n                dst.children.forEach((item) => {\r\n                    retArr.push(new ChangedDom(item, 'del'));\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            //全部新加节点\r\n            if (!dst.children || dst.children.length === 0) {\r\n                this.children.forEach((item) => {\r\n                    retArr.push(new ChangedDom(item, 'add', this));\r\n                });\r\n            }\r\n            else { //都有子节点\r\n                this.children.forEach((dom1, ind) => {\r\n                    let dom2 = dst.children[ind];\r\n                    // dom1和dom2相同key\r\n                    if (!dom2 || dom1.key !== dom2.key) {\r\n                        dom2 = undefined;\r\n                        //找到key相同的节点\r\n                        for (let i = 0; i < dst.children.length; i++) {\r\n                            //找到了相同key\r\n                            if (dom1.key === dst.children[i].key) {\r\n                                dom2 = dst.children[i];\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (dom2 !== undefined) {\r\n                        dom1.compare(dom2, retArr, this);\r\n                        //设置匹配标志，用于后面删除没有标志的节点\r\n                        findedMap.set(dom2.key, true);\r\n                    }\r\n                    else {\r\n                        // dom1为新增节点\r\n                        retArr.push(new ChangedDom(dom1, 'add', this, ind));\r\n                    }\r\n                });\r\n                //未匹配的节点设置删除标志\r\n                if (dst.children && dst.children.length > 0) {\r\n                    dst.children.forEach((item) => {\r\n                        if (!findedMap.has(item.key)) {\r\n                            retArr.push(new ChangedDom(item, 'del', dst));\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 添加事件\r\n     * @param event         事件对象\r\n     */\r\n    addEvent(event) {\r\n        //如果已经存在，则改为event数组，即同名event可以多个执行方法\r\n        if (this.events.has(event.name)) {\r\n            let ev = this.events.get(event.name);\r\n            let evs;\r\n            if (Util.isArray(ev)) {\r\n                evs = ev;\r\n            }\r\n            else {\r\n                evs = [ev];\r\n            }\r\n            evs.push(event);\r\n            this.events.set(event.name, evs);\r\n        }\r\n        else {\r\n            this.events.set(event.name, event);\r\n        }\r\n    }\r\n    /**\r\n     * 执行不渲染关联操作\r\n     * 关联操作，包括:\r\n     *  1 节点(子节点)含有module指令，需要unactive\r\n     */\r\n    doDontRender() {\r\n        if (this.hasDirective('module')) {\r\n            let d = this.getDirective('module');\r\n            if (d.extra && d.extra.moduleId) {\r\n                let mdl = ModuleFactory.get(d.extra.moduleId);\r\n                if (mdl) {\r\n                    mdl.unactive();\r\n                }\r\n            }\r\n        }\r\n        //子节点递归\r\n        for (let c of this.children) {\r\n            c.doDontRender();\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=element.js.map","references":["D:/Git/git_repos/nodom2.1/core/module.ts","D:/Git/git_repos/nodom2.1/core/directive.ts","D:/Git/git_repos/nodom2.1/core/expression.ts","D:/Git/git_repos/nodom2.1/core/model.ts","D:/Git/git_repos/nodom2.1/core/modulefactory.ts","D:/Git/git_repos/nodom2.1/core/error.ts","D:/Git/git_repos/nodom2.1/core/event.ts","D:/Git/git_repos/nodom2.1/core/util.ts","D:/Git/git_repos/nodom2.1/core/types.ts","D:/Git/git_repos/nodom2.1/core/plugin.ts"],"map":"{\"version\":3,\"file\":\"element.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/element.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/Git/git_repos/nodom2.1/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/element.d.ts","writeByteOrderMark":false,"text":"import { Module } from \"./module\";\r\nimport { Directive } from \"./directive\";\r\nimport { Expression } from \"./expression\";\r\nimport { Model } from \"./model\";\r\nimport { NEvent } from \"./event\";\r\nimport { ChangedDom } from \"./types\";\r\nimport { Plugin } from \"./plugin\";\r\n/**\r\n * 虚拟dom\r\n */\r\nexport declare class Element {\r\n    /**\r\n     * key，整颗虚拟dom树唯一\r\n     */\r\n    key: string;\r\n    /**\r\n     * 绑定模型\r\n     */\r\n    model: Model;\r\n    /**\r\n     * element为textnode时有效\r\n     */\r\n    textContent: string | HTMLElement;\r\n    /**\r\n     * 类型，包括: html fragment 或 html element\r\n     */\r\n    type: string;\r\n    /**\r\n     * 指令集\r\n     */\r\n    directives: Array<Directive>;\r\n    /**\r\n     * 直接属性 不是来自于attribute，而是直接作用于html element，如el.checked,el.value等\r\n     */\r\n    assets: Map<string, any>;\r\n    /**\r\n     * 静态属性(attribute)集合\r\n     * {prop1:value1,...}\r\n     */\r\n    props: Object;\r\n    /**\r\n     * 含表达式的属性集合\r\n     * {prop1:value1,...}\r\n     */\r\n    exprProps: Object;\r\n    /**\r\n     * 事件集合,{eventName1:nodomNEvent1,...}\r\n     * 一个事件名，可以绑定多个事件方法对象\r\n     */\r\n    events: Map<string, NEvent | NEvent[]>;\r\n    /**\r\n     * 表达式+字符串数组，用于textnode\r\n     */\r\n    expressions: Array<Expression | string>;\r\n    /**\r\n     * 子element\r\n     */\r\n    children: Array<Element>;\r\n    /**\r\n     * 父element key\r\n     */\r\n    parentKey: string;\r\n    /**\r\n     * 父虚拟dom\r\n     */\r\n    parent: Element;\r\n    /**\r\n     * 元素名，如div\r\n     */\r\n    tagName: string;\r\n    /**\r\n     * 不渲染标志，单次渲染有效\r\n     */\r\n    dontRender: boolean;\r\n    /**\r\n     * 不渲染自己\r\n     */\r\n    dontRenderSelf: boolean;\r\n    /**\r\n     * 绑定插件\r\n     */\r\n    plugin: Plugin;\r\n    /**\r\n     * 是否为svg节点\r\n     */\r\n    isSvgNode: boolean;\r\n    /**\r\n     * @param tag 标签名\r\n     */\r\n    constructor(tag?: string);\r\n    /**\r\n     * 渲染到virtualdom树\r\n     * @param module \t模块\r\n     * @param parent \t父节点\r\n     */\r\n    render(module: Module, parent?: Element): void;\r\n    /**\r\n     * 恢复到渲染前\r\n     */\r\n    private recover;\r\n    /**\r\n     * 渲染到html element\r\n     * @param module \t模块\r\n     * @param params \t配置对象{}\r\n     *          type \t\t类型\r\n     *          parent \t父虚拟dom\r\n     */\r\n    renderToHtml(module: Module, params: ChangedDom): void;\r\n    /**\r\n     * 克隆\r\n     * changeKey    是否更改key，主要用于创建时克隆，渲染时克隆不允许修改key\r\n     */\r\n    clone(changeKey?: boolean): Element;\r\n    /**\r\n     * 处理指令\r\n     * @param module    模块\r\n     */\r\n    handleDirectives(module: Module): void;\r\n    /**\r\n     * 表达式处理，添加到expression计算队列\r\n     * @param exprArr   表达式或字符串数组\r\n     * @param module    模块\r\n     */\r\n    handleExpression(exprArr: Array<Expression | string>, module: Module): string;\r\n    /**\r\n     * 处理属性（带表达式）\r\n     * @param module    模块\r\n     */\r\n    handleProps(module: Module): void;\r\n    /**\r\n     * 处理asset，在渲染到html时执行\r\n     * @param el    dom对应的html element\r\n     */\r\n    handleAssets(el: HTMLElement): void;\r\n    /**\r\n     * 处理文本（表达式）\r\n     * @param module    模块\r\n     */\r\n    handleTextContent(module: any): void;\r\n    /**\r\n     * 处理事件\r\n     * @param module    模块\r\n     * @param el        html element\r\n     * @param parent    父virtual dom\r\n     * @param parentEl  父html element\r\n     */\r\n    handleNEvents(module: Module, el: Node, parent: Element, parentEl?: Node): void;\r\n    /**\r\n     * 移除指令\r\n     * @param directives \t待删除的指令类型数组\r\n     */\r\n    removeDirectives(directives: string[]): void;\r\n    /**\r\n     * 添加指令\r\n     * @param directive     指令对象\r\n     * @param sort          是否排序\r\n     */\r\n    addDirective(directive: Directive, sort?: boolean): void;\r\n    /**\r\n     * 是否有某个类型的指令\r\n     * @param directiveType \t指令类型名\r\n     * @return true/false\r\n     */\r\n    hasDirective(directiveType: any): boolean;\r\n    /**\r\n     * 获取某个类型的指令\r\n     * @param directiveType \t指令类型名\r\n     * @return directive\r\n     */\r\n    getDirective(directiveType: any): Directive;\r\n    /**\r\n     * 添加子节点\r\n     * @param dom \t子节点\r\n     */\r\n    add(dom: Element): void;\r\n    /**\r\n     * 从虚拟dom树和html dom树删除自己\r\n     * @param module \t模块\r\n     * @param delHtml \t是否删除html element\r\n     */\r\n    remove(module: Module, delHtml?: boolean): void;\r\n    /**\r\n     * 从html删除\r\n     */\r\n    removeFromHtml(module: Module): void;\r\n    /**\r\n     * 移除子节点\r\n     * @param dom   子dom\r\n     */\r\n    removeChild(dom: Element): void;\r\n    /**\r\n     * 获取parent\r\n     * @param module 模块\r\n     * @returns      父element\r\n     */\r\n    getParent(module: Module): Element;\r\n    /**\r\n     * 替换目标节点\r\n     * @param dst \t目标节点\r\n     */\r\n    replace(dst: Element): boolean;\r\n    /**\r\n     * 是否包含节点\r\n     * @param dom \t包含的节点\r\n     */\r\n    contains(dom: Element): boolean;\r\n    /**\r\n     * 是否存在某个class\r\n     * @param cls   classname\r\n     * @return      true/false\r\n     */\r\n    hasClass(cls: string): boolean;\r\n    /**\r\n     * 添加css class\r\n     * @param cls class名\r\n     */\r\n    addClass(cls: string): void;\r\n    /**\r\n     * 删除css class\r\n     * @param cls class名\r\n     */\r\n    removeClass(cls: string): void;\r\n    /**\r\n     * 是否拥有属性\r\n     * @param propName  属性名\r\n     */\r\n    hasProp(propName: string): boolean;\r\n    /**\r\n     * 获取属性值\r\n     * @param propName  属性名\r\n     */\r\n    getProp(propName: string, isExpr?: boolean): any;\r\n    /**\r\n     * 设置属性值\r\n     * @param propName  属性名\r\n     * @param v         属性值\r\n     * @param isExpr    是否是表达式属性 默认false\r\n     */\r\n    setProp(propName: string, v: any, isExpr?: boolean): void;\r\n    /**\r\n     * 删除属性\r\n     * @param props     属性名或属性名数组\r\n     */\r\n    delProp(props: string | string[]): void;\r\n    /**\r\n     * 设置asset\r\n     * @param assetName     asset name\r\n     * @param value         asset value\r\n     */\r\n    setAsset(assetName: string, value: any): void;\r\n    /**\r\n     * 删除asset\r\n     * @param assetName     asset name\r\n     */\r\n    delAsset(assetName: string): void;\r\n    /**\r\n     * 查找子孙节点\r\n     * @param key \telement key\r\n     * @returns\t\t虚拟dom/undefined\r\n     */\r\n    query(key: string): any;\r\n    /**\r\n     * 比较节点\r\n     * @param dst \t待比较节点\r\n     * @returns\t{type:类型 text/rep/add/upd,node:节点,parent:父节点,\r\n     * \t\t\tchangeProps:改变属性,[{k:prop1,v:value1},...],removeProps:删除属性,[prop1,prop2,...],changeAssets:改变的asset}\r\n     */\r\n    compare(dst: Element, retArr: Array<ChangedDom>, parentNode?: Element): void;\r\n    /**\r\n     * 添加事件\r\n     * @param event         事件对象\r\n     */\r\n    addEvent(event: NEvent): void;\r\n    /**\r\n     * 执行不渲染关联操作\r\n     * 关联操作，包括:\r\n     *  1 节点(子节点)含有module指令，需要unactive\r\n     */\r\n    doDontRender(): void;\r\n}\r\n"}}
