{"code":"import { Compiler } from \"./compiler\";\r\nimport { Nodom } from \"./nodom\";\r\nimport { Serializer } from \"./serializer\";\r\nimport { Util } from \"./util\";\r\n/**\r\n * 资源管理器\r\n * 用于url资源的加载及管理，主要针对js、模版等\r\n */\r\nexport class ResourceManager {\r\n    /**\r\n     * 获取多个资源\r\n     * @param urls  [{url:**,type:**}]或 [url1,url2,...]\r\n     * @returns     IResourceObj\r\n     */\r\n    static async getResources(reqs) {\r\n        let me = this;\r\n        this.preHandle(reqs);\r\n        //无请求\r\n        if (reqs.length === 0) {\r\n            return [];\r\n        }\r\n        let taskId = Util.genId();\r\n        //设置任务资源数组\r\n        let resArr = [];\r\n        for (let item of reqs) {\r\n            resArr.push(item.url);\r\n        }\r\n        this.loadingTasks.set(taskId, resArr);\r\n        return new Promise(async (res, rej) => {\r\n            //保存资源id状态\r\n            for (let item of reqs) {\r\n                let url = item.url;\r\n                if (this.resources.has(url)) { //已加载，直接获取资源内容\r\n                    let r = me.awake(taskId);\r\n                    if (r) {\r\n                        res(r);\r\n                    }\r\n                }\r\n                else if (this.waitList.has(url)) { //加载中，放入资源等待队列\r\n                    this.waitList.get(url).push(taskId);\r\n                }\r\n                else { //新加载\r\n                    //将自己的任务加入等待队列\r\n                    this.waitList.set(url, [taskId]);\r\n                    //请求资源\r\n                    let content = await Nodom.request({ url: url });\r\n                    let rObj = { type: item.type, content: content };\r\n                    this.handleOne(url, rObj);\r\n                    this.resources.set(url, rObj);\r\n                    let arr = this.waitList.get(url);\r\n                    //从等待列表移除\r\n                    this.waitList.delete(url);\r\n                    //唤醒任务\r\n                    for (let tid of arr) {\r\n                        let r = me.awake(tid);\r\n                        if (r) {\r\n                            res(r);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * 唤醒任务\r\n     * @param taskId    任务id\r\n     * @returns         加载内容数组或undefined\r\n     */\r\n    static awake(taskId) {\r\n        if (!this.loadingTasks.has(taskId)) {\r\n            return;\r\n        }\r\n        let resArr = this.loadingTasks.get(taskId);\r\n        let finish = true;\r\n        //资源内容数组\r\n        let contents = [];\r\n        //检查是否全部加载完成\r\n        for (let url of resArr) {\r\n            //一个未加载完，则需要继续等待\r\n            if (!this.resources.has(url)) {\r\n                finish = false;\r\n                break;\r\n            }\r\n            //放入返回对象\r\n            contents.push(this.resources.get(url));\r\n        }\r\n        //加载完成\r\n        if (finish) {\r\n            //从loadingTask删除\r\n            this.loadingTasks.delete(taskId);\r\n            return contents;\r\n        }\r\n    }\r\n    /**\r\n     * 获取url类型\r\n     * @param url   url\r\n     * @returns     url type\r\n     */\r\n    static getType(url) {\r\n        let ind = -1;\r\n        let type;\r\n        if ((ind = url.lastIndexOf('.')) !== -1) {\r\n            type = url.substr(ind + 1);\r\n            if (type === 'htm' || type === 'html') {\r\n                type = 'template';\r\n            }\r\n        }\r\n        return type || 'text';\r\n    }\r\n    /**\r\n     * 处理一个资源获取结果\r\n     * @param url   资源url\r\n     * @param rObj  资源对象\r\n     */\r\n    static handleOne(url, rObj) {\r\n        switch (rObj.type) {\r\n            case 'js':\r\n                let head = document.querySelector('head');\r\n                let script = Util.newEl('script');\r\n                script.innerHTML = rObj.content;\r\n                head.appendChild(script);\r\n                head.removeChild(script);\r\n                delete rObj.content;\r\n                break;\r\n            case 'template':\r\n                rObj.content = Compiler.compile(rObj.content);\r\n                break;\r\n            case 'nd':\r\n                rObj.content = Serializer.deserialize(rObj.content);\r\n                break;\r\n            case 'data': //数据\r\n                try {\r\n                    rObj.content = JSON.parse(rObj.content);\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                }\r\n        }\r\n        this.resources.set(url, rObj);\r\n    }\r\n    /**\r\n     * 预处理\r\n     * @param reqs  [{url:**,type:**},url,...]\r\n     * @returns     [promises(请求对象数组),urls(url数组),types(类型数组)]\r\n     */\r\n    static preHandle(reqs) {\r\n        let head = document.querySelector('head');\r\n        //预处理请求资源\r\n        for (let i = 0; i < reqs.length; i++) {\r\n            //url串，需要构造成object\r\n            if (typeof reqs[i] === 'string') {\r\n                reqs[i] = {\r\n                    url: reqs[i]\r\n                };\r\n            }\r\n            reqs[i].type = reqs[i].type || this.getType(reqs[i].url);\r\n            //css 不需要加载\r\n            if (reqs[i].type === 'css') {\r\n                let css = Util.newEl('link');\r\n                css.type = 'text/css';\r\n                css.rel = 'stylesheet'; // 保留script标签的path属性\r\n                css.href = reqs[i].url;\r\n                head.appendChild(css);\r\n                //移除\r\n                reqs.splice(i--, 1);\r\n            }\r\n        }\r\n        return reqs;\r\n    }\r\n}\r\n/**\r\n * 资源map，key为url，值为整数，1表示正在加载，2表示已加载完成\r\n */\r\nResourceManager.resources = new Map();\r\n/**\r\n * 加载任务  任务id:资源对象，{id1:{url1:false,url2:false},id2:...}\r\n */\r\nResourceManager.loadingTasks = new Map();\r\n/**\r\n * 资源等待列表  {资源url:[taskId1,taskId2,...]}\r\n */\r\nResourceManager.waitList = new Map();\r\n//# sourceMappingURL=resourcemanager.js.map","references":["D:/Git/git_repos/nodom2.1/core/compiler.ts","D:/Git/git_repos/nodom2.1/core/nodom.ts","D:/Git/git_repos/nodom2.1/core/serializer.ts","D:/Git/git_repos/nodom2.1/core/types.ts","D:/Git/git_repos/nodom2.1/core/util.ts"],"map":"{\"version\":3,\"file\":\"resourcemanager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/resourcemanager.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAChC,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAE1C,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B;;;GAGG;AACH,MAAM,OAAO,eAAe;IAgBxB;;;;OAIG;IACI,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,IAAU;QACvC,IAAI,EAAE,GAAG,IAAI,CAAC;QACd,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACrB,KAAK;QACL,IAAG,IAAI,CAAC,MAAM,KAAK,CAAC,EAAC;YACjB,OAAO,EAAE,CAAC;SACb;QACD,IAAI,MAAM,GAAU,IAAI,CAAC,KAAK,EAAE,CAAC;QAEjC,UAAU;QACV,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,KAAI,IAAI,IAAI,IAAI,IAAI,EAAC;YACjB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACzB;QACD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAC,MAAM,CAAC,CAAC;QACrC,OAAO,IAAI,OAAO,CAAC,KAAK,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE;YAC/B,UAAU;YACV,KAAI,IAAI,IAAI,IAAI,IAAI,EAAC;gBACjB,IAAI,GAAG,GAAU,IAAI,CAAC,GAAG,CAAC;gBAC1B,IAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAC,EAAS,cAAc;oBAC9C,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBACzB,IAAG,CAAC,EAAC;wBACD,GAAG,CAAC,CAAC,CAAC,CAAC;qBACV;iBACJ;qBAAK,IAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EAAC,EAAI,cAAc;oBAC9C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBACvC;qBAAI,EAAG,KAAK;oBACT,cAAc;oBACd,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBAChC,MAAM;oBACN,IAAI,OAAO,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,EAAC,GAAG,EAAC,GAAG,EAAC,CAAC,CAAA;oBAC5C,IAAI,IAAI,GAAG,EAAC,IAAI,EAAC,IAAI,CAAC,IAAI,EAAC,OAAO,EAAC,OAAO,EAAC,CAAC;oBAC5C,IAAI,CAAC,SAAS,CAAC,GAAG,EAAC,IAAI,CAAC,CAAC;oBACzB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAC,IAAI,CAAC,CAAC;oBAC7B,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACjC,SAAS;oBACT,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBAC1B,MAAM;oBACN,KAAI,IAAI,GAAG,IAAI,GAAG,EAAC;wBACf,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACtB,IAAG,CAAC,EAAC;4BACD,GAAG,CAAC,CAAC,CAAC,CAAC;yBACV;qBACJ;iBACJ;aACJ;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,KAAK,CAAC,MAAa;QAC7B,IAAG,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,EAAC;YAC9B,OAAO;SACV;QACD,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC3C,IAAI,MAAM,GAAW,IAAI,CAAC;QAC1B,QAAQ;QACR,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,YAAY;QACZ,KAAI,IAAI,GAAG,IAAI,MAAM,EAAC;YAClB,gBAAgB;YAChB,IAAG,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAC;gBACxB,MAAM,GAAG,KAAK,CAAC;gBACf,MAAM;aACT;YACD,QAAQ;YACR,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;SAC1C;QACD,MAAM;QACN,IAAG,MAAM,EAAC;YACN,gBAAgB;YAChB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACjC,OAAO,QAAQ,CAAC;SACnB;IACL,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,OAAO,CAAC,GAAU;QAC5B,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC;QACb,IAAI,IAAW,CAAC;QAChB,IAAG,CAAC,GAAG,GAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAC;YACjC,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,GAAC,CAAC,CAAC,CAAC;YACzB,IAAG,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,MAAM,EAAC;gBACjC,IAAI,GAAG,UAAU,CAAC;aACrB;SACJ;QACD,OAAO,IAAI,IAAI,MAAM,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACK,MAAM,CAAC,SAAS,CAAC,GAAU,EAAC,IAAiB;QACjD,QAAO,IAAI,CAAC,IAAI,EAAC;YACb,KAAK,IAAI;gBACL,IAAI,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBAC1C,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAClC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC;gBAChC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBACzB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBACzB,OAAO,IAAI,CAAC,OAAO,CAAC;gBACpB,MAAM;YACV,KAAK,UAAU;gBACX,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC9C,MAAM;YACV,KAAK,IAAI;gBACL,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACpD,MAAM;YACV,KAAK,MAAM,EAAE,IAAI;gBACb,IAAG;oBACC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAC3C;gBAAA,OAAM,CAAC,EAAC;oBACL,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAClB;SACR;QACD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED;;;;OAIG;IACK,MAAM,CAAC,SAAS,CAAC,IAAU;QAC/B,IAAI,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC1C,SAAS;QACT,KAAI,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,IAAI,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC;YAC1B,kBAAkB;YAClB,IAAG,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAC;gBAC3B,IAAI,CAAC,CAAC,CAAC,GAAG;oBACN,GAAG,EAAC,IAAI,CAAC,CAAC,CAAC;iBACd,CAAA;aACJ;YACD,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACzD,WAAW;YACX,IAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,KAAK,EAAC;gBACtB,IAAI,GAAG,GAAoB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAC9C,GAAG,CAAC,IAAI,GAAG,UAAU,CAAC;gBACtB,GAAG,CAAC,GAAG,GAAG,YAAY,CAAC,CAAC,oBAAoB;gBAC5C,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;gBACvB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;gBACtB,IAAI;gBACJ,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC;aACtB;SACJ;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;;AAhLD;;GAEG;AACW,yBAAS,GAA4B,IAAI,GAAG,EAAE,CAAC;AAE7D;;GAEG;AACY,4BAAY,GAAwB,IAAI,GAAG,EAAE,CAAC;AAE7D;;GAEG;AACY,wBAAQ,GAAwB,IAAI,GAAG,EAAE,CAAC\"}","dts":{"name":"D:/Git/git_repos/nodom2.1/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/resourcemanager.d.ts","writeByteOrderMark":false,"text":"import { IResourceObj } from \"./types\";\r\n/**\r\n * 资源管理器\r\n * 用于url资源的加载及管理，主要针对js、模版等\r\n */\r\nexport declare class ResourceManager {\r\n    /**\r\n     * 资源map，key为url，值为整数，1表示正在加载，2表示已加载完成\r\n     */\r\n    static resources: Map<string, IResourceObj>;\r\n    /**\r\n     * 加载任务  任务id:资源对象，{id1:{url1:false,url2:false},id2:...}\r\n     */\r\n    private static loadingTasks;\r\n    /**\r\n     * 资源等待列表  {资源url:[taskId1,taskId2,...]}\r\n     */\r\n    private static waitList;\r\n    /**\r\n     * 获取多个资源\r\n     * @param urls  [{url:**,type:**}]或 [url1,url2,...]\r\n     * @returns     IResourceObj\r\n     */\r\n    static getResources(reqs: any[]): Promise<IResourceObj[]>;\r\n    /**\r\n     * 唤醒任务\r\n     * @param taskId    任务id\r\n     * @returns         加载内容数组或undefined\r\n     */\r\n    static awake(taskId: number): IResourceObj[];\r\n    /**\r\n     * 获取url类型\r\n     * @param url   url\r\n     * @returns     url type\r\n     */\r\n    static getType(url: string): string;\r\n    /**\r\n     * 处理一个资源获取结果\r\n     * @param url   资源url\r\n     * @param rObj  资源对象\r\n     */\r\n    private static handleOne;\r\n    /**\r\n     * 预处理\r\n     * @param reqs  [{url:**,type:**},url,...]\r\n     * @returns     [promises(请求对象数组),urls(url数组),types(类型数组)]\r\n     */\r\n    private static preHandle;\r\n}\r\n"}}
