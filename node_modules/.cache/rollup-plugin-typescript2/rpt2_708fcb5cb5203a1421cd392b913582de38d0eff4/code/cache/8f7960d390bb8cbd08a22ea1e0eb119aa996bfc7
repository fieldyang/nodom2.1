{"code":"import { Directive } from \"./directive\";\r\nimport { Expression } from \"./expression\";\r\nimport { NEvent } from \"./event\";\r\nimport { PluginManager } from \"./pluginmanager\";\r\nimport { Element } from \"./element\";\r\nimport { Util } from \"./util\";\r\n/**\r\n * 编译器，负责模版的编译\r\n * @since 1.0\r\n */\r\nexport class Compiler {\r\n    /**\r\n     * 编译\r\n     * 如果为el.innerHTML方式，可能存在多个子节点，则在外面包一层父节点，因为模块只能有一个根节点，否则返回模块根节点\r\n     * @param elementStr    待编译html串\r\n     * @returns             虚拟dom\r\n     */\r\n    static compile(elementStr) {\r\n        const div = Util.newEl('div');\r\n        try {\r\n            div.innerHTML = elementStr;\r\n        }\r\n        catch (e) { }\r\n        let oe = new Element('div');\r\n        oe.setProp('role', 'moduleContainer');\r\n        this.handleChildren(oe, div);\r\n        // //保证模块只有一个根节点\r\n        // if(oe.children.length===1){\r\n        //     return oe.children[0];\r\n        // }\r\n        return oe;\r\n    }\r\n    /**\r\n     * 编译dom\r\n     * @param ele           待编译html element\r\n     * @param parent        父节点（virtualdom）\r\n     */\r\n    static compileDom(ele) {\r\n        let oe;\r\n        //注视标志\r\n        let isComment = false;\r\n        switch (ele.nodeType) {\r\n            case Node.ELEMENT_NODE: //元素\r\n                let el = ele;\r\n                oe = this.handleDefineEl(el);\r\n                if (!oe) {\r\n                    oe = this.handleEl(el);\r\n                }\r\n                break;\r\n            case Node.TEXT_NODE: //文本节点\r\n                oe = new Element();\r\n                let txt = ele.textContent;\r\n                let expA = this.compileExpression(txt);\r\n                if (typeof expA === 'string') { //无表达式\r\n                    oe.textContent = expA;\r\n                }\r\n                else { //含表达式\r\n                    oe.expressions = expA;\r\n                }\r\n                break;\r\n            case Node.COMMENT_NODE: //注释\r\n                isComment = true;\r\n                break;\r\n        }\r\n        //添加到子节点,comment节点不需要    \r\n        if (!isComment) {\r\n            return oe;\r\n        }\r\n    }\r\n    /**\r\n     * 编译html element\r\n     * @param oe    新建的虚拟dom\r\n     * @returns     虚拟dom\r\n     */\r\n    static handleEl(el) {\r\n        let oe = new Element(el.tagName);\r\n        this.handleAttributes(oe, el);\r\n        this.handleChildren(oe, el);\r\n        return oe;\r\n    }\r\n    /**\r\n     * 编译插件\r\n     * @param el 待处理的html element\r\n     * @returns  如果识别自定义el，则返回编译后的虚拟dom，否则返回undefined\r\n     */\r\n    static handleDefineEl(el) {\r\n        let de = PluginManager.get(el.tagName);\r\n        if (!de) {\r\n            return;\r\n        }\r\n        return Reflect.construct(de, [el]).element;\r\n    }\r\n    /**\r\n     * 处理属性\r\n     * @param oe 新建的虚拟dom\r\n     * @param el 待处理的html element\r\n     */\r\n    static handleAttributes(oe, el) {\r\n        //遍历attributes\r\n        //先处理普通属性，再处理指令\r\n        let directives = [];\r\n        for (let i = 0; i < el.attributes.length; i++) {\r\n            let attr = el.attributes[i];\r\n            if (attr.name.startsWith('x-')) { //指令，先存，最后处理\r\n                directives.push(attr);\r\n            }\r\n            else if (attr.name.startsWith('e-')) { //事件\r\n                let en = attr.name.substr(2);\r\n                oe.addEvent(new NEvent(en, attr.value.trim()));\r\n            }\r\n            else {\r\n                let isExpr = false;\r\n                let v = attr.value.trim();\r\n                if (v !== '') {\r\n                    let ra = this.compileExpression(v);\r\n                    if (Util.isArray(ra)) {\r\n                        oe.setProp(attr.name, ra, true);\r\n                        isExpr = true;\r\n                    }\r\n                }\r\n                if (!isExpr) {\r\n                    oe.setProp(attr.name, v);\r\n                }\r\n            }\r\n        }\r\n        //处理属性\r\n        for (let attr of directives) {\r\n            new Directive(attr.name.substr(2), attr.value.trim(), oe, null, true);\r\n        }\r\n        if (directives.length > 1) {\r\n            //指令排序\r\n            oe.directives.sort((a, b) => {\r\n                return a.type.prio - b.type.prio;\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * 处理子节点\r\n     * @param oe 新建的虚拟dom\r\n     * @param el 待处理的html element\r\n     */\r\n    static handleChildren(oe, el) {\r\n        //子节点编译\r\n        for (let i = 0; i < el.childNodes.length; i++) {\r\n            let nd = el.childNodes[i];\r\n            let o = this.compileDom(nd);\r\n            if (o) {\r\n                if (o.tagName && oe.isSvgNode) { //设置svg对象\r\n                    o.isSvgNode = true;\r\n                }\r\n                oe.children.push(o);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 处理表达式串\r\n     * @param exprStr   含表达式的串\r\n     * @return          处理后的字符串和表达式数组\r\n     */\r\n    static compileExpression(exprStr) {\r\n        if (/\\{\\{.+?\\}\\}/.test(exprStr) === false) {\r\n            return exprStr;\r\n        }\r\n        let reg = /\\{\\{.+?\\}\\}/g;\r\n        let retA = new Array();\r\n        let re;\r\n        let oIndex = 0;\r\n        while ((re = reg.exec(exprStr)) !== null) {\r\n            let ind = re.index;\r\n            //字符串\r\n            if (ind > oIndex) {\r\n                let s = exprStr.substring(oIndex, ind);\r\n                retA.push(s);\r\n            }\r\n            //实例化表达式对象\r\n            let exp = new Expression(re[0].substring(2, re[0].length - 2));\r\n            //加入工厂\r\n            retA.push(exp);\r\n            oIndex = ind + re[0].length;\r\n        }\r\n        //最后的字符串\r\n        if (oIndex < exprStr.length - 1) {\r\n            retA.push(exprStr.substr(oIndex));\r\n        }\r\n        return retA;\r\n    }\r\n}\r\n//# sourceMappingURL=compiler.js.map","references":["D:/Git/git_repos/nodom2.1/core/directive.ts","D:/Git/git_repos/nodom2.1/core/expression.ts","D:/Git/git_repos/nodom2.1/core/event.ts","D:/Git/git_repos/nodom2.1/core/pluginmanager.ts","D:/Git/git_repos/nodom2.1/core/element.ts","D:/Git/git_repos/nodom2.1/core/util.ts"],"map":"{\"version\":3,\"file\":\"compiler.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/compiler.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/Git/git_repos/nodom2.1/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/compiler.d.ts","writeByteOrderMark":false,"text":"import { Element } from \"./element\";\r\n/**\r\n * 编译器，负责模版的编译\r\n * @since 1.0\r\n */\r\nexport declare class Compiler {\r\n    /**\r\n     * 编译\r\n     * 如果为el.innerHTML方式，可能存在多个子节点，则在外面包一层父节点，因为模块只能有一个根节点，否则返回模块根节点\r\n     * @param elementStr    待编译html串\r\n     * @returns             虚拟dom\r\n     */\r\n    static compile(elementStr: string): Element;\r\n    /**\r\n     * 编译dom\r\n     * @param ele           待编译html element\r\n     * @param parent        父节点（virtualdom）\r\n     */\r\n    static compileDom(ele: Node): Element;\r\n    /**\r\n     * 编译html element\r\n     * @param oe    新建的虚拟dom\r\n     * @returns     虚拟dom\r\n     */\r\n    static handleEl(el: HTMLElement): Element;\r\n    /**\r\n     * 编译插件\r\n     * @param el 待处理的html element\r\n     * @returns  如果识别自定义el，则返回编译后的虚拟dom，否则返回undefined\r\n     */\r\n    static handleDefineEl(el: HTMLElement): Element;\r\n    /**\r\n     * 处理属性\r\n     * @param oe 新建的虚拟dom\r\n     * @param el 待处理的html element\r\n     */\r\n    static handleAttributes(oe: Element, el: HTMLElement): void;\r\n    /**\r\n     * 处理子节点\r\n     * @param oe 新建的虚拟dom\r\n     * @param el 待处理的html element\r\n     */\r\n    static handleChildren(oe: Element, el: HTMLElement): void;\r\n    /**\r\n     * 处理表达式串\r\n     * @param exprStr   含表达式的串\r\n     * @return          处理后的字符串和表达式数组\r\n     */\r\n    private static compileExpression;\r\n}\r\n"}}
