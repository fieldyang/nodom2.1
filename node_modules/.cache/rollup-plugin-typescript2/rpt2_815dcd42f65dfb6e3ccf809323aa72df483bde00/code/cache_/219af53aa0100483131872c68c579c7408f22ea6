{"code":"/**\r\n * 改变的dom类型\r\n * 用于比较需要修改渲染的节点属性存储\r\n */\r\nexport class ChangedDom {\r\n    /**\r\n     *\r\n     * @param node      虚拟节点\r\n     * @param type      修改类型  add(添加节点),del(删除节点),upd(更新节点),rep(替换节点),text(修改文本内容)\r\n     * @param parent    父虚拟dom\r\n     * @param index     在父节点中的位置索引\r\n     */\r\n    constructor(node, type, parent, index) {\r\n        this.node = node;\r\n        this.type = type;\r\n        this.parent = parent;\r\n        this.index = index;\r\n    }\r\n}\r\nexport const selfClosingTag = [\r\n    \"area\",\r\n    \"base\",\r\n    \"basefont\",\r\n    \"br\",\r\n    \"col\",\r\n    \"embed\",\r\n    \"frame\",\r\n    \"hr\",\r\n    \"img\",\r\n    \"input\",\r\n    \"keygen\",\r\n    \"link\",\r\n    \"meta\",\r\n    \"param\",\r\n    \"source\",\r\n    \"track\",\r\n];\r\n//# sourceMappingURL=types.js.map","references":["D:/Git/git_repos/nodom2.1/core/element.ts","D:/Git/git_repos/nodom2.1/core/module.ts","D:/Git/git_repos/nodom2.1/core/router.ts"],"map":"{\"version\":3,\"file\":\"types.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/types.ts\"],\"names\":[],\"mappings\":\"AA8OA;;;GAGG;AACF,MAAM,OAAO,UAAU;IAkCpB;;;;;;OAMG;IACH,YAAY,IAAa,EAAC,IAAY,EAAC,MAAe,EAAC,KAAa;QAChE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;CACJ;AAuCD,MAAM,CAAC,MAAM,cAAc,GAAG;IAC1B,MAAM;IACN,MAAM;IACN,UAAU;IACV,IAAI;IACJ,KAAK;IACL,OAAO;IACP,OAAO;IACP,IAAI;IACJ,KAAK;IACL,OAAO;IACP,QAAQ;IACR,MAAM;IACN,MAAM;IACN,OAAO;IACP,QAAQ;IACR,OAAO;CACV,CAAC\"}","dts":{"name":"D:/Git/git_repos/nodom2.1/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/types.d.ts","writeByteOrderMark":false,"text":"import { Element } from \"./element\";\r\nimport { Module } from \"./module\";\r\nimport { Route } from \"./router\";\r\n/**\r\n * module class obj\r\n */\r\nexport interface IMdlClassObj {\r\n    /**\r\n     * class名或class\r\n     */\r\n    class: any;\r\n    /**\r\n     * 模块名\r\n     */\r\n    name?: string;\r\n    /**\r\n     * class文件路径\r\n     */\r\n    path: string;\r\n    /**\r\n     * 实例\r\n     */\r\n    instance?: Module;\r\n    /**\r\n     * 数据\r\n     */\r\n    data?: string | Object;\r\n    /**\r\n     * 是否单例\r\n     */\r\n    singleton?: boolean;\r\n    /**\r\n     * 懒加载\r\n     */\r\n    lazy?: boolean;\r\n    /**\r\n     * 是否正在初始化\r\n     */\r\n    initing: boolean;\r\n    /**\r\n     * 等待模块初始化的id列表\r\n     */\r\n    waitList: number[];\r\n}\r\n/**\r\n * 应用初始化配置类型\r\n */\r\nexport interface IAppCfg {\r\n    /**\r\n     * 路径参数，请参阅NApplication path属性\r\n     */\r\n    path?: any;\r\n    /**\r\n     * 语言，默认 zh\r\n     */\r\n    language: string;\r\n    /**\r\n     * 调度器间隔时间(ms)，如果支持requestAnimationFrame，则不需要\r\n     */\r\n    scheduleCircle?: number;\r\n    /**\r\n     * 主模块配置\r\n     */\r\n    module: IModuleCfg;\r\n    /**\r\n     * 模块配置数组，数组元素包括\r\n     *      class:模块类名,\r\n     *      path:模块路径(相对于app module路径),\r\n     *      data:数据路径(字符串)或数据(object),\r\n     *      singleton:单例(全应用公用同一个实例，默认true),\r\n     *      lazy:懒加载(默认false)\r\n     */\r\n    modules: IMdlClassObj[];\r\n    /**\r\n     * 路由配置\r\n     * class:模块类名,\r\n     * moduleName:模块名\r\n     * data:数据url\r\n     * routes:子路由\r\n     * onEnter:路由进入事件\r\n     * onLeave:路由离开事件\r\n     */\r\n    routes: IRouteCfg[];\r\n}\r\n/**\r\n * 路由配置\r\n */\r\nexport interface IRouteCfg {\r\n    /**\r\n     * 路由路径，可以带通配符*，可以带参数 /:\r\n     */\r\n    path: string;\r\n    /**\r\n     * 路由模块id或模块类名，id为数字，类名为string\r\n     */\r\n    module?: number | string;\r\n    /**\r\n     * 模块名\r\n     */\r\n    moduleName?: string;\r\n    /**\r\n     * 数据url\r\n     */\r\n    dataUrl?: string;\r\n    /**\r\n     * 子路由数组\r\n     */\r\n    routes?: Array<IRouteCfg>;\r\n    /**\r\n     * 进入路由事件方法\r\n     */\r\n    onEnter?: Function;\r\n    /**\r\n     * 离开路由方法\r\n     */\r\n    onLeave?: Function;\r\n    /**\r\n     * 是否使用父路由路径\r\n     */\r\n    useParentPath?: boolean;\r\n    /**\r\n     * 不添加到路由树\r\n     */\r\n    notAdd?: boolean;\r\n    /**\r\n     * 父路由\r\n     */\r\n    parent?: Route;\r\n}\r\n/**\r\n * 模块配置对象\r\n */\r\nexport interface IModuleCfg {\r\n    /**\r\n     * 模块名(模块内(父模块的子模块之间)唯一)，如果不设置，则系统会自动生成Module+id\r\n     */\r\n    name?: string;\r\n    /**\r\n     * 容器选择器\r\n     */\r\n    el?: string;\r\n    /**\r\n     * 是否单例，如果为true，则整个应用中共享一个模块实例，默认false\r\n     */\r\n    singleton?: boolean;\r\n    /**\r\n     * 模块类名\r\n     */\r\n    class?: string;\r\n    /**\r\n     * 模块路径(相对于app module路径)\r\n     */\r\n    path?: string;\r\n    /**\r\n     * 模版字符串，如果以“<”开头，则表示模版字符串，否则表示模版url\r\n     */\r\n    template?: string;\r\n    /**\r\n     * 数据，如果为json object，直接作为模型数据，如果为字符串，则表示数据url，需要请求得到数据\r\n     */\r\n    data?: Object | string;\r\n    /**\r\n     * 模块方法集合\r\n     * 不要用箭头\"=>\" 操作符定义\r\n     * ```\r\n     * \t{\r\n     * \t\tmethod1:function1(){},\r\n     * \t\tmethod2:function2(){},\r\n     * \t\t...\r\n     * \t}\r\n     * ```\r\n     */\r\n    methods?: Object;\r\n    /**\r\n     * 子模块配置\r\n     */\r\n    modules?: IModuleCfg[];\r\n    /**\r\n     * 先于模块初始化加载的文件集合\r\n     * 如果为string，则表示资源路径，type为js\r\n     * 如果为object，则格式为{type:'js'/'css',url:路径}\r\n     */\r\n    requires?: Array<string | Object>;\r\n}\r\n/**\r\n * 资源对象\r\n */\r\nexport interface IResourceObj {\r\n    /**\r\n     * 资源内容 字符串或数据对象或element\r\n     */\r\n    content?: any;\r\n    /**\r\n     * 类型js、template(html,htm), nd(编译后的模版文件)，data(不保存资源)\r\n     */\r\n    type?: string;\r\n    /**\r\n     * 需要加载\r\n     */\r\n    needLoad?: boolean;\r\n}\r\n/**\r\n * 提示消息接口\r\n */\r\nexport interface ITipMessage {\r\n    TipWords: Object;\r\n    ErrorMsgs: Object;\r\n    FormMsgs: Object;\r\n    WeekDays: Object;\r\n}\r\n/**\r\n * 改变的dom类型\r\n * 用于比较需要修改渲染的节点属性存储\r\n */\r\nexport declare class ChangedDom {\r\n    /**\r\n     * 改变方式\r\n     */\r\n    type: string;\r\n    /**\r\n     * 改变的节点\r\n     */\r\n    node: Element;\r\n    /**\r\n     * 父虚拟dom\r\n     */\r\n    parent: Element;\r\n    /**\r\n     * 在父节点中的位置\r\n     */\r\n    index: number;\r\n    /**\r\n     * 改变的属性数组\r\n     * [{prop1:value1},...]\r\n     */\r\n    changeProps: Array<Object>;\r\n    /**\r\n     * 改变的asset\r\n     */\r\n    changeAssets: Array<Object>;\r\n    /**\r\n     * 移除的属性名数组\r\n     */\r\n    removeProps: Array<string>;\r\n    /**\r\n     *\r\n     * @param node      虚拟节点\r\n     * @param type      修改类型  add(添加节点),del(删除节点),upd(更新节点),rep(替换节点),text(修改文本内容)\r\n     * @param parent    父虚拟dom\r\n     * @param index     在父节点中的位置索引\r\n     */\r\n    constructor(node?: Element, type?: string, parent?: Element, index?: number);\r\n}\r\n/**\r\n *  AST对象约束\r\n */\r\nexport interface ASTObj {\r\n    /**\r\n     * 节点类型，如果是原生节点，如div则是div，如果是文本节点则是text。如果是注释则为comment\r\n     */\r\n    tagName: string;\r\n    /**\r\n     * 属性数组，里面为属性对象如{propName:'class',value:'myclass'}\r\n     */\r\n    attrs?: Array<{\r\n        propName: string;\r\n        value: any;\r\n    }>;\r\n    /**\r\n     * 事件数组，里面为事件对象{eventName:'click',eventHandler:'change'}\r\n     */\r\n    events?: Array<{\r\n        eventName: string;\r\n        exec: any;\r\n    }>;\r\n    /**\r\n     * 子节点数组，与textContent互斥\r\n     */\r\n    children?: Array<ASTObj>;\r\n    /**\r\n     * 表达式数组\r\n     */\r\n    expressions?: any[];\r\n    /**\r\n     * textContent 节点为text的时候才有的属性，与children属性互斥\r\n     */\r\n    textContent?: string;\r\n}\r\nexport declare const selfClosingTag: string[];\r\n"}}
