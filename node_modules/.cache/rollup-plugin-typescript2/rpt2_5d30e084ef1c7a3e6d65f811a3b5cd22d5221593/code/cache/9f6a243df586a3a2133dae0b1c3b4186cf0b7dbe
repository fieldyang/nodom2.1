{"code":"import { DirectiveManager } from \"./directivemanager\";\r\nimport { Filter } from \"./filter\";\r\nimport { Util } from \"./util\";\r\n/**\r\n * 指令类\r\n */\r\nexport class Directive {\r\n    /**\r\n     * 构造方法\r\n     * @param type  \t类型名\r\n     * @param value \t指令值\r\n     * @param dom       指令对应的dom\r\n     * @param filters   过滤器字符串或过滤器对象,如果为过滤器串，则以｜分割\r\n     * @param notSort   不排序\r\n     */\r\n    constructor(type, value, dom, filters, notSort) {\r\n        this.id = Util.genId();\r\n        this.type = DirectiveManager.getType(type);\r\n        if (Util.isString(value)) {\r\n            value = value.trim();\r\n        }\r\n        this.value = value;\r\n        if (filters) {\r\n            this.filters = [];\r\n            if (typeof filters === 'string') {\r\n                let fa = filters.split('|');\r\n                for (let f of fa) {\r\n                    this.filters.push(new Filter(f));\r\n                }\r\n            }\r\n            else if (Util.isArray(filters)) {\r\n                for (let f of filters) {\r\n                    if (typeof f === 'string') {\r\n                        this.filters.push(new Filter(f));\r\n                    }\r\n                    else if (f instanceof Filter) {\r\n                        this.filters.push(f);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (type !== undefined && dom) {\r\n            DirectiveManager.init(this, dom);\r\n            dom.addDirective(this, !notSort);\r\n        }\r\n    }\r\n    /**\r\n     * 执行指令\r\n     * @param module    模块\r\n     * @param dom       指令执行时dom\r\n     * @param parent    父虚拟dom\r\n     */\r\n    async exec(module, dom, parent) {\r\n        return DirectiveManager.exec(this, dom, module, parent);\r\n    }\r\n    /**\r\n     * 克隆\r\n     * @param dst   目标dom\r\n     * @returns     新指令\r\n     */\r\n    clone(dst) {\r\n        let dir = new Directive(this.type.name, this.value);\r\n        if (this.filters) {\r\n            dir.filters = [];\r\n            for (let f of this.filters) {\r\n                dir.filters.push(f.clone());\r\n            }\r\n        }\r\n        if (this.params) {\r\n            dir.params = Util.clone(this.params);\r\n        }\r\n        if (this.extra) {\r\n            dir.extra = Util.clone(this.extra);\r\n        }\r\n        DirectiveManager.init(dir, dst);\r\n        return dir;\r\n    }\r\n}\r\n//# sourceMappingURL=directive.js.map","references":["D:/Git/git_repos/nodom2.1/core/directivemanager.ts","D:/Git/git_repos/nodom2.1/core/directivetype.ts","D:/Git/git_repos/nodom2.1/core/filter.ts","D:/Git/git_repos/nodom2.1/core/element.ts","D:/Git/git_repos/nodom2.1/core/module.ts","D:/Git/git_repos/nodom2.1/core/util.ts"],"map":"{\"version\":3,\"file\":\"directive.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/directive.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAEtD,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAGlC,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B;;GAEG;AACH,MAAM,OAAQ,SAAS;IA+BnB;;;;;;;OAOG;IACH,YAAY,IAAW,EAAE,KAAY,EAAC,GAAY,EAAE,OAAwB,EAAC,OAAgB;QACzF,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YACtB,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;SACxB;QACD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,IAAG,OAAO,EAAC;YACP,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;YAClB,IAAG,OAAO,OAAO,KAAK,QAAQ,EAAC;gBAC3B,IAAI,EAAE,GAAY,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACrC,KAAI,IAAI,CAAC,IAAI,EAAE,EAAC;oBACZ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;iBACpC;aACJ;iBAAK,IAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAC;gBAC3B,KAAI,IAAI,CAAC,IAAI,OAAO,EAAC;oBACjB,IAAG,OAAO,CAAC,KAAK,QAAQ,EAAC;wBACrB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,MAAM,CAAS,CAAC,CAAC,CAAC,CAAC;qBAC5C;yBAAK,IAAG,CAAC,YAAY,MAAM,EAAC;wBACzB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACxB;iBACJ;aACJ;SACJ;QACD,IAAI,IAAI,KAAK,SAAS,IAAI,GAAG,EAAE;YAC3B,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAC,GAAG,CAAC,CAAC;YAChC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAC,CAAC,OAAO,CAAC,CAAC;SACnC;IACL,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,IAAI,CAAC,MAAa,EAAC,GAAW,EAAC,MAAe;QACvD,OAAO,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAC,GAAG,EAAC,MAAM,EAAC,MAAM,CAAC,CAAC;IACzD,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,GAAW;QACpB,IAAI,GAAG,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnD,IAAG,IAAI,CAAC,OAAO,EAAC;YACZ,GAAG,CAAC,OAAO,GAAG,EAAE,CAAC;YACjB,KAAI,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,EAAC;gBACtB,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;aAC/B;SACJ;QACD,IAAG,IAAI,CAAC,MAAM,EAAC;YACX,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACxC;QACD,IAAG,IAAI,CAAC,KAAK,EAAC;YACV,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACtC;QACD,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC;QAC/B,OAAO,GAAG,CAAC;IACf,CAAC;CACJ\"}","dts":{"name":"D:/Git/git_repos/nodom2.1/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/directive.d.ts","writeByteOrderMark":false,"text":"import { DirectiveType } from \"./directivetype\";\r\nimport { Filter } from \"./filter\";\r\nimport { Element } from \"./element\";\r\nimport { Module } from \"./module\";\r\n/**\r\n * 指令类\r\n */\r\nexport declare class Directive {\r\n    /**\r\n     * 指令id\r\n     */\r\n    id: number;\r\n    /**\r\n     * 指令类型，指令管理器中定义\r\n     */\r\n    type: DirectiveType;\r\n    /**\r\n     * 指令值\r\n     */\r\n    value: any;\r\n    /**\r\n     * 过滤器组\r\n     */\r\n    filters: Filter[];\r\n    /**\r\n     * 附加参数\r\n     */\r\n    params: any;\r\n    /**\r\n     * 附加操作\r\n     */\r\n    extra: any;\r\n    /**\r\n     * 构造方法\r\n     * @param type  \t类型名\r\n     * @param value \t指令值\r\n     * @param dom       指令对应的dom\r\n     * @param filters   过滤器字符串或过滤器对象,如果为过滤器串，则以｜分割\r\n     * @param notSort   不排序\r\n     */\r\n    constructor(type: string, value: string, dom?: Element, filters?: string | Filter[], notSort?: boolean);\r\n    /**\r\n     * 执行指令\r\n     * @param module    模块\r\n     * @param dom       指令执行时dom\r\n     * @param parent    父虚拟dom\r\n     */\r\n    exec(module: Module, dom: Element, parent?: Element): Promise<any>;\r\n    /**\r\n     * 克隆\r\n     * @param dst   目标dom\r\n     * @returns     新指令\r\n     */\r\n    clone(dst: Element): Directive;\r\n}\r\n"}}
