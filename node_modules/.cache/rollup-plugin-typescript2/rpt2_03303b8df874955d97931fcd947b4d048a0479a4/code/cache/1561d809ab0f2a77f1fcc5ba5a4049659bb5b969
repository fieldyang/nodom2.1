{"code":"import { ModuleFactory } from \"./modulefactory\";\r\nimport { Util } from \"./util\";\r\n/**\r\n * 表达式类\r\n */\r\nexport class Expression {\r\n    /**\r\n     * @param exprStr\t表达式串\r\n     */\r\n    constructor(exprStr) {\r\n        this.fields = []; // 字段数组\r\n        this.id = Util.genId();\r\n        let execStr;\r\n        if (exprStr) {\r\n            execStr = this.compile(exprStr);\r\n        }\r\n        if (execStr) {\r\n            let v = this.fields.length > 0 ? ',' + this.fields.join(',') : '';\r\n            execStr = 'function($module' + v + '){return ' + execStr + '}';\r\n            this.execFunc = eval('(' + execStr + ')');\r\n        }\r\n    }\r\n    /**\r\n     * 克隆\r\n     */\r\n    clone() {\r\n        return this;\r\n    }\r\n    /**\r\n     * 初始化，把表达式串转换成堆栈\r\n     * @param exprStr \t表达式串\r\n     */\r\n    compile(exprStr) {\r\n        // let copyStr = exprStr;\r\n        //替代字符串的正则数组\r\n        let stringReg = [/\\\\\"/g, /\\\\'/g, /\\\\`/g, /\\\".*?\\\"/g, /'.*?'/g, /`.*?`/g];\r\n        let replaceMap = new Map();\r\n        const TMPStr = '##TMP';\r\n        //替换字符串\r\n        stringReg.forEach(reg => {\r\n            if (reg.test(exprStr)) {\r\n                exprStr.match(reg).forEach((text) => {\r\n                    let index = exprStr.indexOf(text);\r\n                    replaceMap.set(TMPStr + index, text);\r\n                    exprStr = exprStr.substring(0, index) + (TMPStr + index) + exprStr.substring(index + text.length);\r\n                });\r\n            }\r\n        });\r\n        exprStr = exprStr.trim().replace(/([^w])\\s+/g, '$1');\r\n        //首尾指针\r\n        let [first, last] = [0, 0];\r\n        let [braces, fields, funArr, filters] = [[], [], [], []];\r\n        //括号数组 字段数组 函数数组 存过滤器需要的值\r\n        let filterString = '';\r\n        //特殊字符\r\n        let special = /[\\!\\|\\*\\/\\+\\-><=&%]/;\r\n        //返回的串\r\n        let express = '';\r\n        //函数名\r\n        let funName;\r\n        let isInBrace = false;\r\n        let isInFun = false;\r\n        while (last < exprStr.length) {\r\n            let lastStr = exprStr[last];\r\n            if (lastStr == '(') {\r\n                if (isInFun) {\r\n                    //函数里存函数名\r\n                    funName = exprStr.substring(funArr.pop(), last);\r\n                    express += funName;\r\n                    first = last;\r\n                }\r\n                else {\r\n                    if (!isInBrace) { //不在函数里外面也不在括号里\r\n                        express += exprStr.substring(first, last);\r\n                        first = last;\r\n                    }\r\n                }\r\n                braces.push(last++);\r\n                isInBrace = true;\r\n            }\r\n            else if (lastStr == ')') {\r\n                let tmpStr = exprStr.substring(braces.pop(), last);\r\n                filters.push(tmpStr);\r\n                if (/[\\,\\!\\|\\*\\/\\+\\-><=&%]/.test(tmpStr)) { //字段截取需要的字母集\r\n                    let fieldItem = tmpStr.match(/[\\w^\\.]+/g);\r\n                    fields = fields.concat(fieldItem);\r\n                }\r\n                else {\r\n                    if (tmpStr.substr(1).match(/\\w+/) && tmpStr.substr(1).match(/\\w+/)[0].length == tmpStr.substr(1).length) { //括号里没有特殊符号\r\n                        fields.push(tmpStr.substr(1));\r\n                    }\r\n                    else if (tmpStr.substr(1).startsWith('...')) { //拓展运算符\r\n                        fields.push(tmpStr.substr(4));\r\n                    }\r\n                }\r\n                //外面没有括号\r\n                if (braces.length == 0) {\r\n                    isInBrace = false;\r\n                    express += tmpStr;\r\n                }\r\n                //处理函数串\r\n                if (isInFun) {\r\n                    replaceMethod();\r\n                    isInFun = false;\r\n                }\r\n                first = last++;\r\n            }\r\n            else if (lastStr == '$') {\r\n                isInFun = true;\r\n                funArr.push(last++);\r\n                // last++;\r\n            }\r\n            else if (special.test(lastStr) && !isInBrace) {\r\n                express += exprStr.substring(first, last) + lastStr;\r\n                //特殊字符处理\r\n                fields = fields.concat(exprStr.substring(first, last).match(/[\\w^\\.]+/g));\r\n                if (lastStr == '=' || lastStr == '|' || lastStr == '&') { //处理重复字符，和表达式\r\n                    if (lastStr == '|' && exprStr[last + 1] != '|') { //表达式处理\r\n                        let str = filters[filters.length - 1] ? filters[filters.length - 1] : exprStr.substring(first, last);\r\n                        if (!filters.length) {\r\n                            filterString = str;\r\n                        }\r\n                        let res = handFilter();\r\n                        let index = express.indexOf(str);\r\n                        //')'和'|'\r\n                        express = express.substring(0, index) + res.str + express.substring(index + str.length + 2);\r\n                        first = last += res.length + 1;\r\n                        continue;\r\n                    }\r\n                    while (exprStr[last + 1] == lastStr) { //处理重复字符\r\n                        express += exprStr[++last];\r\n                    }\r\n                    ;\r\n                }\r\n                first = ++last;\r\n            }\r\n            else {\r\n                last++;\r\n            }\r\n        }\r\n        let endStr = exprStr.substring(first);\r\n        if (/^[A-Za-z0-9]+$/.test(endStr)) {\r\n            fields.push(endStr);\r\n        }\r\n        express += endStr;\r\n        function replaceMethod() {\r\n            express = express.replace(/\\$[^(]+?\\(/, () => {\r\n                return '$module.methodFactory.get(\"' + funName.substr(1) + '\").call($module,';\r\n            });\r\n        }\r\n        /**\r\n         * @returns {\r\n         * str:过滤器串\r\n         * length:编译跳过的长度\r\n         */\r\n        function handFilter() {\r\n            if (/\\d+/.test(exprStr[last + 1])) {\r\n                return;\r\n            }\r\n            last++;\r\n            let tmpStr = exprStr.substr(last).split(/[\\)\\(\\+\\-\\*><=&%]/)[0];\r\n            let args = [];\r\n            let value = filters.length > 0 ? filters.pop() + ')' : filterString;\r\n            let num = 0;\r\n            tmpStr.replace(/\\:/g, function (m, i) {\r\n                num++;\r\n                return m;\r\n            });\r\n            if (tmpStr.indexOf(':') != -1) { //有过滤器格式\r\n                args = tmpStr.split(/[\\:\\+\\-\\*><=&%]/);\r\n            }\r\n            ;\r\n            if (args.length == 0) { //如果没有过滤器参数\r\n                let filterName = tmpStr.match(/^\\w+/)[0];\r\n                return {\r\n                    str: 'nodom.FilterManager.exec($module,\"' + filterName + '\",' + value + ')',\r\n                    length: filterName.length - 1,\r\n                };\r\n            }\r\n            let length = args[0].length + args[1].length;\r\n            if (args[1].startsWith('##TMP')) { //字符串还原\r\n                let deleteKey = args[1];\r\n                args[1] = replaceMap.get(args[1]);\r\n                replaceMap.delete(deleteKey);\r\n            }\r\n            let params = '';\r\n            for (let i = 1; i < num; i++) { //多个过滤器参数\r\n                params += /[\\'\\\"\\`]/.test(args[i]) ? args[i] : '\\'' + args[i] + '\\'' + ',';\r\n            }\r\n            params = /[\\'\\\"\\`]/.test(args[num]) ? args[num] : '\\'' + args[num] + '\\'';\r\n            return {\r\n                str: 'nodom.FilterManager.exec($module,\"' + args[0] + '\",' + value + ',' + params + ')',\r\n                length,\r\n            };\r\n        }\r\n        if (fields.length == 0) {\r\n            fields.push(express);\r\n        }\r\n        fields = [...(new Set(fields))].filter((v) => {\r\n            return v != null && !v.startsWith('.') && !v.startsWith('$module') && !v.startsWith('TMP');\r\n        });\r\n        if (replaceMap.size) {\r\n            replaceMap.forEach((value, key) => {\r\n                express = express.substring(0, express.indexOf(key)) + value + express.substring(express.indexOf(key) + key.length);\r\n            });\r\n        }\r\n        ;\r\n        fields.forEach(field => {\r\n            this.addField(field);\r\n        });\r\n        return express;\r\n    }\r\n    /**\r\n     * 表达式计算\r\n     * @param model \t模型 或 fieldObj对象\r\n     * @returns \t\t计算结果\r\n     */\r\n    val(model) {\r\n        let module = ModuleFactory.get(model.$moduleId);\r\n        if (!model) {\r\n            model = module.model;\r\n        }\r\n        let valueArr = [];\r\n        this.fields.forEach((field) => {\r\n            valueArr.push(getFieldValue(module, model, field));\r\n        });\r\n        //module作为第一个参数\r\n        valueArr.unshift(module);\r\n        let v;\r\n        try {\r\n            v = this.execFunc.apply(null, valueArr);\r\n        }\r\n        catch (e) {\r\n        }\r\n        return v === undefined || v === null ? '' : v;\r\n        /**\r\n         * 获取字段值\r\n         * @param module    模块\r\n         * @param dataObj   数据对象\r\n         * @param field     字段名\r\n         * @return          字段值\r\n         */\r\n        function getFieldValue(module, dataObj, field) {\r\n            if (dataObj.hasOwnProperty(field)) {\r\n                return dataObj[field];\r\n            }\r\n            //从根查找\r\n            return module.model.$query(field);\r\n        }\r\n    }\r\n    /**\r\n    * 添加字段到fields\r\n    * @param field \t字段\r\n    * @returns         true/false\r\n    */\r\n    addField(field) {\r\n        //js 保留字\r\n        const jsKeyWords = ['true', 'false', 'undefined', 'null', 'typeof',\r\n            'Object', 'Function', 'Array', 'Number', 'Date',\r\n            'instanceof', 'NaN'];\r\n        if (field === '' || jsKeyWords.includes(field) || Util.isNumberString(field) || field.startsWith('Math') || field.startsWith('Object')) {\r\n            return false;\r\n        }\r\n        //多级字段只保留第一级，如 x.y只保留x\r\n        let ind;\r\n        if ((ind = field.indexOf('.')) !== -1) {\r\n            if (ind == 0) {\r\n                field = field.substr(1);\r\n            }\r\n            else {\r\n                field = field.substr(0, ind);\r\n            }\r\n        }\r\n        if (!this.fields.includes(field)) {\r\n            this.fields.push(field);\r\n        }\r\n        return true;\r\n    }\r\n}\r\n//# sourceMappingURL=expression.js.map","references":["D:/graduate/project/nodom2.1/nodom2.1/core/filtermanager.ts","D:/graduate/project/nodom2.1/nodom2.1/core/model.ts","D:/graduate/project/nodom2.1/nodom2.1/core/module.ts","D:/graduate/project/nodom2.1/nodom2.1/core/modulefactory.ts","D:/graduate/project/nodom2.1/nodom2.1/core/util.ts"],"map":"{\"version\":3,\"file\":\"expression.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/expression.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/graduate/project/nodom2.1/nodom2.1/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/expression.d.ts","writeByteOrderMark":false,"text":"import { Model } from \"./model\";\r\n/**\r\n * 表达式类\r\n */\r\nexport declare class Expression {\r\n    /**\r\n      * 表达式id\r\n      */\r\n    id: number;\r\n    /**\r\n     * 字段数组\r\n     */\r\n    fields: Array<string>;\r\n    /**\r\n     * 执行函数\r\n     */\r\n    execFunc: Function;\r\n    /**\r\n     * @param exprStr\t表达式串\r\n     */\r\n    constructor(exprStr?: string);\r\n    /**\r\n     * 克隆\r\n     */\r\n    clone(): this;\r\n    /**\r\n     * 初始化，把表达式串转换成堆栈\r\n     * @param exprStr \t表达式串\r\n     */\r\n    compile(exprStr: string): string;\r\n    /**\r\n     * 表达式计算\r\n     * @param model \t模型 或 fieldObj对象\r\n     * @returns \t\t计算结果\r\n     */\r\n    val(model: Model): any;\r\n    /**\r\n    * 添加字段到fields\r\n    * @param field \t字段\r\n    * @returns         true/false\r\n    */\r\n    private addField;\r\n}\r\n"}}
