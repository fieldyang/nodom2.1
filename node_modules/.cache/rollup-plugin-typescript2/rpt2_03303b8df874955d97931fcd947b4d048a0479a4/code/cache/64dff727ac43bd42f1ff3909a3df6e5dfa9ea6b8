{"code":"import { __awaiter } from \"tslib\";\r\nimport { Application } from \"./application\";\r\nimport { NError } from \"./error\";\r\nimport { Model } from \"./model\";\r\nimport { ModuleFactory } from \"./modulefactory\";\r\nimport { NodomMessage } from \"./nodom\";\r\nimport { Util } from \"./util\";\r\n/**\r\n * 路由类\r\n * @since \t\t1.0\r\n */\r\nexport class Router {\r\n    /**\r\n     * 把路径加入跳转列表(准备跳往该路由)\r\n     * @param path \t路径\r\n     */\r\n    static go(path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            for (let i = 0; i < this.waitList.length; i++) {\r\n                let li = this.waitList[i];\r\n                //相等，则不加入队列\r\n                if (li === path) {\r\n                    return;\r\n                }\r\n                //父路径，不加入\r\n                if (li.indexOf(path) === 0 && li.substr(path.length + 1, 1) === '/') {\r\n                    return;\r\n                }\r\n            }\r\n            this.waitList.push(path);\r\n            this.load();\r\n        });\r\n    }\r\n    /**\r\n     * 启动加载\r\n     */\r\n    static load() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            //在加载，或无等待列表，则返回\r\n            if (this.loading || this.waitList.length === 0) {\r\n                return;\r\n            }\r\n            let path = this.waitList.shift();\r\n            this.loading = true;\r\n            yield this.start(path);\r\n            this.loading = false;\r\n            this.load();\r\n        });\r\n    }\r\n    /**\r\n     * 切换路由\r\n     * @param path \t路径\r\n     */\r\n    static start(path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let diff = this.compare(this.currentPath, path);\r\n            //获得当前模块，用于寻找router view\r\n            let parentModule;\r\n            if (diff[0] === null) {\r\n                parentModule = findParentModule();\r\n            }\r\n            else {\r\n                if (typeof diff[0].module === 'string') {\r\n                    parentModule = yield ModuleFactory.getInstance(diff[0].module, diff[0].moduleName, diff[0].dataUrl);\r\n                }\r\n                else {\r\n                    parentModule = ModuleFactory.get(diff[0].module);\r\n                }\r\n            }\r\n            //父模块不存在，不继续处理\r\n            if (!parentModule) {\r\n                return;\r\n            }\r\n            //onleave事件，从末往前执行\r\n            for (let i = diff[1].length - 1; i >= 0; i--) {\r\n                const r = diff[1][i];\r\n                if (!r.module) {\r\n                    continue;\r\n                }\r\n                let module = ModuleFactory.get(r.module);\r\n                if (Util.isFunction(this.onDefaultLeave)) {\r\n                    this.onDefaultLeave(module.model);\r\n                }\r\n                if (Util.isFunction(r.onLeave)) {\r\n                    r.onLeave(module.model);\r\n                }\r\n                //module置为不激活\r\n                module.unactive();\r\n            }\r\n            let showPath; //实际要显示的路径\r\n            if (diff[2].length === 0) { //路由相同，参数不同\r\n                let route = diff[0];\r\n                let proute = diff[3];\r\n                if (route !== null) {\r\n                    //如果useparentpath，则使用父路由的路径，否则使用自己的路径\r\n                    showPath = route.useParentPath && proute ? proute.fullPath : route.fullPath;\r\n                    //给模块设置路由参数\r\n                    let module = ModuleFactory.get(route.module);\r\n                    route.setLinkActive();\r\n                    //设置首次渲染\r\n                    module.setFirstRender(true);\r\n                    yield module.active();\r\n                    setRouteParamToNModel(route, module);\r\n                }\r\n            }\r\n            else { //路由不同\r\n                //加载模块\r\n                for (let ii = 0, index = 0, len = diff[2].length; ii < len; ii++) {\r\n                    let route = diff[2][ii];\r\n                    //路由不存在或路由没有模块（空路由）\r\n                    if (!route || !route.module) {\r\n                        continue;\r\n                    }\r\n                    if (!route.useParentPath) {\r\n                        showPath = route.fullPath;\r\n                    }\r\n                    let module;\r\n                    //尚未获取module，进行初始化\r\n                    if (typeof route.module === 'string') {\r\n                        module = yield ModuleFactory.getInstance(route.module, route.moduleName, route.dataUrl);\r\n                        if (!module) {\r\n                            throw new NError('notexist1', NodomMessage.TipWords['module'], route.module);\r\n                        }\r\n                        route.module = module.id;\r\n                    }\r\n                    else {\r\n                        module = ModuleFactory.get(route.module);\r\n                    }\r\n                    //设置首次渲染\r\n                    module.setFirstRender(true);\r\n                    let routerKey = Router.routerKeyMap.get(parentModule.id);\r\n                    //从父模块子节点中删除以此routerKey为containerKey的模块\r\n                    for (let i = 0; i < parentModule.children.length; i++) {\r\n                        let m = ModuleFactory.get(parentModule.children[i]);\r\n                        if (m && m.isContainerKey(routerKey)) {\r\n                            parentModule.children.splice(i, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n                    //把此模块添加到父模块\r\n                    parentModule.addChild(module.id);\r\n                    module.setContainerKey(routerKey);\r\n                    //激活模块\r\n                    yield module.active();\r\n                    //设置active项激活\r\n                    route.setLinkActive();\r\n                    //设置路由参数\r\n                    setRouteParamToNModel(route);\r\n                    //默认全局路由enter事件\r\n                    if (Util.isFunction(this.onDefaultEnter)) {\r\n                        this.onDefaultEnter(module.model);\r\n                    }\r\n                    //当前路由进入事件\r\n                    if (Util.isFunction(route.onEnter)) {\r\n                        route.onEnter(module.model);\r\n                    }\r\n                    parentModule = module;\r\n                }\r\n            }\r\n            //如果是history popstate，则不加入history\r\n            if (this.startStyle !== 2 && showPath) {\r\n                let p = Util.mergePath([Application.getPath('route'), showPath]);\r\n                //子路由，替换state\r\n                if (this.showPath && showPath.indexOf(this.showPath) === 0) {\r\n                    history.replaceState(path, '', p);\r\n                }\r\n                else { //路径push进history\r\n                    history.pushState(path, '', p);\r\n                }\r\n                //设置显示路径\r\n                this.showPath = showPath;\r\n            }\r\n            //修改currentPath\r\n            this.currentPath = path;\r\n            //设置start类型为正常start\r\n            this.startStyle = 0;\r\n            /**\r\n             * 将路由参数放入module的model中\r\n             * @param route \t路由\r\n             * @param module    模块\r\n             */\r\n            function setRouteParamToNModel(route, module) {\r\n                if (!route) {\r\n                    return;\r\n                }\r\n                if (!module) {\r\n                    module = ModuleFactory.get(route.module);\r\n                }\r\n                let o = {\r\n                    path: route.path\r\n                };\r\n                if (!Util.isEmpty(route.data)) {\r\n                    o['data'] = route.data;\r\n                }\r\n                if (!module.model) {\r\n                    module.model = new Model({}, module);\r\n                }\r\n                module.model['$route'] = o;\r\n            }\r\n            /**\r\n             * 找到第一个带router的父模块\r\n             * @param pm    父模块\r\n             */\r\n            function findParentModule(pm) {\r\n                if (!pm) {\r\n                    pm = ModuleFactory.getMain();\r\n                }\r\n                if (Router.routerKeyMap.has(pm.id)) {\r\n                    return pm;\r\n                }\r\n                for (let c of pm.children) {\r\n                    let m = ModuleFactory.get(c);\r\n                    return findParentModule(m);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /*\r\n        * 重定向\r\n        * @param path \t路径\r\n        */\r\n    static redirect(path) {\r\n        this.go(path);\r\n    }\r\n    /**\r\n     * 添加路由\r\n     * @param route \t路由配置\r\n     * @param parent \t父路由\r\n     */\r\n    static addRoute(route, parent) {\r\n        //加入router tree\r\n        if (RouterTree.add(route, parent) === false) {\r\n            throw new NError(\"exist1\", NodomMessage.TipWords['route'], route.path);\r\n        }\r\n        //加入map\r\n        this.routes.set(route.id, route);\r\n    }\r\n    /**\r\n     * 获取路由\r\n     * @param path \t路径\r\n     * @param last \t是否获取最后一个路由,默认false\r\n     */\r\n    static getRoute(path, last) {\r\n        if (!path) {\r\n            return null;\r\n        }\r\n        let routes = RouterTree.get(path);\r\n        if (routes === null || routes.length === 0) {\r\n            return null;\r\n        }\r\n        //routeid 转route\r\n        if (last) { //获取最后一个\r\n            return [routes.pop()];\r\n        }\r\n        else { //获取所有\r\n            return routes;\r\n        }\r\n    }\r\n    /**\r\n     * 比较两个路径对应的路由链\r\n     * @param path1 \t第一个路径\r\n     * @param path2 \t第二个路径\r\n     * @returns \t\t[不同路由的父路由，第一个需要销毁的路由数组，第二个需要增加的路由数组，上2级路由]\r\n     */\r\n    static compare(path1, path2) {\r\n        // 获取路由id数组\r\n        let arr1 = null;\r\n        let arr2 = null;\r\n        if (path1) {\r\n            arr1 = this.getRoute(path1);\r\n        }\r\n        if (path2) {\r\n            arr2 = this.getRoute(path2);\r\n        }\r\n        let len = 0;\r\n        if (arr1 !== null) {\r\n            len = arr1.length;\r\n        }\r\n        if (arr2 !== null) {\r\n            if (arr2.length < len) {\r\n                len = arr2.length;\r\n            }\r\n        }\r\n        else {\r\n            len = 0;\r\n        }\r\n        //需要销毁的旧路由数组\r\n        let retArr1 = [];\r\n        //需要加入的新路由数组\r\n        let retArr2 = [];\r\n        let i = 0;\r\n        for (i = 0; i < len; i++) {\r\n            //找到不同路由开始位置\r\n            if (arr1[i].id === arr2[i].id) {\r\n                //比较参数\r\n                if (JSON.stringify(arr1[i].data) !== JSON.stringify(arr2[i].data)) {\r\n                    //从后面开始更新，所以需要i+1\r\n                    i++;\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        //旧路由改变数组\r\n        if (arr1 !== null) {\r\n            for (let j = i; j < arr1.length; j++) {\r\n                retArr1.push(arr1[j]);\r\n            }\r\n        }\r\n        //新路由改变数组（相对于旧路由）\r\n        if (arr2 !== null) {\r\n            for (let j = i; j < arr2.length; j++) {\r\n                retArr2.push(arr2[j]);\r\n            }\r\n        }\r\n        //上一级路由和上二级路由\r\n        let p1 = null;\r\n        let p2 = null;\r\n        if (arr1 !== null && i > 0) {\r\n            for (let j = i - 1; j >= 0 && (p1 === null || p2 === null); j--) {\r\n                if (arr1[j].module !== undefined) {\r\n                    if (p1 === null) {\r\n                        p1 = arr1[j];\r\n                    }\r\n                    else if (p2 === null) {\r\n                        p2 = arr1[j];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return [p1, retArr1, retArr2, p2];\r\n    }\r\n    /**\r\n     * 修改模块active view（如果为view active为true，则需要路由跳转）\r\n     * @param module \t模块\r\n     * @param path \t\tview对应的route路径\r\n     */\r\n    static changeActive(module, path) {\r\n        if (!module || !path || path === '') {\r\n            return;\r\n        }\r\n        let domArr = Router.activeDomMap.get(module.id);\r\n        if (!domArr) {\r\n            return;\r\n        }\r\n        //遍历router active view，设置或取消active class\r\n        domArr.forEach((item) => {\r\n            let dom = module.getNElement(item);\r\n            if (!dom) {\r\n                return;\r\n            }\r\n            // dom route 路径\r\n            let domPath = dom.getProp('path');\r\n            if (dom.hasProp('activename')) { // active属性为表达式，修改字段值\r\n                let model = module.modelNFactory.get(dom.modelId);\r\n                if (!model) {\r\n                    return;\r\n                }\r\n                let field = dom.getProp('activename');\r\n                //路径相同或参数路由路径前部分相同则设置active 为true，否则为false\r\n                if (path === domPath || path.indexOf(domPath + '/') === 0) {\r\n                    model.set(field, true);\r\n                }\r\n                else {\r\n                    model.set(field, false);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * 加载中标志\r\n */\r\nRouter.loading = false;\r\n/**\r\n * 路由map\r\n */\r\nRouter.routes = new Map();\r\n/**\r\n * 当前路径\r\n */\r\nRouter.currentPath = '';\r\n/**\r\n * 显示路径（useParentPath时，实际路由路径与显示路径不一致）\r\n */\r\nRouter.showPath = '';\r\n/**\r\n * path等待链表\r\n */\r\nRouter.waitList = [];\r\n/**\r\n * 当前路由在路由链中的index\r\n */\r\nRouter.currentIndex = 0;\r\n/**\r\n * 启动方式 0:直接启动 1:由element active改变启动 2:popstate 启动\r\n */\r\nRouter.startStyle = 0;\r\n/**\r\n * 激活Dom map，格式为{moduleId:[]}\r\n */\r\nRouter.activeDomMap = new Map();\r\n/**\r\n * 绑定到module的router指令对应的key，即router容器对应的key，格式为 {moduleId:routerKey,...}\r\n */\r\nRouter.routerKeyMap = new Map();\r\n/**\r\n * 路由类\r\n */\r\nexport class Route {\r\n    /**\r\n     *\r\n     * @param config 路由配置项\r\n     */\r\n    constructor(config) {\r\n        /**\r\n         * 路由参数名数组\r\n         */\r\n        this.params = [];\r\n        /**\r\n         * 路由参数数据\r\n         */\r\n        this.data = {};\r\n        /**\r\n         * 子路由\r\n         */\r\n        this.children = [];\r\n        //参数赋值\r\n        for (let o in config) {\r\n            this[o] = config[o];\r\n        }\r\n        if (config.path === '') {\r\n            return;\r\n        }\r\n        this.id = Util.genId();\r\n        if (!config.notAdd) {\r\n            Router.addRoute(this, config.parent);\r\n        }\r\n        //子路由\r\n        if (Util.isArray(config.routes)) {\r\n            config.routes.forEach((item) => {\r\n                item.parent = this;\r\n                new Route(item);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * 设置关联标签激活状态\r\n     */\r\n    setLinkActive() {\r\n        if (this.parent) {\r\n            let pm;\r\n            if (!this.parent.module) {\r\n                pm = ModuleFactory.getMain();\r\n            }\r\n            else {\r\n                pm = ModuleFactory.get(this.parent.module);\r\n            }\r\n            if (pm) {\r\n                Router.changeActive(pm, this.fullPath);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 添加子路由\r\n     * @param child\r\n     */\r\n    addChild(child) {\r\n        this.children.push(child);\r\n        child.parent = this;\r\n    }\r\n}\r\n/**\r\n * 路由树类\r\n */\r\nclass RouterTree {\r\n    /**\r\n     * 添加route到路由树\r\n     *\r\n     * @param route 路由\r\n     * @return 添加是否成功 type Boolean\r\n     */\r\n    static add(route, parent) {\r\n        //创建根节点\r\n        if (!this.root) {\r\n            this.root = new Route({ path: \"\", notAdd: true });\r\n        }\r\n        let pathArr = route.path.split('/');\r\n        let node = parent || this.root;\r\n        let param = [];\r\n        let paramIndex = -1; //最后一个参数开始\r\n        let prePath = ''; //前置路径\r\n        for (let i = 0; i < pathArr.length; i++) {\r\n            let v = pathArr[i].trim();\r\n            if (v === '') {\r\n                pathArr.splice(i--, 1);\r\n                continue;\r\n            }\r\n            if (v.startsWith(':')) { //参数\r\n                if (param.length === 0) {\r\n                    paramIndex = i;\r\n                }\r\n                param.push(v.substr(1));\r\n            }\r\n            else {\r\n                paramIndex = -1;\r\n                param = []; //上级路由的参数清空\r\n                route.path = v; //暂存path\r\n                let j = 0;\r\n                for (; j < node.children.length; j++) {\r\n                    let r = node.children[j];\r\n                    if (r.path === v) {\r\n                        node = r;\r\n                        break;\r\n                    }\r\n                }\r\n                //没找到，创建新节点\r\n                if (j === node.children.length) {\r\n                    if (prePath !== '') {\r\n                        let r = new Route({ path: prePath, notAdd: true });\r\n                        node.addChild(r);\r\n                        node = node.children[node.children.length - 1];\r\n                    }\r\n                    prePath = v;\r\n                }\r\n            }\r\n            //不存在参数\r\n            if (paramIndex === -1) {\r\n                route.params = [];\r\n            }\r\n            else {\r\n                route.params = param;\r\n            }\r\n        }\r\n        //添加到树\r\n        if (node !== undefined && node !== route) {\r\n            route.path = prePath;\r\n            node.addChild(route);\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * 从路由树中获取路由节点\r\n     * @param path  \t路径\r\n     */\r\n    static get(path) {\r\n        if (!this.root) {\r\n            throw new NError(\"notexist\", NodomMessage.TipWords['root']);\r\n        }\r\n        let pathArr = path.split('/');\r\n        let node = this.root;\r\n        let paramIndex = 0; //参数索引\r\n        let retArr = [];\r\n        let fullPath = ''; //完整路径\r\n        let preNode = this.root; //前一个节点\r\n        for (let i = 0; i < pathArr.length; i++) {\r\n            let v = pathArr[i].trim();\r\n            if (v === '') {\r\n                continue;\r\n            }\r\n            let find = false;\r\n            for (let j = 0; j < node.children.length; j++) {\r\n                if (node.children[j].path === v) {\r\n                    //设置完整路径\r\n                    if (preNode !== this.root) {\r\n                        preNode.fullPath = fullPath;\r\n                        preNode.data = node.data;\r\n                        retArr.push(preNode);\r\n                    }\r\n                    //设置新的查找节点\r\n                    node = node.children[j];\r\n                    //参数清空\r\n                    node.data = {};\r\n                    preNode = node;\r\n                    find = true;\r\n                    //参数索引置0\r\n                    paramIndex = 0;\r\n                    break;\r\n                }\r\n            }\r\n            //路径叠加\r\n            fullPath += '/' + v;\r\n            //不是孩子节点,作为参数\r\n            if (!find) {\r\n                if (paramIndex < node.params.length) { //超出参数长度的废弃\r\n                    node.data[node.params[paramIndex++]] = v;\r\n                }\r\n            }\r\n        }\r\n        //最后一个节点\r\n        if (node !== this.root) {\r\n            node.fullPath = fullPath;\r\n            retArr.push(node);\r\n        }\r\n        return retArr;\r\n    }\r\n}\r\n//处理popstate事件\r\nwindow.addEventListener('popstate', function (e) {\r\n    //根据state切换module\r\n    const state = history.state;\r\n    if (!state) {\r\n        return;\r\n    }\r\n    Router.startStyle = 2;\r\n    Router.go(state);\r\n});\r\n//# sourceMappingURL=router.js.map","references":["D:/graduate/project/nodom2.1/nodom2.1/core/application.ts","D:/graduate/project/nodom2.1/nodom2.1/core/error.ts","D:/graduate/project/nodom2.1/nodom2.1/core/model.ts","D:/graduate/project/nodom2.1/nodom2.1/core/module.ts","D:/graduate/project/nodom2.1/nodom2.1/core/modulefactory.ts","D:/graduate/project/nodom2.1/nodom2.1/core/nodom.ts","D:/graduate/project/nodom2.1/nodom2.1/core/types.ts","D:/graduate/project/nodom2.1/nodom2.1/core/util.ts"],"map":"{\"version\":3,\"file\":\"router.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/router.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/graduate/project/nodom2.1/nodom2.1/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/router.d.ts","writeByteOrderMark":false,"text":"import { IRouteCfg } from \"./types\";\r\n/**\r\n * 路由类\r\n * @since \t\t1.0\r\n */\r\nexport declare class Router {\r\n    /**\r\n     * 加载中标志\r\n     */\r\n    static loading: boolean;\r\n    /**\r\n     * 路由map\r\n     */\r\n    static routes: Map<number, Route>;\r\n    /**\r\n     * 当前路径\r\n     */\r\n    static currentPath: string;\r\n    /**\r\n     * 显示路径（useParentPath时，实际路由路径与显示路径不一致）\r\n     */\r\n    static showPath: string;\r\n    /**\r\n     * path等待链表\r\n     */\r\n    static waitList: Array<string>;\r\n    /**\r\n     * 当前路由在路由链中的index\r\n     */\r\n    static currentIndex: number;\r\n    /**\r\n     * 默认路由进入事件方法\r\n     */\r\n    static onDefaultEnter: Function;\r\n    /**\r\n     * 默认路由离开事件\r\n     */\r\n    static onDefaultLeave: Function;\r\n    /**\r\n     * 启动方式 0:直接启动 1:由element active改变启动 2:popstate 启动\r\n     */\r\n    static startStyle: number;\r\n    /**\r\n     * 激活Dom map，格式为{moduleId:[]}\r\n     */\r\n    static activeDomMap: Map<number, Array<string>>;\r\n    /**\r\n     * 绑定到module的router指令对应的key，即router容器对应的key，格式为 {moduleId:routerKey,...}\r\n     */\r\n    static routerKeyMap: Map<number, string>;\r\n    /**\r\n     * 把路径加入跳转列表(准备跳往该路由)\r\n     * @param path \t路径\r\n     */\r\n    static go(path: string): Promise<void>;\r\n    /**\r\n     * 启动加载\r\n     */\r\n    private static load;\r\n    /**\r\n     * 切换路由\r\n     * @param path \t路径\r\n     */\r\n    private static start;\r\n    static redirect(path: string): void;\r\n    /**\r\n     * 添加路由\r\n     * @param route \t路由配置\r\n     * @param parent \t父路由\r\n     */\r\n    static addRoute(route: Route, parent: Route): void;\r\n    /**\r\n     * 获取路由\r\n     * @param path \t路径\r\n     * @param last \t是否获取最后一个路由,默认false\r\n     */\r\n    static getRoute(path: string, last?: boolean): Array<Route>;\r\n    /**\r\n     * 比较两个路径对应的路由链\r\n     * @param path1 \t第一个路径\r\n     * @param path2 \t第二个路径\r\n     * @returns \t\t[不同路由的父路由，第一个需要销毁的路由数组，第二个需要增加的路由数组，上2级路由]\r\n     */\r\n    private static compare;\r\n    /**\r\n     * 修改模块active view（如果为view active为true，则需要路由跳转）\r\n     * @param module \t模块\r\n     * @param path \t\tview对应的route路径\r\n     */\r\n    static changeActive(module: any, path: any): void;\r\n}\r\n/**\r\n * 路由类\r\n */\r\nexport declare class Route {\r\n    /**\r\n     * 路由id\r\n     */\r\n    id: number;\r\n    /**\r\n     * 路由参数名数组\r\n     */\r\n    params: Array<string>;\r\n    /**\r\n     * 路由参数数据\r\n     */\r\n    data: any;\r\n    /**\r\n     * 子路由\r\n     */\r\n    children: Array<Route>;\r\n    /**\r\n     * 进入路由事件方法\r\n     */\r\n    onEnter: Function;\r\n    /**\r\n     * 离开路由方法\r\n     */\r\n    onLeave: Function;\r\n    /**\r\n     * 是否使用父路由路径\r\n     */\r\n    useParentPath: boolean;\r\n    /**\r\n     * 路由路径\r\n     */\r\n    path: string;\r\n    /**\r\n     * 完整路径\r\n     */\r\n    fullPath: string;\r\n    /**\r\n     * 路由对应模块id或类名\r\n     */\r\n    module: number | string;\r\n    /**\r\n     * 模块名\r\n     */\r\n    moduleName: string;\r\n    /**\r\n     * 模块绑定数据url\r\n     */\r\n    dataUrl: string;\r\n    /**\r\n     * 父路由\r\n     */\r\n    parent: Route;\r\n    /**\r\n     *\r\n     * @param config 路由配置项\r\n     */\r\n    constructor(config: IRouteCfg);\r\n    /**\r\n     * 设置关联标签激活状态\r\n     */\r\n    setLinkActive(): void;\r\n    /**\r\n     * 添加子路由\r\n     * @param child\r\n     */\r\n    addChild(child: Route): void;\r\n}\r\n"}}
