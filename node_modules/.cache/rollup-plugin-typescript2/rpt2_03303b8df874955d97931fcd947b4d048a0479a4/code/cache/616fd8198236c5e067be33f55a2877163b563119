{"code":"import { NError } from \"./error\";\r\nimport { Util } from \"./util\";\r\nimport { NodomMessage } from \"./nodom\";\r\n/**\r\n * filter类型命名规则：以小写字母a-z命名，其它字母不允许\r\n */\r\nexport class FilterManager {\r\n    /**\r\n     * 创建过滤器类型\r\n     * @param name \t\t过滤器类型名\r\n     * @param handler \t过滤器类型处理函数{init:foo1,handler:foo2}\r\n     */\r\n    static addType(name, handler) {\r\n        if (!/^[a-zA-Z]+$/.test(name)) {\r\n            throw new NError('namedinvalid', NodomMessage.TipWords['filterType'], name);\r\n        }\r\n        if (this.filterTypes.has(name)) {\r\n            throw new NError('exist1', NodomMessage.TipWords['filterType'], name);\r\n        }\r\n        if (!Util.isFunction(handler)) {\r\n            throw new NError('invoke', 'FilterManager.addType', '1', 'Function');\r\n        }\r\n        this.filterTypes.set(name, handler);\r\n    }\r\n    /**\r\n     * 移除过滤器类型\r\n     * @param name  过滤器类型名\r\n     */\r\n    static removeType(name) {\r\n        if (!this.filterTypes.has(name)) {\r\n            throw new NError('notexist1', NodomMessage.TipWords['filterType'], name);\r\n        }\r\n        this.filterTypes.delete(name);\r\n    }\r\n    /**\r\n     * 是否有某个过滤器类型\r\n     * @param type \t\t过滤器类型名\r\n     * @return \t\t\ttrue/false\r\n     */\r\n    static hasType(name) {\r\n        return this.filterTypes.has(name);\r\n    }\r\n    /**\r\n     * 执行过滤器\r\n     * @param module \t模块\r\n     * @param type \t\t类型\r\n     * @param arguments 参数数组  0模块 1过滤器类型名 2待处理值 3-n处理参数\r\n     * @returns \t\t过滤器执行结果\r\n     */\r\n    static exec(module, type) {\r\n        let params = new Array();\r\n        for (let i = 2; i < arguments.length; i++) {\r\n            params.push(arguments[i]);\r\n        }\r\n        if (!FilterManager.filterTypes.has(type)) {\r\n            throw new NError('notexist1', NodomMessage.TipWords['filterType'], type);\r\n        }\r\n        //调用\r\n        return Util.apply(FilterManager.filterTypes.get(type), module, params);\r\n    }\r\n    /**\r\n     * 解析过滤器串为数组\r\n     * @param src \t源字符串，格式为filtertype:param1:param2:...\r\n     * @returns \t解析后的过滤器数组参数\r\n     */\r\n    static explain(src) {\r\n        let startStr;\r\n        let startObj = false;\r\n        let strings = \"\\\"'`\"; //字符串开始和结束标志\r\n        let splitCh = ':'; //分隔符\r\n        let retArr = new Array();\r\n        let tmp = ''; //临时串\r\n        for (let i = 0; i < src.length; i++) {\r\n            let ch = src[i];\r\n            //字符串开始或结束\r\n            if (strings.indexOf(ch) !== -1) {\r\n                if (ch === startStr) { //字符串结束\r\n                    startStr = undefined;\r\n                }\r\n                else { //字符串开始\r\n                    startStr = ch;\r\n                }\r\n            }\r\n            else if (startStr === undefined) { //非字符串开始情况检查对象\r\n                if (ch === '}' && startObj) { //对象结束\r\n                    startObj = false;\r\n                }\r\n                else if (ch === '{') { //对象开始\r\n                    startObj = true;\r\n                }\r\n            }\r\n            //分割开始\r\n            if (ch === splitCh && startStr === undefined && !startObj && tmp !== '') {\r\n                retArr.push(handleObj(tmp));\r\n                tmp = '';\r\n                continue;\r\n            }\r\n            tmp += ch;\r\n        }\r\n        //最后一个\r\n        if (tmp !== '') {\r\n            retArr.push(handleObj(tmp));\r\n        }\r\n        return retArr;\r\n        /**\r\n         * 转化字符串为对象\r\n         */\r\n        function handleObj(s) {\r\n            s = s.trim();\r\n            if (s.charAt(0) === '{') { //转换为对象\r\n                s = eval('(' + s + ')');\r\n            }\r\n            return s;\r\n        }\r\n    }\r\n}\r\n/**\r\n * 过滤类型\r\n */\r\nFilterManager.filterTypes = new Map();\r\n//# sourceMappingURL=filtermanager.js.map","references":["D:/graduate/project/nodom2.1/nodom2.1/core/module.ts","D:/graduate/project/nodom2.1/nodom2.1/core/error.ts","D:/graduate/project/nodom2.1/nodom2.1/core/util.ts","D:/graduate/project/nodom2.1/nodom2.1/core/nodom.ts"],"map":"{\"version\":3,\"file\":\"filtermanager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/filtermanager.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/graduate/project/nodom2.1/nodom2.1/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/filtermanager.d.ts","writeByteOrderMark":false,"text":"import { Module } from \"./module\";\r\n/**\r\n * filter类型命名规则：以小写字母a-z命名，其它字母不允许\r\n */\r\nexport declare class FilterManager {\r\n    /**\r\n     * 过滤类型\r\n     */\r\n    private static filterTypes;\r\n    /**\r\n     * 创建过滤器类型\r\n     * @param name \t\t过滤器类型名\r\n     * @param handler \t过滤器类型处理函数{init:foo1,handler:foo2}\r\n     */\r\n    static addType(name: any, handler: any): void;\r\n    /**\r\n     * 移除过滤器类型\r\n     * @param name  过滤器类型名\r\n     */\r\n    static removeType(name: string): void;\r\n    /**\r\n     * 是否有某个过滤器类型\r\n     * @param type \t\t过滤器类型名\r\n     * @return \t\t\ttrue/false\r\n     */\r\n    static hasType(name: string): boolean;\r\n    /**\r\n     * 执行过滤器\r\n     * @param module \t模块\r\n     * @param type \t\t类型\r\n     * @param arguments 参数数组  0模块 1过滤器类型名 2待处理值 3-n处理参数\r\n     * @returns \t\t过滤器执行结果\r\n     */\r\n    static exec(module: Module, type: string): string;\r\n    /**\r\n     * 解析过滤器串为数组\r\n     * @param src \t源字符串，格式为filtertype:param1:param2:...\r\n     * @returns \t解析后的过滤器数组参数\r\n     */\r\n    static explain(src: string): Array<string>;\r\n}\r\n"}}
