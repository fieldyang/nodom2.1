{"code":"import { NError } from \"./error\";\r\nimport { NodomMessage } from \"./nodom\";\r\n/**\r\n * 基础服务库\r\n * @since       1.0.0\r\n */\r\nexport class Util {\r\n    //唯一主键\r\n    static genId() {\r\n        return this.generatedId++;\r\n    }\r\n    /******对象相关******/\r\n    /**\r\n     * 对象复制\r\n     * @param srcObj    源对象\r\n     * @param expKey    不复制的键正则表达式或名\r\n     * @param extra     clone附加参数\r\n     * @returns         复制的对象\r\n     */\r\n    static clone(srcObj, expKey, extra) {\r\n        let me = this;\r\n        let map = new WeakMap();\r\n        return clone(srcObj, expKey, extra);\r\n        /**\r\n         * clone对象\r\n         * @param src   待clone对象\r\n         * @param extra clone附加参数\r\n         * @returns     克隆后的对象\r\n         */\r\n        function clone(src, expKey, extra) {\r\n            //非对象或函数，直接返回            \r\n            if (!src || typeof src !== 'object' || Util.isFunction(src)) {\r\n                return src;\r\n            }\r\n            let dst;\r\n            //带有clone方法，则直接返回clone值\r\n            if (src.clone && Util.isFunction(src.clone)) {\r\n                return src.clone(extra);\r\n            }\r\n            else if (me.isObject(src)) {\r\n                dst = new Object();\r\n                //把对象加入map，如果后面有新克隆对象，则用新克隆对象进行覆盖\r\n                map.set(src, dst);\r\n                Object.getOwnPropertyNames(src).forEach((prop) => {\r\n                    //不克隆的键\r\n                    if (expKey) {\r\n                        if (expKey.constructor === RegExp && expKey.test(prop) //正则表达式匹配的键不复制\r\n                            || Util.isArray(expKey) && expKey.includes(prop) //被排除的键不复制\r\n                        ) {\r\n                            return;\r\n                        }\r\n                    }\r\n                    dst[prop] = getCloneObj(src[prop], expKey, extra);\r\n                });\r\n            }\r\n            else if (me.isMap(src)) {\r\n                dst = new Map();\r\n                //把对象加入map，如果后面有新克隆对象，则用新克隆对象进行覆盖\r\n                src.forEach((value, key) => {\r\n                    //不克隆的键\r\n                    if (expKey) {\r\n                        if (expKey.constructor === RegExp && expKey.test(key) //正则表达式匹配的键不复制\r\n                            || expKey.includes(key)) { //被排除的键不复制\r\n                            return;\r\n                        }\r\n                    }\r\n                    dst.set(key, getCloneObj(value, expKey, extra));\r\n                });\r\n            }\r\n            else if (me.isArray(src)) {\r\n                dst = new Array();\r\n                //把对象加入map，如果后面有新克隆对象，则用新克隆对象进行覆盖\r\n                src.forEach(function (item, i) {\r\n                    dst[i] = getCloneObj(item, expKey, extra);\r\n                });\r\n            }\r\n            return dst;\r\n        }\r\n        /**\r\n         * 获取clone对象\r\n         * @param value     待clone值\r\n         * @param expKey    排除键\r\n         * @param extra     附加参数\r\n         */\r\n        function getCloneObj(value, expKey, extra) {\r\n            if (typeof value === 'object' && !Util.isFunction(value)) {\r\n                let co = null;\r\n                if (!map.has(value)) { //clone新对象\r\n                    co = clone(value, expKey, extra);\r\n                }\r\n                else { //从map中获取对象\r\n                    co = map.get(value);\r\n                }\r\n                return co;\r\n            }\r\n            return value;\r\n        }\r\n    }\r\n    /**\r\n     * 合并多个对象并返回\r\n     * @param   参数数组\r\n     * @returns 返回对象\r\n     */\r\n    static merge(o1, o2, o3, o4, o5, o6) {\r\n        let me = this;\r\n        for (let i = 0; i < arguments.length; i++) {\r\n            if (!this.isObject(arguments[i])) {\r\n                throw new NError('invoke', 'Util.merge', i + '', 'object');\r\n            }\r\n        }\r\n        let retObj = Object.assign.apply(null, arguments);\r\n        subObj(retObj);\r\n        return retObj;\r\n        //处理子对象\r\n        function subObj(obj) {\r\n            for (let o in obj) {\r\n                if (me.isObject(obj[o]) || me.isArray(obj[o])) { //对象或数组\r\n                    retObj[o] = me.clone(retObj[o]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 把obj2对象所有属性赋值给obj1\r\n     */\r\n    static assign(obj1, obj2) {\r\n        if (Object.assign) {\r\n            Object.assign(obj1, obj2);\r\n        }\r\n        else {\r\n            this.getOwnProps(obj2).forEach(function (p) {\r\n                obj1[p] = obj2[p];\r\n            });\r\n        }\r\n        return obj1;\r\n    }\r\n    /**\r\n     * 获取对象自有属性\r\n     */\r\n    static getOwnProps(obj) {\r\n        if (!obj) {\r\n            return [];\r\n        }\r\n        return Object.getOwnPropertyNames(obj);\r\n    }\r\n    /**************对象判断相关************/\r\n    /**\r\n     * 是否为函数\r\n     * @param foo   检查的对象\r\n     * @returns     true/false\r\n     */\r\n    static isFunction(foo) {\r\n        return foo !== undefined && foo !== null && foo.constructor === Function;\r\n    }\r\n    /**\r\n     * 是否为数组\r\n     * @param obj   检查的对象\r\n     * @returns     true/false\r\n     */\r\n    static isArray(obj) {\r\n        return Array.isArray(obj);\r\n    }\r\n    /**\r\n     * 判断是否为map\r\n     * @param obj\r\n     */\r\n    static isMap(obj) {\r\n        return obj !== null && obj !== undefined && obj.constructor === Map;\r\n    }\r\n    /**\r\n     * 是否为对象\r\n     * @param obj   检查的对象\r\n     * @returns true/false\r\n     */\r\n    static isObject(obj) {\r\n        return obj !== null && obj !== undefined && obj.constructor === Object;\r\n    }\r\n    /**\r\n     * 判断是否为整数\r\n     * @param v 检查的值\r\n     * @returns true/false\r\n     */\r\n    static isInt(v) {\r\n        return Number.isInteger(v);\r\n    }\r\n    /**\r\n     * 判断是否为number\r\n     * @param v 检查的值\r\n     * @returns true/false\r\n     */\r\n    static isNumber(v) {\r\n        return typeof v === 'number';\r\n    }\r\n    /**\r\n     * 判断是否为boolean\r\n     * @param v 检查的值\r\n     * @returns true/false\r\n     */\r\n    static isBoolean(v) {\r\n        return typeof v === 'boolean';\r\n    }\r\n    /**\r\n     * 判断是否为字符串\r\n     * @param v 检查的值\r\n     * @returns true/false\r\n     */\r\n    static isString(v) {\r\n        return typeof v === 'string';\r\n    }\r\n    /**\r\n     * 是否为数字串\r\n     * @param v 检查的值\r\n     * @returns true/false\r\n     */\r\n    static isNumberString(v) {\r\n        return /^\\d+\\.?\\d*$/.test(v);\r\n    }\r\n    /**\r\n     * 对象/字符串是否为空\r\n     * @param obj   检查的对象\r\n     * @returns     true/false\r\n     */\r\n    static isEmpty(obj) {\r\n        if (obj === null || obj === undefined)\r\n            return true;\r\n        let tp = typeof obj;\r\n        if (this.isObject(obj)) {\r\n            let keys = Object.keys(obj);\r\n            if (keys !== undefined) {\r\n                return keys.length === 0;\r\n            }\r\n        }\r\n        else if (tp === 'string') {\r\n            return obj === '';\r\n        }\r\n        return false;\r\n    }\r\n    /***********************对象相关******************/\r\n    /**\r\n     * 找到符合符合属性值条件的对象（深度遍历）\r\n     * @param obj       待查询对象\r\n     * @param props     属性值对象\r\n     * @param one       是否满足一个条件就可以，默认false\r\n     */\r\n    static findObjByProps(obj, props, one) {\r\n        if (!this.isObject(obj)) {\r\n            throw new NError('invoke', 'this.findObjByProps', '0', 'Object');\r\n        }\r\n        //默认false\r\n        one = one || false;\r\n        let ps = this.getOwnProps(props);\r\n        let find = false;\r\n        if (one === false) { //所有条件都满足\r\n            find = true;\r\n            for (let i = 0; i < ps.length; i++) {\r\n                let p = ps[i];\r\n                if (obj[p] !== props[p]) {\r\n                    find = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else { //一个条件满足\r\n            for (let i = 0; i < ps.length; i++) {\r\n                let p = ps[i];\r\n                if (obj[p] === props[p]) {\r\n                    find = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (find) {\r\n            return obj;\r\n        }\r\n        //子节点查找\r\n        for (let p in obj) {\r\n            let o = obj[p];\r\n            if (o !== null) {\r\n                if (this.isObject(o)) { //子对象\r\n                    //递归查找\r\n                    let oprops = this.getOwnProps(o);\r\n                    for (let i = 0; i < oprops.length; i++) {\r\n                        let item = o[oprops[i]];\r\n                        if (item !== null && this.isObject(item)) {\r\n                            let r = this.findObjByProps(item, props, one);\r\n                            if (r !== null) {\r\n                                return r;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else if (this.isArray(o)) { //数组对象\r\n                    for (let i = 0; i < o.length; i++) {\r\n                        let item = o[i];\r\n                        if (item !== null && this.isObject(item)) {\r\n                            let r = this.findObjByProps(item, props, one);\r\n                            if (r !== null) {\r\n                                return r;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**********dom相关***********/\r\n    /**\r\n     * 获取dom节点\r\n     * @param selector  选择器\r\n     * @param findAll   是否获取所有，默认为false\r\n     * @param pview     父html element\r\n     * @returns         html element/null 或 nodelist或[]\r\n     */\r\n    static get(selector, findAll, pview) {\r\n        pview = pview || document;\r\n        if (findAll === true) {\r\n            return pview.querySelectorAll(selector);\r\n        }\r\n        return pview.querySelector(selector);\r\n    }\r\n    /**\r\n     * 是否为element\r\n     * @param el    传入的对象\r\n     * @returns     true/false\r\n     */\r\n    static isEl(el) {\r\n        return el instanceof HTMLElement || el instanceof SVGElement;\r\n    }\r\n    /**\r\n     * 是否为node\r\n     * @param node 传入的对象\r\n     * @returns true/false\r\n     */\r\n    static isNode(node) {\r\n        return node !== undefined && node !== null && (node.nodeType === Node.TEXT_NODE || node.nodeType === Node.ELEMENT_NODE || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE);\r\n    }\r\n    /**\r\n     * 新建dom\r\n     * @param tagName   标签名\r\n     * @param config    属性集合\r\n     * @param text      innerText\r\n     * @returns         新建的elelment\r\n     */\r\n    static newEl(tagName, config, text) {\r\n        if (!this.isString(tagName) || this.isEmpty(tagName)) {\r\n            throw new NError('invoke', 'this.newEl', '0', 'string');\r\n        }\r\n        let el = document.createElement(tagName);\r\n        if (this.isObject(config)) {\r\n            this.attr(el, config);\r\n        }\r\n        else if (this.isString(text)) {\r\n            el.innerHTML = text;\r\n        }\r\n        return el;\r\n    }\r\n    /**\r\n     * 新建svg element\r\n     * @param tagName   标签名\r\n     * @returns         svg element\r\n     */\r\n    static newSvgEl(tagName, config) {\r\n        let el = document.createElementNS(\"http://www.w3.org/2000/svg\", tagName);\r\n        if (this.isObject(config)) {\r\n            this.attr(el, config);\r\n        }\r\n        return el;\r\n    }\r\n    /**\r\n     * 把srcNode替换为nodes\r\n     * @param srcNode       源dom\r\n     * @param nodes         替换的dom或dom数组\r\n     */\r\n    static replaceNode(srcNode, nodes) {\r\n        if (!this.isNode(srcNode)) {\r\n            throw new NError('invoke', 'this.replaceNode', '0', 'Node');\r\n        }\r\n        if (!this.isNode(nodes) && !this.isArray(nodes)) {\r\n            throw new NError('invoke1', 'this.replaceNode', '1', 'Node', 'Node Array');\r\n        }\r\n        let pnode = srcNode.parentNode;\r\n        let bnode = srcNode.nextSibling;\r\n        if (pnode === null) {\r\n            return;\r\n        }\r\n        pnode.removeChild(srcNode);\r\n        const nodeArr = this.isArray(nodes) ? nodes : [nodes];\r\n        nodeArr.forEach(function (node) {\r\n            if (bnode === undefined || bnode === null) {\r\n                pnode.appendChild(node);\r\n            }\r\n            else {\r\n                pnode.insertBefore(node, bnode);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * 清空子节点\r\n     * @param el\r\n     */\r\n    static empty(el) {\r\n        const me = this;\r\n        if (!me.isEl(el)) {\r\n            throw new NError('invoke', 'this.empty', '0', 'Element');\r\n        }\r\n        let nodes = el.childNodes;\r\n        for (let i = nodes.length - 1; i >= 0; i--) {\r\n            el.removeChild(nodes[i]);\r\n        }\r\n    }\r\n    /**\r\n     * 删除节点\r\n     * @param node html node\r\n     */\r\n    static remove(node) {\r\n        const me = this;\r\n        if (!me.isNode(node)) {\r\n            throw new NError('invoke', 'this.remove', '0', 'Node');\r\n        }\r\n        if (node.parentNode !== null) {\r\n            node.parentNode.removeChild(node);\r\n        }\r\n    }\r\n    /**\r\n     * 获取／设置属性\r\n     * @param el    element\r\n     * @param param 属性名，设置多个属性时用对象\r\n     * @param value 属性值，获取属性时不需要设置\r\n     * @returns     属性值\r\n     */\r\n    static attr(el, param, value) {\r\n        const me = this;\r\n        if (!me.isEl(el)) {\r\n            throw new NError('invoke', 'this.attr', '0', 'Element');\r\n        }\r\n        if (this.isEmpty(param)) {\r\n            throw new NError('invoke', 'this.attr', '1', 'string', 'object');\r\n        }\r\n        if (value === undefined || value === null) {\r\n            if (this.isObject(param)) { //设置多个属性\r\n                this.getOwnProps(param).forEach(function (k) {\r\n                    if (k === 'value') {\r\n                        el[k] = param[k];\r\n                    }\r\n                    else {\r\n                        el.setAttribute(k, param[k]);\r\n                    }\r\n                });\r\n            }\r\n            else if (this.isString(param)) { //获取属性\r\n                if (param === 'value') {\r\n                    return param[value];\r\n                }\r\n                return el.getAttribute(param);\r\n            }\r\n        }\r\n        else { //设置属性\r\n            if (param === 'value') {\r\n                el[param] = value;\r\n            }\r\n            else {\r\n                el.setAttribute(param, value);\r\n            }\r\n        }\r\n    }\r\n    /******日期相关******/\r\n    /**\r\n     * 日期格式化\r\n     * @param srcDate   时间戳串\r\n     * @param format    日期格式\r\n     * @returns          日期串\r\n     */\r\n    static formatDate(srcDate, format) {\r\n        //时间戳\r\n        let timeStamp;\r\n        if (this.isString(srcDate)) {\r\n            //排除日期格式串,只处理时间戳\r\n            let reg = /^\\d+$/;\r\n            if (reg.test(srcDate) === true) {\r\n                timeStamp = parseInt(srcDate);\r\n            }\r\n        }\r\n        else if (this.isNumber(srcDate)) {\r\n            timeStamp = srcDate;\r\n        }\r\n        else {\r\n            throw new NError('invoke', 'this.formatDate', '0', 'date string', 'date');\r\n        }\r\n        //得到日期\r\n        let date = new Date(timeStamp);\r\n        // invalid date\r\n        if (isNaN(date.getDay())) {\r\n            return '';\r\n        }\r\n        let o = {\r\n            \"M+\": date.getMonth() + 1,\r\n            \"d+\": date.getDate(),\r\n            \"h+\": date.getHours() % 12 === 0 ? 12 : date.getHours() % 12,\r\n            \"H+\": date.getHours(),\r\n            \"m+\": date.getMinutes(),\r\n            \"s+\": date.getSeconds(),\r\n            \"q+\": Math.floor((date.getMonth() + 3) / 3),\r\n            \"S\": date.getMilliseconds() //毫秒\r\n        };\r\n        //年\r\n        if (/(y+)/.test(format)) {\r\n            format = format.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\r\n        }\r\n        //月日\r\n        this.getOwnProps(o).forEach(function (k) {\r\n            if (new RegExp(\"(\" + k + \")\").test(format)) {\r\n                format = format.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\"00\" + o[k]).substr((\"\" + o[k]).length)));\r\n            }\r\n        });\r\n        //星期\r\n        if (/(E+)/.test(format)) {\r\n            format = format.replace(RegExp.$1, ((RegExp.$1.length > 1) ? (RegExp.$1.length > 2 ? \"/u661f/u671f\" : \"/u5468\") : \"\") + NodomMessage.WeekDays[date.getDay() + \"\"]);\r\n        }\r\n        return format;\r\n    }\r\n    /******字符串相关*****/\r\n    /**\r\n     * 编译字符串，把{n}替换成带入值\r\n     * @param str 待编译的字符串\r\n     * @param args1,args2,args3,... 待替换的参数\r\n     * @returns 转换后的消息\r\n     */\r\n    static compileStr(src, p1, p2, p3, p4, p5) {\r\n        let reg;\r\n        let args = arguments;\r\n        let index = 0;\r\n        for (;;) {\r\n            if (src.indexOf('\\{' + index + '\\}') !== -1) {\r\n                reg = new RegExp('\\\\{' + index + '\\\\}', 'g');\r\n                src = src.replace(reg, args[index + 1]);\r\n                index++;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return src;\r\n    }\r\n    /**\r\n     * 函数调用\r\n     * @param foo   函数\r\n     * @param obj   this指向\r\n     * @param args  参数数组\r\n     */\r\n    static apply(foo, obj, args) {\r\n        if (!foo) {\r\n            return;\r\n        }\r\n        return Reflect.apply(foo, obj || null, args);\r\n    }\r\n    /**\r\n     * 合并并修正路径，即路径中出现'//','///','\\/'的情况，统一置换为'/'\r\n     * @param paths 待合并路径数组\r\n     * @returns     返回路径\r\n     */\r\n    static mergePath(paths) {\r\n        return paths.join('/').replace(/(\\/{2,})|\\\\\\//g, '\\/');\r\n    }\r\n}\r\nUtil.generatedId = 1;\r\n//# sourceMappingURL=util.js.map","references":["D:/graduate/project/nodom2.1/nodom2.1/core/error.ts","D:/graduate/project/nodom2.1/nodom2.1/core/nodom.ts"],"map":"{\"version\":3,\"file\":\"util.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/util.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/graduate/project/nodom2.1/nodom2.1/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/util.d.ts","writeByteOrderMark":false,"text":"/**\r\n * 基础服务库\r\n * @since       1.0.0\r\n */\r\nexport declare class Util {\r\n    private static generatedId;\r\n    static genId(): number;\r\n    /******对象相关******/\r\n    /**\r\n     * 对象复制\r\n     * @param srcObj    源对象\r\n     * @param expKey    不复制的键正则表达式或名\r\n     * @param extra     clone附加参数\r\n     * @returns         复制的对象\r\n     */\r\n    static clone(srcObj: Object, expKey?: RegExp | string[], extra?: any): any;\r\n    /**\r\n     * 合并多个对象并返回\r\n     * @param   参数数组\r\n     * @returns 返回对象\r\n     */\r\n    static merge(o1?: Object, o2?: Object, o3?: Object, o4?: Object, o5?: Object, o6?: Object): any;\r\n    /**\r\n     * 把obj2对象所有属性赋值给obj1\r\n     */\r\n    static assign(obj1: any, obj2: any): any;\r\n    /**\r\n     * 获取对象自有属性\r\n     */\r\n    static getOwnProps(obj: any): Array<string>;\r\n    /**************对象判断相关************/\r\n    /**\r\n     * 是否为函数\r\n     * @param foo   检查的对象\r\n     * @returns     true/false\r\n     */\r\n    static isFunction(foo: any): boolean;\r\n    /**\r\n     * 是否为数组\r\n     * @param obj   检查的对象\r\n     * @returns     true/false\r\n     */\r\n    static isArray(obj: any): boolean;\r\n    /**\r\n     * 判断是否为map\r\n     * @param obj\r\n     */\r\n    static isMap(obj: any): boolean;\r\n    /**\r\n     * 是否为对象\r\n     * @param obj   检查的对象\r\n     * @returns true/false\r\n     */\r\n    static isObject(obj: any): boolean;\r\n    /**\r\n     * 判断是否为整数\r\n     * @param v 检查的值\r\n     * @returns true/false\r\n     */\r\n    static isInt(v: any): boolean;\r\n    /**\r\n     * 判断是否为number\r\n     * @param v 检查的值\r\n     * @returns true/false\r\n     */\r\n    static isNumber(v: any): boolean;\r\n    /**\r\n     * 判断是否为boolean\r\n     * @param v 检查的值\r\n     * @returns true/false\r\n     */\r\n    static isBoolean(v: any): boolean;\r\n    /**\r\n     * 判断是否为字符串\r\n     * @param v 检查的值\r\n     * @returns true/false\r\n     */\r\n    static isString(v: any): boolean;\r\n    /**\r\n     * 是否为数字串\r\n     * @param v 检查的值\r\n     * @returns true/false\r\n     */\r\n    static isNumberString(v: any): boolean;\r\n    /**\r\n     * 对象/字符串是否为空\r\n     * @param obj   检查的对象\r\n     * @returns     true/false\r\n     */\r\n    static isEmpty(obj: any): boolean;\r\n    /***********************对象相关******************/\r\n    /**\r\n     * 找到符合符合属性值条件的对象（深度遍历）\r\n     * @param obj       待查询对象\r\n     * @param props     属性值对象\r\n     * @param one       是否满足一个条件就可以，默认false\r\n     */\r\n    static findObjByProps(obj: Object, props: Object, one: boolean): Array<Object> | Object;\r\n    /**********dom相关***********/\r\n    /**\r\n     * 获取dom节点\r\n     * @param selector  选择器\r\n     * @param findAll   是否获取所有，默认为false\r\n     * @param pview     父html element\r\n     * @returns         html element/null 或 nodelist或[]\r\n     */\r\n    static get(selector: string, findAll?: boolean, pview?: HTMLElement | Document): Node | NodeList;\r\n    /**\r\n     * 是否为element\r\n     * @param el    传入的对象\r\n     * @returns     true/false\r\n     */\r\n    static isEl(el: any): boolean;\r\n    /**\r\n     * 是否为node\r\n     * @param node 传入的对象\r\n     * @returns true/false\r\n     */\r\n    static isNode(node: any): boolean;\r\n    /**\r\n     * 新建dom\r\n     * @param tagName   标签名\r\n     * @param config    属性集合\r\n     * @param text      innerText\r\n     * @returns         新建的elelment\r\n     */\r\n    static newEl(tagName: string, config?: Object, text?: string): HTMLElement;\r\n    /**\r\n     * 新建svg element\r\n     * @param tagName   标签名\r\n     * @returns         svg element\r\n     */\r\n    static newSvgEl(tagName: string, config?: Object): SVGElement;\r\n    /**\r\n     * 把srcNode替换为nodes\r\n     * @param srcNode       源dom\r\n     * @param nodes         替换的dom或dom数组\r\n     */\r\n    static replaceNode(srcNode: Node, nodes: Node | Array<Node>): void;\r\n    /**\r\n     * 清空子节点\r\n     * @param el\r\n     */\r\n    static empty(el: HTMLElement): void;\r\n    /**\r\n     * 删除节点\r\n     * @param node html node\r\n     */\r\n    static remove(node: Node): void;\r\n    /**\r\n     * 获取／设置属性\r\n     * @param el    element\r\n     * @param param 属性名，设置多个属性时用对象\r\n     * @param value 属性值，获取属性时不需要设置\r\n     * @returns     属性值\r\n     */\r\n    static attr(el: Element, param: string | Object, value?: any): any;\r\n    /******日期相关******/\r\n    /**\r\n     * 日期格式化\r\n     * @param srcDate   时间戳串\r\n     * @param format    日期格式\r\n     * @returns          日期串\r\n     */\r\n    static formatDate(srcDate: string | number, format: string): string;\r\n    /******字符串相关*****/\r\n    /**\r\n     * 编译字符串，把{n}替换成带入值\r\n     * @param str 待编译的字符串\r\n     * @param args1,args2,args3,... 待替换的参数\r\n     * @returns 转换后的消息\r\n     */\r\n    static compileStr(src: string, p1?: any, p2?: any, p3?: any, p4?: any, p5?: any): string;\r\n    /**\r\n     * 函数调用\r\n     * @param foo   函数\r\n     * @param obj   this指向\r\n     * @param args  参数数组\r\n     */\r\n    static apply(foo: Function, obj: any, args?: Array<any>): any;\r\n    /**\r\n     * 合并并修正路径，即路径中出现'//','///','\\/'的情况，统一置换为'/'\r\n     * @param paths 待合并路径数组\r\n     * @returns     返回路径\r\n     */\r\n    static mergePath(paths: string[]): string;\r\n}\r\n"}}
