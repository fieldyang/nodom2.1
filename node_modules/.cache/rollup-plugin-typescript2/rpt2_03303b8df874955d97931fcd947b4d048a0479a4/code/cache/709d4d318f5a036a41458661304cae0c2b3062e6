{"code":"import { Renderer } from \"./renderer\";\r\n/**\r\n * 模型工厂\r\n */\r\nexport class ModelManager {\r\n    constructor(module) {\r\n        /**\r\n         * 数据对象与模型映射，key为数据对象，value为model\r\n         */\r\n        this.dataMap = new WeakMap();\r\n        /**\r\n         * 模型模块映射\r\n         * key:model proxy, value:{model:model,watchers:{key:[监听器1,监听器2,...]}}\r\n         * 每个数据对象，可有多个监听器\r\n         */\r\n        this.modelMap = new WeakMap();\r\n        this.module = module;\r\n    }\r\n    /**\r\n     * 添加到 dataNModelMap\r\n     * @param data      数据对象\r\n     * @param model     模型\r\n     */\r\n    addToDataMap(data, model) {\r\n        this.dataMap.set(data, model);\r\n    }\r\n    /**\r\n     * 从dataNModelMap获取model\r\n     * @param data      数据对象\r\n     * @returns         model\r\n     */\r\n    getFromDataMap(data) {\r\n        return this.dataMap.get(data);\r\n    }\r\n    /**\r\n     * 是否存在数据模型映射\r\n     * @param data  数据对象\r\n     * @returns     true/false\r\n     */\r\n    hasDataNModel(data) {\r\n        return this.dataMap.has(data);\r\n    }\r\n    /**\r\n     * 添加源模型到到模型map\r\n     * @param model     模型代理\r\n     * @param srcNModel  源模型\r\n     */\r\n    addModelToModelMap(model, srcNModel) {\r\n        if (!this.modelMap.has(model)) {\r\n            this.modelMap.set(model, { model: srcNModel });\r\n        }\r\n        else {\r\n            this.modelMap.get(model).model = srcNModel;\r\n        }\r\n    }\r\n    /**\r\n     * 从模型Map获取源模型\r\n     * @param model     模型代理\r\n     * @returns         源模型\r\n     */\r\n    getModelFromModelMap(model) {\r\n        if (this.modelMap.has(model)) {\r\n            return this.modelMap.get(model).model;\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * 获取model监听器\r\n     * @param model     model\r\n     * @param key       model对应的属性\r\n     * @param foo       监听处理方法\r\n     * @returns         void\r\n     */\r\n    addWatcherToModelMap(model, key, foo) {\r\n        // 把model加入到model map\r\n        if (!this.modelMap.has(model)) {\r\n            this.modelMap.set(model, {});\r\n        }\r\n        //添加watchers属性\r\n        if (!this.modelMap.get(model).watchers) {\r\n            this.modelMap.get(model).watchers = Object.create(null);\r\n        }\r\n        let watchers = this.modelMap.get(model).watchers;\r\n        //添加观察器数组\r\n        if (!watchers[key]) {\r\n            watchers[key] = [];\r\n        }\r\n        //把处理函数加入观察器数组\r\n        watchers[key].push(foo);\r\n    }\r\n    /**\r\n     * 获取model监听器\r\n     * @param model     model\r\n     * @param key       model对应的属性\r\n     * @param foo       监听处理方法\r\n     * @returns         void\r\n     */\r\n    removeWatcherFromModelMap(model, key, foo) {\r\n        if (!this.modelMap.has(model)) {\r\n            return;\r\n        }\r\n        if (!this.modelMap.get(model).watchers) {\r\n            return;\r\n        }\r\n        let watchers = this.modelMap.get(model).watchers;\r\n        if (!watchers[key]) {\r\n            return;\r\n        }\r\n        let index = watchers[key].findIndex(foo);\r\n        //找到后移除\r\n        if (index !== -1) {\r\n            watchers.splice(index, 1);\r\n        }\r\n    }\r\n    /**\r\n     * 获取model监听器\r\n     * @param model     model\r\n     * @param key       model对应的属性\r\n     * @returns         监听处理函数数组\r\n     */\r\n    getWatcherFromModelMap(model, key) {\r\n        if (!this.modelMap.has(model)) {\r\n            return undefined;\r\n        }\r\n        let watchers = this.modelMap.get(model).watchers;\r\n        if (watchers) {\r\n            return watchers[key];\r\n        }\r\n    }\r\n    /**\r\n     * 更新导致渲染\r\n     * @param model     model\r\n     * @param key       属性\r\n     * @param oldValue  旧值\r\n     * @param newValue  新值\r\n     */\r\n    update(model, key, oldValue, newValue) {\r\n        Renderer.add(this.module);\r\n        //处理观察器函数\r\n        let watcher = this.getWatcherFromModelMap(model, key);\r\n        if (watcher) {\r\n            for (let foo of watcher) {\r\n                //方法名\r\n                if (typeof foo === 'string') {\r\n                    if (this.module) {\r\n                        foo = this.module.getMethod(foo);\r\n                        if (foo) {\r\n                            foo.call(model, oldValue, newValue);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    foo.call(model, oldValue, newValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=modelmanager.js.map","references":["D:/graduate/project/nodom2.1/nodom2.1/core/model.ts","D:/graduate/project/nodom2.1/nodom2.1/core/module.ts","D:/graduate/project/nodom2.1/nodom2.1/core/renderer.ts"],"map":"{\"version\":3,\"file\":\"modelmanager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/modelmanager.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/graduate/project/nodom2.1/nodom2.1/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/modelmanager.d.ts","writeByteOrderMark":false,"text":"import { Model } from \"./model\";\r\nimport { Module } from \"./module\";\r\n/**\r\n * 模型工厂\r\n */\r\nexport declare class ModelManager {\r\n    private module;\r\n    /**\r\n     * 数据对象与模型映射，key为数据对象，value为model\r\n     */\r\n    private dataMap;\r\n    /**\r\n     * 模型模块映射\r\n     * key:model proxy, value:{model:model,watchers:{key:[监听器1,监听器2,...]}}\r\n     * 每个数据对象，可有多个监听器\r\n     */\r\n    private modelMap;\r\n    constructor(module: Module);\r\n    /**\r\n     * 添加到 dataNModelMap\r\n     * @param data      数据对象\r\n     * @param model     模型\r\n     */\r\n    addToDataMap(data: Object, model: Model): void;\r\n    /**\r\n     * 从dataNModelMap获取model\r\n     * @param data      数据对象\r\n     * @returns         model\r\n     */\r\n    getFromDataMap(data: Object): Model;\r\n    /**\r\n     * 是否存在数据模型映射\r\n     * @param data  数据对象\r\n     * @returns     true/false\r\n     */\r\n    hasDataNModel(data: Object): Boolean;\r\n    /**\r\n     * 添加源模型到到模型map\r\n     * @param model     模型代理\r\n     * @param srcNModel  源模型\r\n     */\r\n    addModelToModelMap(model: any, srcNModel: Model): void;\r\n    /**\r\n     * 从模型Map获取源模型\r\n     * @param model     模型代理\r\n     * @returns         源模型\r\n     */\r\n    getModelFromModelMap(model: any): Model;\r\n    /**\r\n     * 获取model监听器\r\n     * @param model     model\r\n     * @param key       model对应的属性\r\n     * @param foo       监听处理方法\r\n     * @returns         void\r\n     */\r\n    addWatcherToModelMap(model: Model, key: string, foo: Function | string): void;\r\n    /**\r\n     * 获取model监听器\r\n     * @param model     model\r\n     * @param key       model对应的属性\r\n     * @param foo       监听处理方法\r\n     * @returns         void\r\n     */\r\n    removeWatcherFromModelMap(model: Model, key: string, foo: Function | string): void;\r\n    /**\r\n     * 获取model监听器\r\n     * @param model     model\r\n     * @param key       model对应的属性\r\n     * @returns         监听处理函数数组\r\n     */\r\n    getWatcherFromModelMap(model: Model, key: string): Array<Function>;\r\n    /**\r\n     * 更新导致渲染\r\n     * @param model     model\r\n     * @param key       属性\r\n     * @param oldValue  旧值\r\n     * @param newValue  新值\r\n     */\r\n    update(model: Model, key: string, oldValue: any, newValue: any): void;\r\n}\r\n"}}
