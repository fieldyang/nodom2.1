{"code":"import { NError } from \"./error\";\r\nimport { NFactory } from \"./factory\";\r\nimport { NodomMessage } from \"./nodom\";\r\nimport { Util } from \"./util\";\r\n/**\r\n * 方法工厂，每个模块一个\r\n */\r\nexport class MethodFactory extends NFactory {\r\n    /**\r\n     * 调用方法\r\n     * @param name \t\t方法名\r\n     * @param params \t方法参数数组\r\n     */\r\n    invoke(name, params) {\r\n        const foo = this.get(name);\r\n        if (!Util.isFunction(foo)) {\r\n            throw new NError(NodomMessage.ErrorMsgs['notexist1'], NodomMessage.TipWords['method'], name);\r\n        }\r\n        return Util.apply(foo, this.module.model, params);\r\n    }\r\n}\r\n//# sourceMappingURL=methodfactory.js.map","references":["D:/graduate/project/nodom2.1/nodom2.1/core/error.ts","D:/graduate/project/nodom2.1/nodom2.1/core/factory.ts","D:/graduate/project/nodom2.1/nodom2.1/core/nodom.ts","D:/graduate/project/nodom2.1/nodom2.1/core/module.ts","D:/graduate/project/nodom2.1/nodom2.1/core/util.ts"],"map":"{\"version\":3,\"file\":\"methodfactory.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/methodfactory.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,EAAE,QAAQ,EAAE,MAAM,WAAW,CAAC;AACrC,OAAO,EAAE,YAAY,EAAE,MAAM,SAAS,CAAC;AAEvC,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B;;GAEG;AACH,MAAM,OAAO,aAAc,SAAQ,QAAQ;IAEvC;;;;OAIG;IACI,MAAM,CAAC,IAAW,EAAE,MAAiB;QACxC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC3B,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YACvB,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC;SAChG;QACD,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACtD,CAAC;CACJ\"}","dts":{"name":"D:/graduate/project/nodom2.1/nodom2.1/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/methodfactory.d.ts","writeByteOrderMark":false,"text":"import { NFactory } from \"./factory\";\r\n/**\r\n * 方法工厂，每个模块一个\r\n */\r\nexport declare class MethodFactory extends NFactory {\r\n    private module;\r\n    /**\r\n     * 调用方法\r\n     * @param name \t\t方法名\r\n     * @param params \t方法参数数组\r\n     */\r\n    invoke(name: string, params: Array<any>): any;\r\n}\r\n"}}
